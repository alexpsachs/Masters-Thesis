[
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13763488",
        "pull_request_review_id": null,
        "id": 13763488,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzYzNDg4",
        "diff_hunk": "@@ -0,0 +1,47 @@\n+use super::super::request::Request;\n+use super::super::response::Response;\n+use super::super::ingot::{Ingot, Continue, Unwind};\n+use super::super::anymap::AnyMap;",
        "path": "src/furnace/ironfurnace.rs",
        "position": 4,
        "original_position": 4,
        "commit_id": "123d79602f22602a3719adfe59b78ff359b7fe96",
        "original_commit_id": "dcdfaa534cc971aecf3720a22d22af5c66084b57",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why are you using both AnyMap and Alloy? We need to decide how to expose this.\n",
        "created_at": "2014-06-13T17:59:09Z",
        "updated_at": "2014-06-13T18:02:02Z",
        "html_url": "https://github.com/iron/iron/pull/4#discussion_r13763488",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13763488"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/4#discussion_r13763488"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13763572",
        "pull_request_review_id": null,
        "id": 13763572,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzYzNTcy",
        "diff_hunk": "@@ -0,0 +1,47 @@\n+use super::super::request::Request;\n+use super::super::response::Response;\n+use super::super::ingot::{Ingot, Continue, Unwind};\n+use super::super::anymap::AnyMap;",
        "path": "src/furnace/ironfurnace.rs",
        "position": 4,
        "original_position": 4,
        "commit_id": "123d79602f22602a3719adfe59b78ff359b7fe96",
        "original_commit_id": "dcdfaa534cc971aecf3720a22d22af5c66084b57",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's temporary until we can decide on a better way to expose Alloy as a standalone thing.\n",
        "created_at": "2014-06-13T18:00:38Z",
        "updated_at": "2014-06-13T18:02:02Z",
        "html_url": "https://github.com/iron/iron/pull/4#discussion_r13763572",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13763572"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/4#discussion_r13763572"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13763636",
        "pull_request_review_id": null,
        "id": 13763636,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzYzNjM2",
        "diff_hunk": "@@ -0,0 +1,44 @@\n+use super::super::request::Request;\n+use super::super::response::Response;\n+use super::super::ingot::{Ingot, Continue, Unwind};\n+use super::super::anymap::AnyMap;\n+use super::super::alloy::Alloy;\n+\n+use super::Furnace;\n+\n+struct IronFurnace<Rq, Rs> {\n+    stack: Vec<Box<Ingot<Rq, Rs>: Send>>\n+}\n+\n+impl<Rq: Request, Rs: Response> Clone for IronFurnace<Rq, Rs> {\n+    fn clone(&self) -> IronFurnace<Rq, Rs> { IronFurnace { stack: self.stack.clone() } }\n+}\n+\n+impl<Rq: Request, Rs: Response> Furnace<Rq, Rs> for IronFurnace<Rq, Rs> {\n+    fn forge(&mut self, request: &mut Rq, response: &mut Rs, malloy: Option<&mut Alloy>) {",
        "path": "src/furnace/ironfurnace.rs",
        "position": null,
        "original_position": 18,
        "commit_id": "123d79602f22602a3719adfe59b78ff359b7fe96",
        "original_commit_id": "a5325c0084bc457622cc00a8ffc7a14f9dd2d16f",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`malloy` looks like it has to do with the Alloy's mutability, not its optionality. Could this be changed to opt_alloy, or something similar?\n",
        "created_at": "2014-06-13T18:01:48Z",
        "updated_at": "2014-06-13T18:02:02Z",
        "html_url": "https://github.com/iron/iron/pull/4#discussion_r13763636",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13763636"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/4#discussion_r13763636"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13763777",
        "pull_request_review_id": null,
        "id": 13763777,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzYzNzc3",
        "diff_hunk": "@@ -0,0 +1,44 @@\n+use super::super::request::Request;\n+use super::super::response::Response;\n+use super::super::ingot::{Ingot, Continue, Unwind};\n+use super::super::anymap::AnyMap;\n+use super::super::alloy::Alloy;\n+\n+use super::Furnace;\n+\n+struct IronFurnace<Rq, Rs> {\n+    stack: Vec<Box<Ingot<Rq, Rs>: Send>>\n+}\n+\n+impl<Rq: Request, Rs: Response> Clone for IronFurnace<Rq, Rs> {\n+    fn clone(&self) -> IronFurnace<Rq, Rs> { IronFurnace { stack: self.stack.clone() } }\n+}\n+\n+impl<Rq: Request, Rs: Response> Furnace<Rq, Rs> for IronFurnace<Rq, Rs> {\n+    fn forge(&mut self, request: &mut Rq, response: &mut Rs, malloy: Option<&mut Alloy>) {\n+        let mut alloy = &mut AnyMap::new();\n+\n+        match malloy {\n+            Some(a) => alloy = a,\n+            None => ()\n+        };\n+\n+        let mut exit_stack = vec![];",
        "path": "src/furnace/ironfurnace.rs",
        "position": 26,
        "original_position": 26,
        "commit_id": "123d79602f22602a3719adfe59b78ff359b7fe96",
        "original_commit_id": "a5325c0084bc457622cc00a8ffc7a14f9dd2d16f",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why `exit_stack`? This is the middleware stack, could we call it `mid_stack`, or `cur_stack`, or `active_stack` to differentiate it from `self.stack`? We could even name it `stack`, although that seems confusing.\n",
        "created_at": "2014-06-13T18:04:33Z",
        "updated_at": "2014-06-13T18:04:33Z",
        "html_url": "https://github.com/iron/iron/pull/4#discussion_r13763777",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13763777"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/4#discussion_r13763777"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13768187",
        "pull_request_review_id": null,
        "id": 13768187,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzY4MTg3",
        "diff_hunk": "@@ -5,8 +5,29 @@ use super::ingot::Ingot;\n \n pub mod ironfurnace;\n \n+/// `Furnace`'s are the backbone of `Iron`. They coordinate `Ingots`",
        "path": "src/furnace/mod.rs",
        "position": null,
        "original_position": 4,
        "commit_id": "9fe85783224ef8fb7f30bbf09a65be01f5eb71f9",
        "original_commit_id": "e42591654558ef0acb1a6e1bd30fea0dfafcf7e8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Use `Furnace`s and `Ingot`s.\n",
        "created_at": "2014-06-13T19:36:07Z",
        "updated_at": "2014-06-13T19:45:47Z",
        "html_url": "https://github.com/iron/iron/pull/7#discussion_r13768187",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/7",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13768187"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/7#discussion_r13768187"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/7"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13768190",
        "pull_request_review_id": null,
        "id": 13768190,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzY4MTkw",
        "diff_hunk": "@@ -5,8 +5,29 @@ use super::ingot::Ingot;\n \n pub mod ironfurnace;\n \n+/// `Furnace`'s are the backbone of `Iron`. They coordinate `Ingots`\n+/// and ensure they are resolved and called in the right order,\n+/// create and distribute `Alloys`, and handle incoming requests.",
        "path": "src/furnace/mod.rs",
        "position": null,
        "original_position": 6,
        "commit_id": "9fe85783224ef8fb7f30bbf09a65be01f5eb71f9",
        "original_commit_id": "e42591654558ef0acb1a6e1bd30fea0dfafcf7e8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "and `Alloy`s\n",
        "created_at": "2014-06-13T19:36:14Z",
        "updated_at": "2014-06-13T19:45:47Z",
        "html_url": "https://github.com/iron/iron/pull/7#discussion_r13768190",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/7",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13768190"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/7#discussion_r13768190"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/7"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13783049",
        "pull_request_review_id": null,
        "id": 13783049,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzgzMDQ5",
        "diff_hunk": "@@ -43,11 +61,16 @@ impl<'a,\n      F: Furnace<'a, Rq, Rs>>\n         Server for Iron<Rq, Rs, F> {\n     fn get_config(&self) -> Config {\n-        Config { bind_address: SocketAddr { ip: self.ip, port: self.port } }\n+        Config { bind_address: SocketAddr {\n+            ip: self.ip.unwrap(),\n+            port: self.port.unwrap()\n+        } }\n     }\n \n-    fn handle_request(&self, _req: &server::Request, _res: &mut server::ResponseWriter) {\n-        // coerce allllllll that\n+    fn handle_request(&self, req: &server::Request, res: &mut server::ResponseWriter) {\n+        let request = &mut Request::from_http(req);\n+        let response: &mut Rs = unsafe { mem::transmute(res) };",
        "path": "src/iron/mod.rs",
        "position": 69,
        "original_position": 69,
        "commit_id": "6145abc78aa056b5d3d72138a80da49c1dec7761",
        "original_commit_id": "6145abc78aa056b5d3d72138a80da49c1dec7761",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you mark this with FIXME or something similar?\n",
        "created_at": "2014-06-14T21:52:52Z",
        "updated_at": "2014-06-14T21:52:52Z",
        "html_url": "https://github.com/iron/iron/pull/16#discussion_r13783049",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/16",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13783049"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/16#discussion_r13783049"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13783051",
        "pull_request_review_id": null,
        "id": 13783051,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzgzMDUx",
        "diff_hunk": "@@ -43,11 +61,16 @@ impl<'a,\n      F: Furnace<'a, Rq, Rs>>\n         Server for Iron<Rq, Rs, F> {\n     fn get_config(&self) -> Config {\n-        Config { bind_address: SocketAddr { ip: self.ip, port: self.port } }\n+        Config { bind_address: SocketAddr {\n+            ip: self.ip.unwrap(),\n+            port: self.port.unwrap()\n+        } }\n     }\n \n-    fn handle_request(&self, _req: &server::Request, _res: &mut server::ResponseWriter) {\n-        // coerce allllllll that\n+    fn handle_request(&self, req: &server::Request, res: &mut server::ResponseWriter) {\n+        let request = &mut Request::from_http(req);\n+        let response: &mut Rs = unsafe { mem::transmute(res) };\n+        let mut furnace = self.furnace.clone();",
        "path": "src/iron/mod.rs",
        "position": 70,
        "original_position": 70,
        "commit_id": "6145abc78aa056b5d3d72138a80da49c1dec7761",
        "original_commit_id": "6145abc78aa056b5d3d72138a80da49c1dec7761",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I worry about the performance implications of this...\n",
        "created_at": "2014-06-14T21:53:12Z",
        "updated_at": "2014-06-14T21:53:12Z",
        "html_url": "https://github.com/iron/iron/pull/16#discussion_r13783051",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/16",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13783051"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/16#discussion_r13783051"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784492",
        "pull_request_review_id": null,
        "id": 13784492,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0NDky",
        "diff_hunk": "@@ -1,4 +1,144 @@\n-Iron\n+Iron [![Build Status](https://secure.travis-ci.org/iron/iron.png?branch=master)](https://travis-ci.org/iron/iron)\n ====\n \n-Express inspired, rapid, scalable, concurrent and safe server development\n+> Express inspired, rapid, scalable, concurrent and safe server development\n+\n+Iron is a high level web framework built in and for Rust. Iron does not come\n+bundled with any middleware, which Iron calls Ingots - instead, Iron is a\n+robust and efficient framework for plugging in middleware.\n+\n+After spawning, handling a single request through Iron\u2019s middleware stack\n+with a single no-op middleware takes only _300 nanoseconds_.\n+\n+## Installation\n+\n+```bash\n+./configure   # Gets all dependencies and builds them\n+make lib      # Build Iron itself -- you can stop here if you just want the library\n+make test     # Build and run tests\n+make examples # Build the examples\n+make doc      # Build documentation using rustdoc\n+```\n+\n+## Get Help\n+\n+One of us (@reem, @zzmp, @theptrk, @mcreinhard) is usually on `#iron` on the\n+mozilla irc. Come say hi and ask any questions you might have. We are also\n+usually on `#rust`.\n+\n+## Overview\n+\n+Iron aims to fill a void in the Rust web stack - a high level framework that is\n+*extensible* and makes organizing complex server code easy.\n+\n+Whereas other web frameworks have focused mostly on creating an easy-to-use\n+routing system, Iron focuses on providing a clean API for creating\n+Ingots/middleware and integrating them in Iron servers.\n+\n+In fact, Routing is middleware in Iron, as is Mounting, Body Parsing, and most",
        "path": "README.md",
        "position": null,
        "original_position": 40,
        "commit_id": "6a208b924cded620b8155c42b2773bf53c8ab282",
        "original_commit_id": "d70b8b0b35455e8e3738bf32fb049251cee52c36",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "as _are_.\n",
        "created_at": "2014-06-15T05:25:42Z",
        "updated_at": "2014-06-15T05:40:24Z",
        "html_url": "https://github.com/iron/iron/pull/24#discussion_r13784492",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/24",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784492"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/24#discussion_r13784492"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784507",
        "pull_request_review_id": null,
        "id": 13784507,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0NTA3",
        "diff_hunk": "@@ -1,4 +1,144 @@\n-Iron\n+Iron [![Build Status](https://secure.travis-ci.org/iron/iron.png?branch=master)](https://travis-ci.org/iron/iron)\n ====\n \n-Express inspired, rapid, scalable, concurrent and safe server development\n+> Express inspired, rapid, scalable, concurrent and safe server development\n+\n+Iron is a high level web framework built in and for Rust. Iron does not come\n+bundled with any middleware, which Iron calls Ingots - instead, Iron is a\n+robust and efficient framework for plugging in middleware.\n+\n+After spawning, handling a single request through Iron\u2019s middleware stack\n+with a single no-op middleware takes only _300 nanoseconds_.\n+\n+## Installation\n+\n+```bash\n+./configure   # Gets all dependencies and builds them\n+make lib      # Build Iron itself -- you can stop here if you just want the library\n+make test     # Build and run tests\n+make examples # Build the examples\n+make doc      # Build documentation using rustdoc\n+```\n+\n+## Get Help\n+\n+One of us (@reem, @zzmp, @theptrk, @mcreinhard) is usually on `#iron` on the\n+mozilla irc. Come say hi and ask any questions you might have. We are also\n+usually on `#rust`.\n+\n+## Overview\n+\n+Iron aims to fill a void in the Rust web stack - a high level framework that is\n+*extensible* and makes organizing complex server code easy.\n+\n+Whereas other web frameworks have focused mostly on creating an easy-to-use\n+routing system, Iron focuses on providing a clean API for creating\n+Ingots/middleware and integrating them in Iron servers.\n+\n+In fact, Routing is middleware in Iron, as is Mounting, Body Parsing, and most\n+other features. This allows for insanely flexible setups and allows almost all\n+of Iron\u2019s features to be swappable - you can even change the middleware\n+resolution algorithm by swapping in your own Furnace.\n+\n+## Examples\n+\n+Here\u2019s an, as of yet hypothetical\\*, setup for an api with two different",
        "path": "README.md",
        "position": null,
        "original_position": 47,
        "commit_id": "6a208b924cded620b8155c42b2773bf53c8ab282",
        "original_commit_id": "d70b8b0b35455e8e3738bf32fb049251cee52c36",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Commas are unnecessary.\n",
        "created_at": "2014-06-15T05:28:28Z",
        "updated_at": "2014-06-15T05:40:24Z",
        "html_url": "https://github.com/iron/iron/pull/24#discussion_r13784507",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/24",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784507"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/24#discussion_r13784507"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784711",
        "pull_request_review_id": null,
        "id": 13784711,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0NzEx",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Ingot`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// Unwind indicates that this is a terminal `Ingot` or something went",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "d3fa1ce2370b4965d4d4284304e0906a915756f3",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You backtick `Continue`. Can you backtick Unwind as well?\n",
        "created_at": "2014-06-15T06:32:51Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784711",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784711"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784711"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784781",
        "pull_request_review_id": null,
        "id": 13784781,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0Nzgx",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 6,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "b603041ea650388f1c567f3c72b909e58c9047f9",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> down the `Furnace`'s stack.\n\nAs opposed to the `Ingot` stack.\n",
        "created_at": "2014-06-15T07:04:32Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784781",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784781"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784781"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784782",
        "pull_request_review_id": null,
        "id": 13784782,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0Nzgy",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Ingot`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Ingot` stack and start calling `exit` of all previous `Ingots`.",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 18,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "b603041ea650388f1c567f3c72b909e58c9047f9",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Again, `Furnace`'s stack.\n",
        "created_at": "2014-06-15T07:05:20Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784782",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784782"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784782"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784786",
        "pull_request_review_id": null,
        "id": 13784786,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0Nzg2",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Ingot`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Ingot` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows them to be `smelted`",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 25,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "b603041ea650388f1c567f3c72b909e58c9047f9",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> allows **it** to be `smelted`\n\nAnd so on through the sentence.\n",
        "created_at": "2014-06-15T07:05:57Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784786",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784786"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784786"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784789",
        "pull_request_review_id": null,
        "id": 13784789,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0Nzg5",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Ingot`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Ingot` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows them to be `smelted`\n+/// to a `Furnace` so that they will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal\n+/// to the `Ingot` and APIs that the `Ingot` would like to expose to `Ingots`\n+/// further down the stack or terminal controllers.\n+///\n+/// Internal data should be stored on the struct that implements `Ingot`\n+/// itself. All `Ingots` are cloned for each client request, so the object\n+/// initially smelted on to the `Iron` instance will be provided as self to",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 34,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "b603041ea650388f1c567f3c72b909e58c9047f9",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Backtick `self`. Possibly rewrite as `&self`.\n",
        "created_at": "2014-06-15T07:06:43Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784789",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784789"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784789"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784791",
        "pull_request_review_id": null,
        "id": 13784791,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0Nzkx",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Ingot`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Ingot` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows them to be `smelted`\n+/// to a `Furnace` so that they will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal\n+/// to the `Ingot` and APIs that the `Ingot` would like to expose to `Ingots`\n+/// further down the stack or terminal controllers.\n+///\n+/// Internal data should be stored on the struct that implements `Ingot`\n+/// itself. All `Ingots` are cloned for each client request, so the object\n+/// initially smelted on to the `Iron` instance will be provided as self to\n+/// enter for every request. Data stored on `Ingot` instances does NOT persist",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 35,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "b603041ea650388f1c567f3c72b909e58c9047f9",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Instead of capitalizing, us **bold** or _italic_ markdown.\n",
        "created_at": "2014-06-15T07:07:12Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784791",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784791"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784791"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784793",
        "pull_request_review_id": null,
        "id": 13784793,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0Nzkz",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Ingot`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Ingot` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows them to be `smelted`\n+/// to a `Furnace` so that they will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal\n+/// to the `Ingot` and APIs that the `Ingot` would like to expose to `Ingots`\n+/// further down the stack or terminal controllers.\n+///\n+/// Internal data should be stored on the struct that implements `Ingot`\n+/// itself. All `Ingots` are cloned for each client request, so the object\n+/// initially smelted on to the `Iron` instance will be provided as self to\n+/// enter for every request. Data stored on `Ingot` instances does NOT persist\n+/// between requests and is NOT shared between different, concurrent, requests.\n+///\n+/// External data should be stored in the `Alloy` passed to both `enter` and\n+/// `exit`. `Alloy` is a thin wrapper around `AnyMap` and is effectively a\n+/// a key value store from a type to an instance of that type. What this means",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 40,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "b603041ea650388f1c567f3c72b909e58c9047f9",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> This means that...\n\n...instead of...\n\n> What this means is that...\n",
        "created_at": "2014-06-15T07:08:01Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784793",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784793"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784793"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784794",
        "pull_request_review_id": null,
        "id": 13784794,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0Nzk0",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Ingot`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Ingot` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows them to be `smelted`\n+/// to a `Furnace` so that they will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal\n+/// to the `Ingot` and APIs that the `Ingot` would like to expose to `Ingots`\n+/// further down the stack or terminal controllers.\n+///\n+/// Internal data should be stored on the struct that implements `Ingot`\n+/// itself. All `Ingots` are cloned for each client request, so the object\n+/// initially smelted on to the `Iron` instance will be provided as self to\n+/// enter for every request. Data stored on `Ingot` instances does NOT persist\n+/// between requests and is NOT shared between different, concurrent, requests.\n+///\n+/// External data should be stored in the `Alloy` passed to both `enter` and\n+/// `exit`. `Alloy` is a thin wrapper around `AnyMap` and is effectively a\n+/// a key value store from a type to an instance of that type. What this means\n+/// is that each `Ingot` can have a unique type that it stores in the `Alloy`.\n+/// This can either be an instance of that `Ingot` or some other type. Since\n+/// the same `Alloy` is passed to all further `Ingots` in the `Furnace`, this\n+/// scheme allows you to expose data or functionality to future `Ingots`.\n pub trait Ingot<Rq: Request, Rs: Response>: Send + Clone {\n+    /// `enter` is called for each `Ingot` in a `Furnace` as a client request\n+    /// comes down the stack. `Ingots` should expose data through `Alloy` and\n+    /// do any setup here.",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 48,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "b603041ea650388f1c567f3c72b909e58c9047f9",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Instead of \"setup\", can we say \"store any persistent data here\"?\n",
        "created_at": "2014-06-15T07:08:48Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784794",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784794"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784794"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784797",
        "pull_request_review_id": null,
        "id": 13784797,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0Nzk3",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Ingot`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Ingot` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows them to be `smelted`\n+/// to a `Furnace` so that they will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal\n+/// to the `Ingot` and APIs that the `Ingot` would like to expose to `Ingots`\n+/// further down the stack or terminal controllers.\n+///\n+/// Internal data should be stored on the struct that implements `Ingot`\n+/// itself. All `Ingots` are cloned for each client request, so the object\n+/// initially smelted on to the `Iron` instance will be provided as self to\n+/// enter for every request. Data stored on `Ingot` instances does NOT persist\n+/// between requests and is NOT shared between different, concurrent, requests.\n+///\n+/// External data should be stored in the `Alloy` passed to both `enter` and\n+/// `exit`. `Alloy` is a thin wrapper around `AnyMap` and is effectively a\n+/// a key value store from a type to an instance of that type. What this means\n+/// is that each `Ingot` can have a unique type that it stores in the `Alloy`.\n+/// This can either be an instance of that `Ingot` or some other type. Since\n+/// the same `Alloy` is passed to all further `Ingots` in the `Furnace`, this\n+/// scheme allows you to expose data or functionality to future `Ingots`.\n pub trait Ingot<Rq: Request, Rs: Response>: Send + Clone {\n+    /// `enter` is called for each `Ingot` in a `Furnace` as a client request\n+    /// comes down the stack. `Ingots` should expose data through `Alloy` and\n+    /// do any setup here.\n+    ///\n+    /// returning `Unwind` from this handler will cause the `Furnace` to stop\n+    /// going down the `Ingot` stack and start bubbling back up and calling\n+    /// `exit`.\n     fn enter(&mut self, _request: &mut Rq, _response: &mut Rs, _alloy: &mut Alloy) -> Status {\n         Continue\n     }\n+\n+    /// `exit` is called for each `Ingot` in `Furnace` that has had it's `enter`\n+    /// method called for this request. If an `Ingot` higher than this one\n+    /// returned `Unwind` and the `enter` method of this `Ingot` was never\n+    /// called, then neither will `exit`. Later `Ingots` will have their `exit`",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 60,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "b603041ea650388f1c567f3c72b909e58c9047f9",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "**neither** will exit?\n\nWon't the `Ingot` returning `Unwind` exit? This seems false.\n",
        "created_at": "2014-06-15T07:09:46Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784797",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784797"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784797"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784803",
        "pull_request_review_id": null,
        "id": 13784803,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0ODAz",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Ingot`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Ingot` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows them to be `smelted`\n+/// to a `Furnace` so that they will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal\n+/// to the `Ingot` and APIs that the `Ingot` would like to expose to `Ingots`\n+/// further down the stack or terminal controllers.\n+///\n+/// Internal data should be stored on the struct that implements `Ingot`\n+/// itself. All `Ingots` are cloned for each client request, so the object\n+/// initially smelted on to the `Iron` instance will be provided as self to\n+/// enter for every request. Data stored on `Ingot` instances does NOT persist\n+/// between requests and is NOT shared between different, concurrent, requests.\n+///\n+/// External data should be stored in the `Alloy` passed to both `enter` and\n+/// `exit`. `Alloy` is a thin wrapper around `AnyMap` and is effectively a\n+/// a key value store from a type to an instance of that type. What this means\n+/// is that each `Ingot` can have a unique type that it stores in the `Alloy`.\n+/// This can either be an instance of that `Ingot` or some other type. Since\n+/// the same `Alloy` is passed to all further `Ingots` in the `Furnace`, this\n+/// scheme allows you to expose data or functionality to future `Ingots`.\n pub trait Ingot<Rq: Request, Rs: Response>: Send + Clone {\n+    /// `enter` is called for each `Ingot` in a `Furnace` as a client request\n+    /// comes down the stack. `Ingots` should expose data through `Alloy` and\n+    /// do any setup here.\n+    ///\n+    /// returning `Unwind` from this handler will cause the `Furnace` to stop\n+    /// going down the `Ingot` stack and start bubbling back up and calling\n+    /// `exit`.\n     fn enter(&mut self, _request: &mut Rq, _response: &mut Rs, _alloy: &mut Alloy) -> Status {\n         Continue\n     }\n+\n+    /// `exit` is called for each `Ingot` in `Furnace` that has had it's `enter`\n+    /// method called for this request. If an `Ingot` higher than this one\n+    /// returned `Unwind` and the `enter` method of this `Ingot` was never\n+    /// called, then neither will `exit`. Later `Ingots` will have their `exit`",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 60,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "b603041ea650388f1c567f3c72b909e58c9047f9",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> Later `Ingots` will have their `exit` methods called first\n\ncan be more explicit by mentioning the data structure, something like:\n\n> `Ingots` will have exit called as the stack is unwound, in a FILO order. `Ingots` have their `exit` methods called in the opposite order from which their `enter` was called.\n",
        "created_at": "2014-06-15T07:12:02Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784803",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784803"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784803"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784808",
        "pull_request_review_id": null,
        "id": 13784808,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0ODA4",
        "diff_hunk": "@@ -2,17 +2,70 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Ingot` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Ingot`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Ingot` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows them to be `smelted`\n+/// to a `Furnace` so that they will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal\n+/// to the `Ingot` and APIs that the `Ingot` would like to expose to `Ingots`\n+/// further down the stack or terminal controllers.\n+///\n+/// Internal data should be stored on the struct that implements `Ingot`\n+/// itself. All `Ingots` are cloned for each client request, so the object\n+/// initially smelted on to the `Iron` instance will be provided as self to\n+/// enter for every request. Data stored on `Ingot` instances does NOT persist\n+/// between requests and is NOT shared between different, concurrent, requests.\n+///\n+/// External data should be stored in the `Alloy` passed to both `enter` and\n+/// `exit`. `Alloy` is a thin wrapper around `AnyMap` and is effectively a\n+/// a key value store from a type to an instance of that type. What this means\n+/// is that each `Ingot` can have a unique type that it stores in the `Alloy`.\n+/// This can either be an instance of that `Ingot` or some other type. Since\n+/// the same `Alloy` is passed to all further `Ingots` in the `Furnace`, this\n+/// scheme allows you to expose data or functionality to future `Ingots`.\n pub trait Ingot<Rq: Request, Rs: Response>: Send + Clone {\n+    /// `enter` is called for each `Ingot` in a `Furnace` as a client request\n+    /// comes down the stack. `Ingots` should expose data through `Alloy` and\n+    /// do any setup here.\n+    ///\n+    /// returning `Unwind` from this handler will cause the `Furnace` to stop\n+    /// going down the `Ingot` stack and start bubbling back up and calling\n+    /// `exit`.\n     fn enter(&mut self, _request: &mut Rq, _response: &mut Rs, _alloy: &mut Alloy) -> Status {\n         Continue\n     }\n+\n+    /// `exit` is called for each `Ingot` in `Furnace` that has had it's `enter`\n+    /// method called for this request. If an `Ingot` higher than this one\n+    /// returned `Unwind` and the `enter` method of this `Ingot` was never\n+    /// called, then neither will `exit`. Later `Ingots` will have their `exit`",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 60,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "b603041ea650388f1c567f3c72b909e58c9047f9",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If an Ingot _higher_ than this one returns Unwind. (higher is > not >=) \n",
        "created_at": "2014-06-15T07:16:12Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784808",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784808"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784808"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784885",
        "pull_request_review_id": null,
        "id": 13784885,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0ODg1",
        "diff_hunk": "@@ -2,17 +2,71 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Furnace's` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Furnace's`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.",
        "path": "src/ingot/mod.rs",
        "position": 16,
        "original_position": 13,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "daf5cd7fa88ef3bee29581756eb9a1eafc7d9f18",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should mention that most `Furnaces` will ignore `Continue` from `exit`.\n",
        "created_at": "2014-06-15T07:35:01Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784885",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784885"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784885"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784887",
        "pull_request_review_id": null,
        "id": 13784887,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0ODg3",
        "diff_hunk": "@@ -2,17 +2,71 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Furnace's` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Furnace's`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Furnace's` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the",
        "path": "src/ingot/mod.rs",
        "position": 23,
        "original_position": 20,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "daf5cd7fa88ef3bee29581756eb9a1eafc7d9f18",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":) oAuth!\n",
        "created_at": "2014-06-15T07:35:25Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784887",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784887"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784887"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784889",
        "pull_request_review_id": null,
        "id": 13784889,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0ODg5",
        "diff_hunk": "@@ -2,17 +2,71 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Furnace's` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Furnace's`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Furnace's` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows it to be `smelted`\n+/// to a `Furnace` so that it will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal",
        "path": "src/ingot/mod.rs",
        "position": null,
        "original_position": 28,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "daf5cd7fa88ef3bee29581756eb9a1eafc7d9f18",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"that is\" is unnecessary. Just \"data internal to...\".\n",
        "created_at": "2014-06-15T07:35:56Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784889",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784889"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784889"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784901",
        "pull_request_review_id": null,
        "id": 13784901,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0OTAx",
        "diff_hunk": "@@ -2,17 +2,71 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Furnace's` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Furnace's`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Furnace's` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows it to be `smelted`\n+/// to a `Furnace` so that it will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal\n+/// to the `Ingot` and APIs that the `Ingot` would like to expose to `Ingots`\n+/// further down the stack or terminal controllers.\n+///\n+/// Internal data should be stored on the `struct` that implements `Ingot`\n+/// itself. All `Ingots` are cloned for each client request, so the object\n+/// initially smelted on to the `Iron` instance will be provided as `&self` to\n+/// enter for every request. Data stored on `Ingot` instances does _not_ persist\n+/// between requests and is _not_ shared between different, concurrent, requests.\n+/// The same is true for data stored on `Alloys`.\n+///\n+/// External data should be stored in the `Alloy` passed to both `enter` and\n+/// `exit`. `Alloy` is a thin wrapper around `AnyMap` and is effectively a\n+/// a key value store from a type to an instance of that type. This means\n+/// that each `Ingot` can have a unique type that it stores in the `Alloy`.\n+/// This can either be an instance of that `Ingot` or some other type. Since",
        "path": "src/ingot/mod.rs",
        "position": 46,
        "original_position": 43,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "daf5cd7fa88ef3bee29581756eb9a1eafc7d9f18",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we want to publicize that any type can be stored in `Alloy`, or do we want to mislead consumers to only storing an instance of their own `Ingot`?\n\nThis could muss up the `Alloy` and cause collisions (edge case), but it could also provide extensibility for `Ingot` storage. Either way is fine with me.\n",
        "created_at": "2014-06-15T07:38:21Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784901",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784901"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784901"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784909",
        "pull_request_review_id": null,
        "id": 13784909,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0OTA5",
        "diff_hunk": "@@ -2,17 +2,71 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Furnace's` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Furnace's`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Furnace's` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows it to be `smelted`\n+/// to a `Furnace` so that it will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal\n+/// to the `Ingot` and APIs that the `Ingot` would like to expose to `Ingots`\n+/// further down the stack or terminal controllers.\n+///\n+/// Internal data should be stored on the `struct` that implements `Ingot`\n+/// itself. All `Ingots` are cloned for each client request, so the object\n+/// initially smelted on to the `Iron` instance will be provided as `&self` to\n+/// enter for every request. Data stored on `Ingot` instances does _not_ persist\n+/// between requests and is _not_ shared between different, concurrent, requests.\n+/// The same is true for data stored on `Alloys`.\n+///\n+/// External data should be stored in the `Alloy` passed to both `enter` and\n+/// `exit`. `Alloy` is a thin wrapper around `AnyMap` and is effectively a\n+/// a key value store from a type to an instance of that type. This means\n+/// that each `Ingot` can have a unique type that it stores in the `Alloy`.\n+/// This can either be an instance of that `Ingot` or some other type. Since",
        "path": "src/ingot/mod.rs",
        "position": 46,
        "original_position": 43,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "daf5cd7fa88ef3bee29581756eb9a1eafc7d9f18",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should allow any type. BodyParser, for instance, may want to store a `Parsed` struct as opposed to an instance of `BodyParser`, which I view to be a legitimate use case. If you store `uint` and it screws things up that's your own fault.\n",
        "created_at": "2014-06-15T07:39:50Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784909",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784909"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784909"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13784911",
        "pull_request_review_id": null,
        "id": 13784911,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzg0OTEx",
        "diff_hunk": "@@ -2,17 +2,71 @@ use super::response::Response;\n use super::request::Request;\n use super::alloy::Alloy;\n \n+/// The Status returned by `Ingot's` `enter` and `exit` methods. This indicates\n+/// to the `Furnace` whether this is a terminal `Ingot` or whether to continue\n+/// passing the `Request` and `Response` down the `Furnace's` stack.\n pub enum Status {\n-    Continue, Unwind\n+    /// `Continue` indicates that this is an intermediate `Ingot` in the stack\n+    /// and the `Furnace` should continue passing requests down the `Furnace's`\n+    /// stack.\n+    ///\n+    /// Most `Ingots` will return `Continue` from both `enter` and `exit`.\n+    Continue,\n+\n+    /// `Unwind` indicates that this is a terminal `Ingot` or something went\n+    /// wrong. It can be used to immediately stop passing requests down the\n+    /// `Furnace's` stack and start calling `exit` of all previous `Ingots`.\n+    ///\n+    /// For instance, an authorization `Ingot` might return `Unwind` if the\n+    /// request fails an authentication check, and `Continue` otherwise.\n+    Unwind\n }\n \n+/// All middleware should implement `Ingot`, which allows it to be `smelted`\n+/// to a `Furnace` so that it will be called for each incoming request.\n+///\n+/// There are two sorts of data associated with `Ingots`, data that is internal\n+/// to the `Ingot` and APIs that the `Ingot` would like to expose to `Ingots`\n+/// further down the stack or terminal controllers.\n+///\n+/// Internal data should be stored on the `struct` that implements `Ingot`\n+/// itself. All `Ingots` are cloned for each client request, so the object\n+/// initially smelted on to the `Iron` instance will be provided as `&self` to\n+/// enter for every request. Data stored on `Ingot` instances does _not_ persist\n+/// between requests and is _not_ shared between different, concurrent, requests.\n+/// The same is true for data stored on `Alloys`.\n+///\n+/// External data should be stored in the `Alloy` passed to both `enter` and\n+/// `exit`. `Alloy` is a thin wrapper around `AnyMap` and is effectively a\n+/// a key value store from a type to an instance of that type. This means\n+/// that each `Ingot` can have a unique type that it stores in the `Alloy`.\n+/// This can either be an instance of that `Ingot` or some other type. Since\n+/// the same `Alloy` is passed to all further `Ingots` in the `Furnace`, this\n+/// scheme allows you to expose data or functionality to future `Ingots`.\n pub trait Ingot<Rq: Request, Rs: Response>: Send + Clone {\n+    /// `enter` is called for each `Ingot` in a `Furnace` as a client request\n+    /// comes down the stack. `Ingots` should expose data through `Alloy` and\n+    /// store any data that will persist through the request here.\n+    ///\n+    /// returning `Unwind` from this handler will cause the `Furnace` to stop\n+    /// going down the `Furnace's` stack and start bubbling back up and calling\n+    /// `exit`.\n     fn enter(&mut self, _request: &mut Rq, _response: &mut Rs, _alloy: &mut Alloy) -> Status {\n         Continue\n     }\n+\n+    /// `exit` is called for each `Ingot` in `Furnace` that has had it's `enter`\n+    /// method called for this request. `Ingot's``exit` method will be called\n+    /// as the stack is unwound in FILO order. `Ingots` have their `exit`",
        "path": "src/ingot/mod.rs",
        "position": 63,
        "original_position": 60,
        "commit_id": "4cb68b76b83ef511e282dcff916d2e922287d3b3",
        "original_commit_id": "daf5cd7fa88ef3bee29581756eb9a1eafc7d9f18",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "FILO and LIFO are different ways of saying the same thing. Rephrase?\n",
        "created_at": "2014-06-15T07:39:54Z",
        "updated_at": "2014-06-15T07:41:57Z",
        "html_url": "https://github.com/iron/iron/pull/28#discussion_r13784911",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/28",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13784911"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/28#discussion_r13784911"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13797958",
        "pull_request_review_id": null,
        "id": 13797958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzk3OTU4",
        "diff_hunk": "@@ -42,3 +35,16 @@ impl<'a, 'b> Response for IronResponse<'a, 'b> {\n     fn status<'a>(&'a self) -> &'a Status { &self.writer.status }\n }\n \n+impl <'a, 'b> HttpResponse<'a, 'b> for IronResponse<'a, 'b> {\n+    #[inline]\n+    fn from_http(writer: &mut ResponseWriter) -> IronResponse<'a, 'b> {\n+        unsafe {\n+            mem::transmute(\n+                IronResponse {\n+                    writer: writer\n+                }\n+            )\n+        }",
        "path": "src/response/ironresponse.rs",
        "position": 40,
        "original_position": 40,
        "commit_id": "cdf420d41bee7ca04648d71759bd15c7d3803580",
        "original_commit_id": "cdf420d41bee7ca04648d71759bd15c7d3803580",
        "user": {
            "login": "Ogeon",
            "id": 225229,
            "node_id": "MDQ6VXNlcjIyNTIyOQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/225229?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Ogeon",
            "html_url": "https://github.com/Ogeon",
            "followers_url": "https://api.github.com/users/Ogeon/followers",
            "following_url": "https://api.github.com/users/Ogeon/following{/other_user}",
            "gists_url": "https://api.github.com/users/Ogeon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Ogeon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Ogeon/subscriptions",
            "organizations_url": "https://api.github.com/users/Ogeon/orgs",
            "repos_url": "https://api.github.com/users/Ogeon/repos",
            "events_url": "https://api.github.com/users/Ogeon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Ogeon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why are you transmuting this to what it already is? This is a bit risky and it could be avoided by defining the trait as\n\n``` Rust\npub trait HttpResponse<'a, 'b> {\n    fn from_http(&'a mut ResponseWriter<'b>) -> Self;\n}\n```\n",
        "created_at": "2014-06-16T09:55:11Z",
        "updated_at": "2014-06-16T09:55:11Z",
        "html_url": "https://github.com/iron/iron/pull/30#discussion_r13797958",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/30",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13797958"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/30#discussion_r13797958"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/30"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13817568",
        "pull_request_review_id": null,
        "id": 13817568,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODE3NTY4",
        "diff_hunk": "@@ -42,3 +35,16 @@ impl<'a, 'b> Response for IronResponse<'a, 'b> {\n     fn status<'a>(&'a self) -> &'a Status { &self.writer.status }\n }\n \n+impl <'a, 'b> HttpResponse<'a, 'b> for IronResponse<'a, 'b> {\n+    #[inline]\n+    fn from_http(writer: &mut ResponseWriter) -> IronResponse<'a, 'b> {\n+        unsafe {\n+            mem::transmute(\n+                IronResponse {\n+                    writer: writer\n+                }\n+            )\n+        }",
        "path": "src/response/ironresponse.rs",
        "position": 40,
        "original_position": 40,
        "commit_id": "cdf420d41bee7ca04648d71759bd15c7d3803580",
        "original_commit_id": "cdf420d41bee7ca04648d71759bd15c7d3803580",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This was my original approach (you can see the remains on my great-response-crisis branch of my fork, if you're curious) but that doesn't work for the reasons @zzmp discussed with you on #iron last night.\n",
        "created_at": "2014-06-16T17:12:32Z",
        "updated_at": "2014-06-16T17:12:32Z",
        "html_url": "https://github.com/iron/iron/pull/30#discussion_r13817568",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/30",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13817568"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/30#discussion_r13817568"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/30"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13843574",
        "pull_request_review_id": null,
        "id": 13843574,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODQzNTc0",
        "diff_hunk": "@@ -1,3 +1,5 @@\n+//! Exposes the `Ingot` trait which must be implemented by\n+//! all middleware.",
        "path": "src/ingot/mod.rs",
        "position": 2,
        "original_position": 2,
        "commit_id": "fe202a53ddec311fea30f34627c623941e58aa69",
        "original_commit_id": "95fe24257dbc80ca16d14c7ad818494e0e65ff1a",
        "user": {
            "login": "theptrk",
            "id": 5618025,
            "node_id": "MDQ6VXNlcjU2MTgwMjU=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/5618025?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theptrk",
            "html_url": "https://github.com/theptrk",
            "followers_url": "https://api.github.com/users/theptrk/followers",
            "following_url": "https://api.github.com/users/theptrk/following{/other_user}",
            "gists_url": "https://api.github.com/users/theptrk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/theptrk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theptrk/subscriptions",
            "organizations_url": "https://api.github.com/users/theptrk/orgs",
            "repos_url": "https://api.github.com/users/theptrk/repos",
            "events_url": "https://api.github.com/users/theptrk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/theptrk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "consistency lost\n",
        "created_at": "2014-06-17T05:29:30Z",
        "updated_at": "2014-06-17T05:31:00Z",
        "html_url": "https://github.com/iron/iron/pull/37#discussion_r13843574",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/37",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13843574"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/37#discussion_r13843574"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/37"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13843579",
        "pull_request_review_id": null,
        "id": 13843579,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODQzNTc5",
        "diff_hunk": "@@ -1,3 +1,4 @@\n+//! Exposes the `Furnace` trait and `IronFurnace` type.",
        "path": "src/furnace/mod.rs",
        "position": 1,
        "original_position": 1,
        "commit_id": "fe202a53ddec311fea30f34627c623941e58aa69",
        "original_commit_id": "95fe24257dbc80ca16d14c7ad818494e0e65ff1a",
        "user": {
            "login": "theptrk",
            "id": 5618025,
            "node_id": "MDQ6VXNlcjU2MTgwMjU=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/5618025?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theptrk",
            "html_url": "https://github.com/theptrk",
            "followers_url": "https://api.github.com/users/theptrk/followers",
            "following_url": "https://api.github.com/users/theptrk/following{/other_user}",
            "gists_url": "https://api.github.com/users/theptrk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/theptrk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theptrk/subscriptions",
            "organizations_url": "https://api.github.com/users/theptrk/orgs",
            "repos_url": "https://api.github.com/users/theptrk/repos",
            "events_url": "https://api.github.com/users/theptrk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/theptrk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Add a space please\n",
        "created_at": "2014-06-17T05:29:41Z",
        "updated_at": "2014-06-17T05:31:00Z",
        "html_url": "https://github.com/iron/iron/pull/37#discussion_r13843579",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/37",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13843579"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/37#discussion_r13843579"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/37"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13885057",
        "pull_request_review_id": null,
        "id": 13885057,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODg1MDU3",
        "diff_hunk": "@@ -50,7 +50,9 @@ impl<Rq, Rs, F: Clone> Clone for Iron<Rq, Rs, F> {\n     }\n }\n \n-impl<'a, 'b, Rq: Request, Rs: Response + HttpResponse<'a, 'b>, F: Furnace<Rq, Rs>>\n+impl<'a, 'b,\n+     Rq: Request + HttpRequest,\n+     Rs: Response + HttpResponse<'a, 'b>, F: Furnace<Rq, Rs>>",
        "path": "src/iron/mod.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "36bc2142041fcc6780e3293e71f450dbf7331c3a",
        "original_commit_id": "82d582626e37f1897a2c2c176dad38627eeac9d6",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Put furnace on a separate line, as you do for the `impl Server` below.\n",
        "created_at": "2014-06-17T21:05:04Z",
        "updated_at": "2014-06-17T21:06:30Z",
        "html_url": "https://github.com/iron/iron/pull/41#discussion_r13885057",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/41",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13885057"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/41#discussion_r13885057"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13885092",
        "pull_request_review_id": null,
        "id": 13885092,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzODg1MDky",
        "diff_hunk": "@@ -138,11 +140,11 @@ impl<'a, 'b,\n }\n \n fn handler<'a, 'b,\n-            Rq: Request,\n+            Rq: Request + HttpRequest,\n             Rs: Response + HttpResponse<'a, 'b>,\n             F: Furnace<Rq, Rs>>\n         (furnace: &mut F, req: &server::Request, res: &mut server::ResponseWriter) {\n-    let mut request: Rq = Request::from_http(req);\n+    let mut request: Rq = HttpRequest::from_http(req);",
        "path": "src/iron/mod.rs",
        "position": 40,
        "original_position": 39,
        "commit_id": "36bc2142041fcc6780e3293e71f450dbf7331c3a",
        "original_commit_id": "82d582626e37f1897a2c2c176dad38627eeac9d6",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Much cleaner!\n",
        "created_at": "2014-06-17T21:05:43Z",
        "updated_at": "2014-06-17T21:06:30Z",
        "html_url": "https://github.com/iron/iron/pull/41#discussion_r13885092",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/41",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13885092"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/41#discussion_r13885092"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13932999",
        "pull_request_review_id": null,
        "id": 13932999,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTMyOTk5",
        "diff_hunk": "@@ -16,7 +16,7 @@ extern crate http;\n extern crate anymap;\n \n pub use request::Request;\n-pub use response::Response;\n+pub use response::{Response, SendFile};",
        "path": "src/lib.rs",
        "position": null,
        "original_position": 5,
        "commit_id": "64301c1d114bca0f97616695dba50b75f8a46a77",
        "original_commit_id": "8cb073215c65427cbb23c15b47d3f1d39704f940",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This exposes the trait through `iron::SendFile`, which may or not be desirable.\n\nThe trait must be `use`d in order for its `fn` to be called, but it can be exposed through either `iron::SendFile` or `iron::response::SendFile`. If we go with the latter (without this change), it will be the only thing remaining in `iron::response`.\n\nThoughts?\n",
        "created_at": "2014-06-18T18:48:02Z",
        "updated_at": "2014-06-18T19:38:26Z",
        "html_url": "https://github.com/iron/iron/pull/49#discussion_r13932999",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13932999"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/49#discussion_r13932999"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13935728",
        "pull_request_review_id": null,
        "id": 13935728,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTM1NzI4",
        "diff_hunk": "@@ -1,3 +1,28 @@\n-//! An alias of the rust-http Response struct.\n+//! An augmentation of the rust-http Response struct.\n+\n+use std::io::{IoResult, File};\n+use std::io::util::copy;\n \n pub use Response = http::server::response::ResponseWriter;\n+\n+/// Allow file-serving\n+pub trait ServeFile: Writer {\n+    /// Serve the file located at `path`.\n+    ///\n+    /// This is usually a terminal process, and `Middleware` may want to\n+    /// call `Unwind` after a file is served. If the status should be\n+    /// anything other than `200`, the `Middleware` must set it, including in\n+    /// the case of an `Err`.\n+    ///\n+    /// `serve_file` will err out if the file does not exist, the process\n+    /// does not have correct permissions, or it has other issues in reading\n+    /// from the file. Middleware should handle this gracefully.",
        "path": "src/response.rs",
        "position": 20,
        "original_position": 20,
        "commit_id": "64301c1d114bca0f97616695dba50b75f8a46a77",
        "original_commit_id": "64301c1d114bca0f97616695dba50b75f8a46a77",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "FYI: Middleware is used generally here, and so should not have backticks. This was intentional.\n",
        "created_at": "2014-06-18T19:39:08Z",
        "updated_at": "2014-06-18T19:57:05Z",
        "html_url": "https://github.com/iron/iron/pull/49#discussion_r13935728",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13935728"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/49#discussion_r13935728"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13995909",
        "pull_request_review_id": null,
        "id": 13995909,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTk1OTA5",
        "diff_hunk": "@@ -3,14 +3,16 @@\n use std::io::{IoResult, File};\n use std::io::util::copy;\n \n+use http::status::Status;\n+\n pub use Response = http::server::response::ResponseWriter;\n \n use self::mimes::get_content_type;\n \n mod mimes;\n \n-/// Allow file-serving\n-pub trait ServeFile: Writer {\n+/// Adds many common serving methods as a mixin for Response.",
        "path": "src/response/mod.rs",
        "position": null,
        "original_position": 14,
        "commit_id": "378693df8c315a6633c6c4f6ed5176f612f1943c",
        "original_commit_id": "7204e2df96394f3c07f2ae92f978a8e961d7b878",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "... <s>many</s> ... <s>as a mixin for</s> to `Response`.\n",
        "created_at": "2014-06-19T21:43:52Z",
        "updated_at": "2014-06-19T23:03:07Z",
        "html_url": "https://github.com/iron/iron/pull/53#discussion_r13995909",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/53",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13995909"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/53#discussion_r13995909"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13995995",
        "pull_request_review_id": null,
        "id": 13995995,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTk1OTk1",
        "diff_hunk": "@@ -22,12 +24,24 @@ pub trait ServeFile: Writer {\n     /// does not have correct permissions, or it has other issues in reading\n     /// from the file. Middleware should handle this gracefully.\n     fn serve_file(&mut self, &Path) -> IoResult<()>;\n+\n+    /// Write the statuscode and data to the response.",
        "path": "src/response/mod.rs",
        "position": null,
        "original_position": 24,
        "commit_id": "378693df8c315a6633c6c4f6ed5176f612f1943c",
        "original_commit_id": "7204e2df96394f3c07f2ae92f978a8e961d7b878",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "use \"client response\" or `Response`.\n",
        "created_at": "2014-06-19T21:45:35Z",
        "updated_at": "2014-06-19T23:03:07Z",
        "html_url": "https://github.com/iron/iron/pull/53#discussion_r13995995",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/53",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13995995"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/53#discussion_r13995995"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13996042",
        "pull_request_review_id": null,
        "id": 13996042,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTk2MDQy",
        "diff_hunk": "@@ -22,12 +24,24 @@ pub trait ServeFile: Writer {\n     /// does not have correct permissions, or it has other issues in reading\n     /// from the file. Middleware should handle this gracefully.\n     fn serve_file(&mut self, &Path) -> IoResult<()>;\n+\n+    /// Write the statuscode and data to the response.\n+    ///\n+    /// send will forward write errors to the request to its",
        "path": "src/response/mod.rs",
        "position": null,
        "original_position": 26,
        "commit_id": "378693df8c315a6633c6c4f6ed5176f612f1943c",
        "original_commit_id": "7204e2df96394f3c07f2ae92f978a8e961d7b878",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "<s>send will</s>Forward write errors ...\n\nYou don't need to repeat the function names (trait names, etc.). `rustdoc` does it for us.\n",
        "created_at": "2014-06-19T21:46:20Z",
        "updated_at": "2014-06-19T23:03:07Z",
        "html_url": "https://github.com/iron/iron/pull/53#discussion_r13996042",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/53",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13996042"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/53#discussion_r13996042"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13996140",
        "pull_request_review_id": null,
        "id": 13996140,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTk2MTQw",
        "diff_hunk": "@@ -3,14 +3,16 @@\n use std::io::{IoResult, File};\n use std::io::util::copy;\n \n+use http::status::Status;\n+\n pub use Response = http::server::response::ResponseWriter;\n \n use self::mimes::get_content_type;\n \n mod mimes;\n \n-/// Allow file-serving\n-pub trait ServeFile: Writer {\n+/// Adds many common serving methods as a mixin for Response.",
        "path": "src/response/mod.rs",
        "position": null,
        "original_position": 14,
        "commit_id": "378693df8c315a6633c6c4f6ed5176f612f1943c",
        "original_commit_id": "7204e2df96394f3c07f2ae92f978a8e961d7b878",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fixed.\n",
        "created_at": "2014-06-19T21:48:01Z",
        "updated_at": "2014-06-19T23:03:07Z",
        "html_url": "https://github.com/iron/iron/pull/53#discussion_r13996140",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/53",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13996140"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/53#discussion_r13996140"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/13996790",
        "pull_request_review_id": null,
        "id": 13996790,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTk2Nzkw",
        "diff_hunk": "@@ -22,12 +24,23 @@ pub trait ServeFile: Writer {\n     /// does not have correct permissions, or it has other issues in reading\n     /// from the file. Middleware should handle this gracefully.\n     fn serve_file(&mut self, &Path) -> IoResult<()>;\n+\n+    /// Write the `Status` and data to the `Response`.\n+    ///\n+    /// `send` will forward write errors to its caller.",
        "path": "src/response/mod.rs",
        "position": null,
        "original_position": 26,
        "commit_id": "378693df8c315a6633c6c4f6ed5176f612f1943c",
        "original_commit_id": "94f816d90ed1741fb0b462fafa9ed02a7cbb6468",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is still off. `send` does not exist - `serve`.\n",
        "created_at": "2014-06-19T22:01:00Z",
        "updated_at": "2014-06-19T23:03:07Z",
        "html_url": "https://github.com/iron/iron/pull/53#discussion_r13996790",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/53",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/13996790"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/53#discussion_r13996790"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/14044040",
        "pull_request_review_id": null,
        "id": 14044040,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDQ0MDQw",
        "diff_hunk": "@@ -88,3 +88,13 @@ pub trait Middleware: Send + Clone {\n impl Clone for Box<Middleware + Send> {\n     fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n }\n+\n+impl Middleware for fn(&mut Request, &mut Response, &mut Alloy) -> Status {",
        "path": "src/middleware/mod.rs",
        "position": 5,
        "original_position": 5,
        "commit_id": "b8904812a59c2fa0243a0107d0736b7c5ee9b1bf",
        "original_commit_id": "51486f047e5714ae88dec0ea2f2ea9070717dce4",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "So nifty, :+1: \n",
        "created_at": "2014-06-20T22:26:46Z",
        "updated_at": "2014-06-21T01:32:57Z",
        "html_url": "https://github.com/iron/iron/pull/60#discussion_r14044040",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/60",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/14044040"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/60#discussion_r14044040"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/60"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/14053066",
        "pull_request_review_id": null,
        "id": 14053066,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDUzMDY2",
        "diff_hunk": "@@ -0,0 +1,75 @@\n+//! Exposes the `chain` trait and `StackChain` type.\n+\n+use super::response::Response;\n+use super::request::Request;\n+use super::alloy::Alloy;\n+use super::middleware::{Middleware, Status, Continue};\n+\n+/// The default `chain` used by `Iron`.",
        "path": "src/chain/mod.rs",
        "position": 8,
        "original_position": 8,
        "commit_id": "95223c82d072c941fdc735ad8807a5c86eecf217",
        "original_commit_id": "f0153dfd67771a3d00eafc33693da97c7f20b209",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Chain should be captilized if it's in `backticks`\n",
        "created_at": "2014-06-22T05:30:13Z",
        "updated_at": "2014-06-22T05:34:17Z",
        "html_url": "https://github.com/iron/iron/pull/62#discussion_r14053066",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/62",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/14053066"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/62#discussion_r14053066"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/62"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/14053067",
        "pull_request_review_id": null,
        "id": 14053067,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDUzMDY3",
        "diff_hunk": "@@ -0,0 +1,78 @@\n+use super::super::request::Request;\n+use super::super::response::Response;\n+use super::super::middleware::{Middleware, Continue, Unwind, Status};\n+use super::super::alloy::Alloy;\n+\n+use super::Chain;\n+\n+/// The default `Chain` used by `Iron`.\n+/// `StackChain` runs each `Request` through all `Middleware` in its stack.\n+/// When it hits `Middleware` which returns `Unwind`, it passes\n+/// the `Request` back up through all `Middleware` it has hit so far.\n+pub struct StackChain {\n+    /// The storage used by `StackChain` to hold all `Middleware`\n+    /// that have been `linked` to it.\n+    stack: Vec<Box<Middleware + Send>>,\n+    exit_stack: Vec<Box<Middleware + Send>>\n+}\n+\n+impl Clone for StackChain {\n+    fn clone(&self) -> StackChain {\n+        StackChain {\n+            stack: self.stack.clone(),\n+            exit_stack: self.exit_stack.clone()\n+        }\n+    }\n+}\n+\n+/// `StackChain` is a `Chain`\n+impl Chain for StackChain {\n+    fn chain_enter(&mut self,\n+             request: &mut Request,\n+             response: &mut Response,\n+             alloy: &mut Alloy) -> Status {\n+        // The `exit_stack` will hold all `Middleware` that are passed through\n+        // in the enter loop. This is so we know to take exactly the same\n+        // path through `Middleware` in reverse order than we did on the way in.\n+        self.exit_stack = vec![];\n+\n+        'enter: for middleware in self.stack.mut_iter() {\n+            match middleware.enter(request, response, alloy) {\n+                Unwind   => return Unwind,\n+                // Mark the middleware for traversal on exit.\n+                Continue => self.exit_stack.push(middleware.clone_box())",
        "path": "src/chain/stackchain.rs",
        "position": 43,
        "original_position": 43,
        "commit_id": "95223c82d072c941fdc735ad8807a5c86eecf217",
        "original_commit_id": "f0153dfd67771a3d00eafc33693da97c7f20b209",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why isn't this just a queue?\n",
        "created_at": "2014-06-22T05:33:35Z",
        "updated_at": "2014-06-22T05:34:17Z",
        "html_url": "https://github.com/iron/iron/pull/62#discussion_r14053067",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/62",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/14053067"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/62#discussion_r14053067"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/62"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/14053071",
        "pull_request_review_id": null,
        "id": 14053071,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDUzMDcx",
        "diff_hunk": "@@ -0,0 +1,78 @@\n+use super::super::request::Request;\n+use super::super::response::Response;\n+use super::super::middleware::{Middleware, Continue, Unwind, Status};\n+use super::super::alloy::Alloy;\n+\n+use super::Chain;\n+\n+/// The default `Chain` used by `Iron`.\n+/// `StackChain` runs each `Request` through all `Middleware` in its stack.\n+/// When it hits `Middleware` which returns `Unwind`, it passes\n+/// the `Request` back up through all `Middleware` it has hit so far.\n+pub struct StackChain {\n+    /// The storage used by `StackChain` to hold all `Middleware`\n+    /// that have been `linked` to it.\n+    stack: Vec<Box<Middleware + Send>>,\n+    exit_stack: Vec<Box<Middleware + Send>>\n+}\n+\n+impl Clone for StackChain {\n+    fn clone(&self) -> StackChain {\n+        StackChain {\n+            stack: self.stack.clone(),\n+            exit_stack: self.exit_stack.clone()\n+        }\n+    }\n+}\n+\n+/// `StackChain` is a `Chain`\n+impl Chain for StackChain {\n+    fn chain_enter(&mut self,\n+             request: &mut Request,\n+             response: &mut Response,\n+             alloy: &mut Alloy) -> Status {\n+        // The `exit_stack` will hold all `Middleware` that are passed through\n+        // in the enter loop. This is so we know to take exactly the same\n+        // path through `Middleware` in reverse order than we did on the way in.\n+        self.exit_stack = vec![];\n+\n+        'enter: for middleware in self.stack.mut_iter() {\n+            match middleware.enter(request, response, alloy) {\n+                Unwind   => return Unwind,\n+                // Mark the middleware for traversal on exit.\n+                Continue => self.exit_stack.push(middleware.clone_box())",
        "path": "src/chain/stackchain.rs",
        "position": 43,
        "original_position": 43,
        "commit_id": "95223c82d072c941fdc735ad8807a5c86eecf217",
        "original_commit_id": "f0153dfd67771a3d00eafc33693da97c7f20b209",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hmm.. I don't see an appropriate queue in std (or other crates). I suppose this works.\n\n@reem Can you at least speak to this to confirm?\n",
        "created_at": "2014-06-22T05:35:36Z",
        "updated_at": "2014-06-22T05:35:36Z",
        "html_url": "https://github.com/iron/iron/pull/62#discussion_r14053071",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/62",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/14053071"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/62#discussion_r14053071"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/62"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/14505024",
        "pull_request_review_id": null,
        "id": 14505024,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTA1MDI0",
        "diff_hunk": "@@ -7,15 +7,17 @@ use self::mimegen::get_generated_content_type;\n mod mimegen;\n \n pub fn get_content_type(path: &Path) -> Option<MediaType> {\n-    let path_str = path.container_as_str().unwrap();\n-    let ext_pos = regex!(\".[a-z0-9]+$\").find(path_str);\n-    let mut ext;\n-    match ext_pos {\n-        Some((start, _)) => {\n-            ext = path_str.as_slice().slice_from(start);\n-        },\n+    match path.extension() {",
        "path": "src/response/mimes/mod.rs",
        "position": null,
        "original_position": 17,
        "commit_id": "20f6509dfbd35f93c57fb8ef3c11daf604ccf41d",
        "original_commit_id": "133bfefd091b25b52993cde9ef5db6031b39b3d8",
        "user": {
            "login": "huonw",
            "id": 1203825,
            "node_id": "MDQ6VXNlcjEyMDM4MjU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1203825?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/huonw",
            "html_url": "https://github.com/huonw",
            "followers_url": "https://api.github.com/users/huonw/followers",
            "following_url": "https://api.github.com/users/huonw/following{/other_user}",
            "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/huonw/subscriptions",
            "organizations_url": "https://api.github.com/users/huonw/orgs",
            "repos_url": "https://api.github.com/users/huonw/repos",
            "events_url": "https://api.github.com/users/huonw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/huonw/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this can be `path.extension_str().and_then(get_generated_content_type)`.\n\n(BTW, unless you're 100% sure that the extension will be valid UTF-8 then you shouldn't use `.unwrap`... and even then, at least using `.expect(\"get_content_type: non-UTF8 file extension\")` to help debugging if the assumption is wrong is nice.)\n",
        "created_at": "2014-07-03T09:38:28Z",
        "updated_at": "2014-07-03T21:32:13Z",
        "html_url": "https://github.com/iron/iron/pull/86#discussion_r14505024",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/86",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/14505024"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/86#discussion_r14505024"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/86"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/14505047",
        "pull_request_review_id": null,
        "id": 14505047,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTA1MDQ3",
        "diff_hunk": "@@ -7,15 +7,17 @@ use self::mimegen::get_generated_content_type;\n mod mimegen;\n \n pub fn get_content_type(path: &Path) -> Option<MediaType> {\n-    let path_str = path.container_as_str().unwrap();\n-    let ext_pos = regex!(\".[a-z0-9]+$\").find(path_str);\n-    let mut ext;\n-    match ext_pos {\n-        Some((start, _)) => {\n-            ext = path_str.as_slice().slice_from(start);\n-        },\n+    match path.extension() {\n+        Some(ext) => get_generated_content_type(str::from_utf8(ext).unwrap()),\n         None => return None\n     }\n-\n-    get_generated_content_type(ext)\n }\n+\n+#[test]\n+fn matches_content_type () {\n+    let path = &Path::new(\"test.txt\");\n+    let content_type = get_content_type(path).unwrap();\n+\n+    assert_eq!(content_type.type_, String::from_str(\"text\"));",
        "path": "src/response/mimes/mod.rs",
        "position": null,
        "original_position": 30,
        "commit_id": "20f6509dfbd35f93c57fb8ef3c11daf604ccf41d",
        "original_commit_id": "133bfefd091b25b52993cde9ef5db6031b39b3d8",
        "user": {
            "login": "huonw",
            "id": 1203825,
            "node_id": "MDQ6VXNlcjEyMDM4MjU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1203825?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/huonw",
            "html_url": "https://github.com/huonw",
            "followers_url": "https://api.github.com/users/huonw/followers",
            "following_url": "https://api.github.com/users/huonw/following{/other_user}",
            "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/huonw/subscriptions",
            "organizations_url": "https://api.github.com/users/huonw/orgs",
            "repos_url": "https://api.github.com/users/huonw/repos",
            "events_url": "https://api.github.com/users/huonw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/huonw/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Conventionally this would be either `\"text\".to_string()`, or preferably `assert_eq!(content_type.type_.as_slice(), \"text\");`. (And below too.)\n",
        "created_at": "2014-07-03T09:39:06Z",
        "updated_at": "2014-07-03T21:32:13Z",
        "html_url": "https://github.com/iron/iron/pull/86#discussion_r14505047",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/86",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/14505047"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/86#discussion_r14505047"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/86"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/14505431",
        "pull_request_review_id": null,
        "id": 14505431,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTA1NDMx",
        "diff_hunk": "@@ -7,15 +7,17 @@ use self::mimegen::get_generated_content_type;\n mod mimegen;\n \n pub fn get_content_type(path: &Path) -> Option<MediaType> {\n-    let path_str = path.container_as_str().unwrap();\n-    let ext_pos = regex!(\".[a-z0-9]+$\").find(path_str);\n-    let mut ext;\n-    match ext_pos {\n-        Some((start, _)) => {\n-            ext = path_str.as_slice().slice_from(start);\n-        },\n+    match path.extension() {",
        "path": "src/response/mimes/mod.rs",
        "position": null,
        "original_position": 17,
        "commit_id": "20f6509dfbd35f93c57fb8ef3c11daf604ccf41d",
        "original_commit_id": "133bfefd091b25b52993cde9ef5db6031b39b3d8",
        "user": {
            "login": "cburgdorf",
            "id": 521109,
            "node_id": "MDQ6VXNlcjUyMTEwOQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/521109?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cburgdorf",
            "html_url": "https://github.com/cburgdorf",
            "followers_url": "https://api.github.com/users/cburgdorf/followers",
            "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
            "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
            "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
            "repos_url": "https://api.github.com/users/cburgdorf/repos",
            "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks! I didn't know these exist. I'll change that and force push the PR.\n",
        "created_at": "2014-07-03T09:49:09Z",
        "updated_at": "2014-07-03T21:32:13Z",
        "html_url": "https://github.com/iron/iron/pull/86#discussion_r14505431",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/86",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/14505431"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/86#discussion_r14505431"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/86"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/14505443",
        "pull_request_review_id": null,
        "id": 14505443,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTA1NDQz",
        "diff_hunk": "@@ -7,15 +7,17 @@ use self::mimegen::get_generated_content_type;\n mod mimegen;\n \n pub fn get_content_type(path: &Path) -> Option<MediaType> {\n-    let path_str = path.container_as_str().unwrap();\n-    let ext_pos = regex!(\".[a-z0-9]+$\").find(path_str);\n-    let mut ext;\n-    match ext_pos {\n-        Some((start, _)) => {\n-            ext = path_str.as_slice().slice_from(start);\n-        },\n+    match path.extension() {\n+        Some(ext) => get_generated_content_type(str::from_utf8(ext).unwrap()),\n         None => return None\n     }\n-\n-    get_generated_content_type(ext)\n }\n+\n+#[test]\n+fn matches_content_type () {\n+    let path = &Path::new(\"test.txt\");\n+    let content_type = get_content_type(path).unwrap();\n+\n+    assert_eq!(content_type.type_, String::from_str(\"text\"));",
        "path": "src/response/mimes/mod.rs",
        "position": null,
        "original_position": 30,
        "commit_id": "20f6509dfbd35f93c57fb8ef3c11daf604ccf41d",
        "original_commit_id": "133bfefd091b25b52993cde9ef5db6031b39b3d8",
        "user": {
            "login": "cburgdorf",
            "id": 521109,
            "node_id": "MDQ6VXNlcjUyMTEwOQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/521109?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cburgdorf",
            "html_url": "https://github.com/cburgdorf",
            "followers_url": "https://api.github.com/users/cburgdorf/followers",
            "following_url": "https://api.github.com/users/cburgdorf/following{/other_user}",
            "gists_url": "https://api.github.com/users/cburgdorf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cburgdorf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cburgdorf/subscriptions",
            "organizations_url": "https://api.github.com/users/cburgdorf/orgs",
            "repos_url": "https://api.github.com/users/cburgdorf/repos",
            "events_url": "https://api.github.com/users/cburgdorf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cburgdorf/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks, I'll change that, too.\n",
        "created_at": "2014-07-03T09:49:28Z",
        "updated_at": "2014-07-03T21:32:13Z",
        "html_url": "https://github.com/iron/iron/pull/86#discussion_r14505443",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/86",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/14505443"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/86#discussion_r14505443"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/86"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15425622",
        "pull_request_review_id": null,
        "id": 15425622,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI1NjIy",
        "diff_hunk": "@@ -40,10 +49,14 @@ pub enum Status {\n /// Internal data should be stored on the `struct` that implements `Middleware`\n /// itself. All `Middleware` are cloned for each client request, so the object\n /// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request. Data stored on a `Middleware` instance does _not_ persist\n+/// enter for every request.\n+///\n+/// Data stored on a `Middleware` instance does _not_ persist\n /// between requests and is _not_ shared between different, concurrent, requests.\n /// The same is true for data stored on an `Alloy`.\n ///\n+/// Should you need to persist data between requests, you should use an `Arc`.",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 55,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you just append this in the above paragraph?\n",
        "created_at": "2014-07-25T21:32:09Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15425622",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15425622"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15425622"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15425640",
        "pull_request_review_id": null,
        "id": 15425640,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI1NjQw",
        "diff_hunk": "@@ -60,10 +73,13 @@ pub trait Middleware: Send + Clone {\n     /// Returning `Unwind` from this handler will cause the `Chain` to stop\n     /// going down its stack and start bubbling back up through `Middleware`\n     /// and calling `exit` on them.\n+    ///\n+    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n+    /// will call `Middleware's`",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 66,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "...? `on_error`?\n",
        "created_at": "2014-07-25T21:32:35Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15425640",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15425640"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15425640"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15425805",
        "pull_request_review_id": null,
        "id": 15425805,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI1ODA1",
        "diff_hunk": "@@ -75,12 +91,21 @@ pub trait Middleware: Send + Clone {\n     /// While this method must return a `Status`, most `Chains` will ignore\n     /// this method's return value.\n     fn exit(&mut self,\n-            _request: &mut Request,\n-            _response: &mut Response,\n-            _alloy: &mut Alloy) -> Status {\n+            _: &mut Request,\n+            _: &mut Response,\n+            _: &mut Alloy) -> Status {\n         Continue\n     }\n \n+    ///",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 90,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Delete this line.\n",
        "created_at": "2014-07-25T21:35:32Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15425805",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15425805"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15425805"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15425813",
        "pull_request_review_id": null,
        "id": 15425813,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI1ODEz",
        "diff_hunk": "@@ -98,6 +123,11 @@ impl Middleware for Box<Chain + Send> {\n     fn exit(&mut self, request: &mut Request, response: &mut Response, alloy: &mut Alloy) -> Status {\n         self.chain_exit(request, response, alloy)\n     }\n+\n+    fn on_error(&mut self, request: &mut Request, response: &mut Response,",
        "path": "src/middleware.rs",
        "position": 110,
        "original_position": 107,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Where is the documentation for this function?\n\nIt should probably note that, by default, `on_error` will `fail`, such that if you want to be able to handle an error in middleware `a` yourself from a middleware `b`, all middleware in between (including `b`?) will need to implement their own `on_error`. There may be a better place to note this, but it _should_ be noted somewhere.\n",
        "created_at": "2014-07-25T21:35:43Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15425813",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15425813"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15425813"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15426010",
        "pull_request_review_id": null,
        "id": 15426010,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI2MDEw",
        "diff_hunk": "@@ -31,8 +32,16 @@ pub trait Chain: Send + Clone {\n             None => ()\n         };\n \n-        let status = self.chain_enter(request, response, alloy);\n-        let _ = self.chain_exit(request, response, alloy);\n+        let mut status = self.chain_enter(request, response, alloy);\n+        match status {\n+            Error(ref mut e) => {\n+                let error: &mut Show = *e;\n+                let _ = self.chain_error(request, response, alloy, error);\n+            },\n+            _ => {\n+                let _ = self.chain_exit(request, response, alloy);\n+            }\n+        };\n \n         status",
        "path": "src/chain.rs",
        "position": 31,
        "original_position": 31,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why do we return the `status` from `chain_enter` instead of `error` or `exit`? Seems ambiguous - should we reconsider it, or can you justify it?\n\nIf you can justify it, it probably belongs in the docs.\n",
        "created_at": "2014-07-25T21:40:41Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15426010",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15426010"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15426010"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15426104",
        "pull_request_review_id": null,
        "id": 15426104,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI2MTA0",
        "diff_hunk": "@@ -113,10 +126,12 @@ pub mod stackchain {\n                 None => ()\n             };\n \n-            let status = self.chain_enter(request, response, alloy);\n-\n+            let mut status = self.chain_enter(request, response, alloy);",
        "path": "src/chain.rs",
        "position": 92,
        "original_position": 92,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "See comment on L46.\n",
        "created_at": "2014-07-25T21:43:06Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15426104",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15426104"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15426104"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15426124",
        "pull_request_review_id": null,
        "id": 15426124,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI2MTI0",
        "diff_hunk": "@@ -113,10 +126,12 @@ pub mod stackchain {\n                 None => ()\n             };\n \n-            let status = self.chain_enter(request, response, alloy);\n-\n+            let mut status = self.chain_enter(request, response, alloy);\n             match status {\n-                Unwind => (),\n+                Error(ref mut e) => {\n+                    let error: &mut Show = *e;\n+                    let _ = self.chain_error(request, response, alloy, error);\n+                },\n                 Continue => {\n                     // If no middleware returned unwind, then we send a 404.",
        "path": "src/chain.rs",
        "position": null,
        "original_position": 100,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This comment is out of date. \"unwind or erred\".\n",
        "created_at": "2014-07-25T21:43:44Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15426124",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15426124"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15426124"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15426144",
        "pull_request_review_id": null,
        "id": 15426144,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI2MTQ0",
        "diff_hunk": "@@ -113,10 +126,12 @@ pub mod stackchain {\n                 None => ()\n             };\n \n-            let status = self.chain_enter(request, response, alloy);\n-\n+            let mut status = self.chain_enter(request, response, alloy);\n             match status {\n-                Unwind => (),\n+                Error(ref mut e) => {\n+                    let error: &mut Show = *e;\n+                    let _ = self.chain_error(request, response, alloy, error);\n+                },\n                 Continue => {",
        "path": "src/chain.rs",
        "position": 99,
        "original_position": 99,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think the `404` should be included in the wrapping of `Response` (see other PR) instead of coded into this logic. I think this should not be in this PR.\n",
        "created_at": "2014-07-25T21:44:18Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15426144",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15426144"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15426144"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15426224",
        "pull_request_review_id": null,
        "id": 15426224,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI2MjI0",
        "diff_hunk": "@@ -60,10 +73,13 @@ pub trait Middleware: Send + Clone {\n     /// Returning `Unwind` from this handler will cause the `Chain` to stop\n     /// going down its stack and start bubbling back up through `Middleware`\n     /// and calling `exit` on them.\n+    ///\n+    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n+    /// will call `Middleware's`",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 66,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yup. Typo.\n",
        "created_at": "2014-07-25T21:45:34Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15426224",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15426224"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15426224"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15427264",
        "pull_request_review_id": null,
        "id": 15427264,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI3MjY0",
        "diff_hunk": "@@ -98,6 +123,11 @@ impl Middleware for Box<Chain + Send> {\n     fn exit(&mut self, request: &mut Request, response: &mut Response, alloy: &mut Alloy) -> Status {\n         self.chain_exit(request, response, alloy)\n     }\n+\n+    fn on_error(&mut self, request: &mut Request, response: &mut Response,",
        "path": "src/middleware.rs",
        "position": 110,
        "original_position": 107,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is just an impl of the Middleware trait, hence no docs here. chain_error is documented should you need to know the specific behavior of Chains in this case. \n\nAdditionally, on_error has a default no-op implementation found on L103, so only middleware concerned with errors need implement it.\n",
        "created_at": "2014-07-25T22:16:16Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15427264",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15427264"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15427264"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15427296",
        "pull_request_review_id": null,
        "id": 15427296,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI3Mjk2",
        "diff_hunk": "@@ -113,10 +126,12 @@ pub mod stackchain {\n                 None => ()\n             };\n \n-            let status = self.chain_enter(request, response, alloy);\n-\n+            let mut status = self.chain_enter(request, response, alloy);\n             match status {\n-                Unwind => (),\n+                Error(ref mut e) => {\n+                    let error: &mut Show = *e;\n+                    let _ = self.chain_error(request, response, alloy, error);\n+                },\n                 Continue => {",
        "path": "src/chain.rs",
        "position": 99,
        "original_position": 99,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@zzmp This change needs to stay here or this will not compile, but if you merge this first I can fix it all in one fell swoop in #109 \n\nThis is not based on top of the wrapper changes, so it can't rely on them.\n",
        "created_at": "2014-07-25T22:17:18Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15427296",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15427296"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15427296"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15427341",
        "pull_request_review_id": null,
        "id": 15427341,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI3MzQx",
        "diff_hunk": "@@ -31,8 +32,16 @@ pub trait Chain: Send + Clone {\n             None => ()\n         };\n \n-        let status = self.chain_enter(request, response, alloy);\n-        let _ = self.chain_exit(request, response, alloy);\n+        let mut status = self.chain_enter(request, response, alloy);\n+        match status {\n+            Error(ref mut e) => {\n+                let error: &mut Show = *e;\n+                let _ = self.chain_error(request, response, alloy, error);\n+            },\n+            _ => {\n+                let _ = self.chain_exit(request, response, alloy);\n+            }\n+        };\n \n         status",
        "path": "src/chain.rs",
        "position": 31,
        "original_position": 31,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Because StackChain is the most common impl and it listens to the status returned from enter instead of the one returned from exit. on_error/chain_error do not return a status.\n",
        "created_at": "2014-07-25T22:19:18Z",
        "updated_at": "2014-07-25T22:28:19Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15427341",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15427341"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15427341"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15432380",
        "pull_request_review_id": null,
        "id": 15432380,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDMyMzgw",
        "diff_hunk": "@@ -98,6 +123,11 @@ impl Middleware for Box<Chain + Send> {\n     fn exit(&mut self, request: &mut Request, response: &mut Response, alloy: &mut Alloy) -> Status {\n         self.chain_exit(request, response, alloy)\n     }\n+\n+    fn on_error(&mut self, request: &mut Request, response: &mut Response,",
        "path": "src/middleware.rs",
        "position": 110,
        "original_position": 107,
        "commit_id": "7b1abae5ace60fbc3b74c54ebc7ba6908e747a8d",
        "original_commit_id": "b4582afc81559352ec29e3477bcd220598715c0c",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "on_error is documented in the Middleware trait declaration.\n",
        "created_at": "2014-07-26T06:08:07Z",
        "updated_at": "2014-07-26T06:08:07Z",
        "html_url": "https://github.com/iron/iron/pull/112#discussion_r15432380",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/112",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15432380"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/112#discussion_r15432380"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/112"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15424170",
        "pull_request_review_id": null,
        "id": 15424170,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI0MTcw",
        "diff_hunk": "@@ -50,6 +50,7 @@\n \n extern crate regex;\n #[phase(plugin)] extern crate regex_macros;\n+#[phase(plugin, link)] extern crate log;",
        "path": "src/lib.rs",
        "position": 4,
        "original_position": 4,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What is this here for?\n",
        "created_at": "2014-07-25T20:58:36Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15424170",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15424170"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15424170"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15424288",
        "pull_request_review_id": null,
        "id": 15424288,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI0Mjg4",
        "diff_hunk": "@@ -1,36 +1,44 @@\n //! An alias of the rust-http Request struct.",
        "path": "src/request.rs",
        "position": null,
        "original_position": 1,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is no longer an alias, but a wrapper.\n",
        "created_at": "2014-07-25T21:01:06Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15424288",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15424288"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15424288"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15424439",
        "pull_request_review_id": null,
        "id": 15424439,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI0NDM5",
        "diff_hunk": "@@ -1,36 +1,44 @@\n //! An alias of the rust-http Request struct.\n \n+use std::io::net::ip::SocketAddr;\n use http::server::request::{AbsolutePath};\n-pub use Request = http::server::request::Request;\n+use http::headers::request::HeaderCollection;\n+use http::method::Method;\n+pub use HttpRequest = http::server::request::Request;\n \n-/// Adds a url getter method.\n-pub trait GetUrl {\n-    /// A url getter method for requests or responses.\n-    fn url<'a>(&'a self) -> Option<&'a String>;\n+/// The `Request` given to all `Middleware`\n+pub struct Request {\n+    /// The request's requested url.\n+    pub url: String,",
        "path": "src/request.rs",
        "position": null,
        "original_position": 17,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we want to include the original requested url as a separate field? It would make downstream middleware cleaner.\n\nHowever, it would not be guaranteed to be immutable, so it may be a dangerous addition.\n\nAn idea.\n",
        "created_at": "2014-07-25T21:03:23Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15424439",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15424439"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15424439"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15424475",
        "pull_request_review_id": null,
        "id": 15424475,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI0NDc1",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.",
        "path": "src/response.rs",
        "position": null,
        "original_position": 1,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "At this point, it is a wrapper or abstraction.\n",
        "created_at": "2014-07-25T21:04:14Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15424475",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15424475"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15424475"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15424605",
        "pull_request_review_id": null,
        "id": 15424605,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI0NjA1",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.\n \n-use std::io::{IoResult, File};\n-use std::io::util::copy;\n+use std::io::{IoResult, File, MemReader};\n use std::path::BytesContainer;\n \n-use http::status::Status;\n+use http::status::{Status, InternalServerError};\n+use http::headers::response::HeaderCollection;\n \n-pub use Response = http::server::response::ResponseWriter;\n+pub use HttpResponse = http::server::response::ResponseWriter;\n \n use contenttype::get_content_type;\n \n-/// Adds common serving methods to Response.\n-pub trait Serve: Writer {\n-    /// Serve the file located at `path`.\n+/// The response representation given to `Middleware`\n+pub struct Response<'a, 'b> {\n+    http_res: &'a mut HttpResponse<'b>,\n+\n+    /// The body of the response.\n     ///\n-    /// This is usually a terminal process, and `Middleware` may want to\n-    /// call `Unwind` after a file is served. If the status should be\n-    /// anything other than `200`, the `Middleware` must set it, including in\n-    /// the case of an `Err`.\n+    /// This is a Reader for generality, most data should\n+    /// be sent using either `serve` or `serve_file`.\n     ///\n-    /// `serve_file` will err out if the file does not exist, the process\n-    /// does not have correct permissions, or it has other issues in reading\n-    /// from the file. Middleware should handle this gracefully.\n-    fn serve_file(&mut self, &Path) -> IoResult<()>;\n+    /// Arbitrary Readers can be sent by assigning to body.\n+    pub body: Box<Reader>,\n \n-    /// Write the `Status` and data to the `Response`.\n-    ///\n-    /// `serve` will forward write errors to its caller.\n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()>;\n+    /// The headers of the response.\n+    pub headers: Box<HeaderCollection>,\n+\n+    /// The response status-code.\n+    pub status: Status\n }\n \n-impl<'a> Serve for Response<'a> {\n-    fn serve_file(&mut self, path: &Path) -> IoResult<()> {\n-        let mut file = try!(File::open(path));\n-        self.headers.content_type = path.extension_str().and_then(get_content_type);\n-        copy(&mut file, self)\n+impl<'a, 'b> Response<'a, 'b> {\n+    /// Construct a Response from an HttpResponse reference\n+    pub fn from_http(http_res: &'a mut HttpResponse<'b>) -> Response<'a, 'b> {\n+        Response {\n+            headers: http_res.headers.clone(),\n+            status: http_res.status.clone(),\n+            http_res: http_res,\n+            body: box MemReader::new(vec![]) as Box<Reader>\n+        }\n     }\n \n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()> {\n+    /// Write the `Status` and data to the `Response`.\n+    pub fn serve<S: BytesContainer>(&mut self, status: Status, body: S) {\n         self.status = status;\n-        Ok(try!(self.write(body.container_as_bytes())))\n+        self.body = box MemReader::new(body.container_as_bytes().to_vec()) as Box<Reader>;\n+    }\n+\n+    /// Serve the file located at `path`.\n+    ///\n+    /// This usually means a request has been handlded, and `Middleware`",
        "path": "src/response.rs",
        "position": null,
        "original_position": 77,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "typo at `handlded`\n",
        "created_at": "2014-07-25T21:07:15Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15424605",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15424605"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15424605"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15424674",
        "pull_request_review_id": null,
        "id": 15424674,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI0Njc0",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.\n \n-use std::io::{IoResult, File};\n-use std::io::util::copy;\n+use std::io::{IoResult, File, MemReader};\n use std::path::BytesContainer;\n \n-use http::status::Status;\n+use http::status::{Status, InternalServerError};\n+use http::headers::response::HeaderCollection;\n \n-pub use Response = http::server::response::ResponseWriter;\n+pub use HttpResponse = http::server::response::ResponseWriter;\n \n use contenttype::get_content_type;\n \n-/// Adds common serving methods to Response.\n-pub trait Serve: Writer {\n-    /// Serve the file located at `path`.\n+/// The response representation given to `Middleware`\n+pub struct Response<'a, 'b> {\n+    http_res: &'a mut HttpResponse<'b>,\n+\n+    /// The body of the response.\n     ///\n-    /// This is usually a terminal process, and `Middleware` may want to\n-    /// call `Unwind` after a file is served. If the status should be\n-    /// anything other than `200`, the `Middleware` must set it, including in\n-    /// the case of an `Err`.\n+    /// This is a Reader for generality, most data should\n+    /// be sent using either `serve` or `serve_file`.\n     ///\n-    /// `serve_file` will err out if the file does not exist, the process\n-    /// does not have correct permissions, or it has other issues in reading\n-    /// from the file. Middleware should handle this gracefully.\n-    fn serve_file(&mut self, &Path) -> IoResult<()>;\n+    /// Arbitrary Readers can be sent by assigning to body.\n+    pub body: Box<Reader>,\n \n-    /// Write the `Status` and data to the `Response`.\n-    ///\n-    /// `serve` will forward write errors to its caller.\n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()>;\n+    /// The headers of the response.\n+    pub headers: Box<HeaderCollection>,\n+\n+    /// The response status-code.\n+    pub status: Status\n }\n \n-impl<'a> Serve for Response<'a> {\n-    fn serve_file(&mut self, path: &Path) -> IoResult<()> {\n-        let mut file = try!(File::open(path));\n-        self.headers.content_type = path.extension_str().and_then(get_content_type);\n-        copy(&mut file, self)\n+impl<'a, 'b> Response<'a, 'b> {\n+    /// Construct a Response from an HttpResponse reference\n+    pub fn from_http(http_res: &'a mut HttpResponse<'b>) -> Response<'a, 'b> {\n+        Response {\n+            headers: http_res.headers.clone(),\n+            status: http_res.status.clone(),\n+            http_res: http_res,\n+            body: box MemReader::new(vec![]) as Box<Reader>\n+        }\n     }\n \n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()> {\n+    /// Write the `Status` and data to the `Response`.\n+    pub fn serve<S: BytesContainer>(&mut self, status: Status, body: S) {\n         self.status = status;\n-        Ok(try!(self.write(body.container_as_bytes())))\n+        self.body = box MemReader::new(body.container_as_bytes().to_vec()) as Box<Reader>;\n+    }\n+\n+    /// Serve the file located at `path`.\n+    ///\n+    /// This usually means a request has been handlded, and `Middleware`\n+    /// may want to `Unwind` after a file is served. If the status should be\n+    /// anything other than `200`, `Middleware` must set it, including in\n+    /// the case of an `Err`.\n+    ///\n+    /// `serve_file` will error if the file does not exist, the process\n+    /// does not have correct permissions, or it has other issues in reading\n+    /// from the file. `Middleware` should handle this gracefully.\n+    pub fn serve_file(&mut self, path: &Path) -> IoResult<()> {\n+        let file = try!(File::open(path));\n+        self.headers.content_type = path.extension_str().and_then(get_content_type);\n+        self.body = box file as Box<Reader>;\n+        Ok(())\n+    }\n+\n+    /// Internal. Should not be called by the user.",
        "path": "src/response.rs",
        "position": null,
        "original_position": 92,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If it is internal, should it be documented publicly? Why not use a #[doc(hidden)] directive, and include any necessary description as `//` comments?\n",
        "created_at": "2014-07-25T21:09:13Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15424674",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15424674"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15424674"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15424725",
        "pull_request_review_id": null,
        "id": 15424725,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI0NzI1",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.\n \n-use std::io::{IoResult, File};\n-use std::io::util::copy;\n+use std::io::{IoResult, File, MemReader};\n use std::path::BytesContainer;\n \n-use http::status::Status;\n+use http::status::{Status, InternalServerError};\n+use http::headers::response::HeaderCollection;\n \n-pub use Response = http::server::response::ResponseWriter;\n+pub use HttpResponse = http::server::response::ResponseWriter;\n \n use contenttype::get_content_type;\n \n-/// Adds common serving methods to Response.\n-pub trait Serve: Writer {\n-    /// Serve the file located at `path`.\n+/// The response representation given to `Middleware`\n+pub struct Response<'a, 'b> {\n+    http_res: &'a mut HttpResponse<'b>,\n+\n+    /// The body of the response.\n     ///\n-    /// This is usually a terminal process, and `Middleware` may want to\n-    /// call `Unwind` after a file is served. If the status should be\n-    /// anything other than `200`, the `Middleware` must set it, including in\n-    /// the case of an `Err`.\n+    /// This is a Reader for generality, most data should\n+    /// be sent using either `serve` or `serve_file`.\n     ///\n-    /// `serve_file` will err out if the file does not exist, the process\n-    /// does not have correct permissions, or it has other issues in reading\n-    /// from the file. Middleware should handle this gracefully.\n-    fn serve_file(&mut self, &Path) -> IoResult<()>;\n+    /// Arbitrary Readers can be sent by assigning to body.\n+    pub body: Box<Reader>,\n \n-    /// Write the `Status` and data to the `Response`.\n-    ///\n-    /// `serve` will forward write errors to its caller.\n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()>;\n+    /// The headers of the response.\n+    pub headers: Box<HeaderCollection>,\n+\n+    /// The response status-code.\n+    pub status: Status\n }\n \n-impl<'a> Serve for Response<'a> {\n-    fn serve_file(&mut self, path: &Path) -> IoResult<()> {\n-        let mut file = try!(File::open(path));\n-        self.headers.content_type = path.extension_str().and_then(get_content_type);\n-        copy(&mut file, self)\n+impl<'a, 'b> Response<'a, 'b> {\n+    /// Construct a Response from an HttpResponse reference\n+    pub fn from_http(http_res: &'a mut HttpResponse<'b>) -> Response<'a, 'b> {\n+        Response {\n+            headers: http_res.headers.clone(),\n+            status: http_res.status.clone(),",
        "path": "src/response.rs",
        "position": null,
        "original_position": 61,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Instead of cloning the default status (`200`), let's put our own default of `404` here so that we don't add a middleware to do it for us and pollute our middleware chain.\n",
        "created_at": "2014-07-25T21:10:16Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15424725",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15424725"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15424725"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15424811",
        "pull_request_review_id": null,
        "id": 15424811,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI0ODEx",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.\n \n-use std::io::{IoResult, File};\n-use std::io::util::copy;\n+use std::io::{IoResult, File, MemReader};\n use std::path::BytesContainer;\n \n-use http::status::Status;\n+use http::status::{Status, InternalServerError};\n+use http::headers::response::HeaderCollection;\n \n-pub use Response = http::server::response::ResponseWriter;\n+pub use HttpResponse = http::server::response::ResponseWriter;\n \n use contenttype::get_content_type;\n \n-/// Adds common serving methods to Response.\n-pub trait Serve: Writer {\n-    /// Serve the file located at `path`.\n+/// The response representation given to `Middleware`\n+pub struct Response<'a, 'b> {\n+    http_res: &'a mut HttpResponse<'b>,",
        "path": "src/response.rs",
        "position": 24,
        "original_position": 22,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why doesn't this need a `#[doc(hidden)]` tag? Did you turn off the `deny`, or is it because it's not public?\n",
        "created_at": "2014-07-25T21:12:27Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15424811",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15424811"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15424811"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15424891",
        "pull_request_review_id": null,
        "id": 15424891,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI0ODkx",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.\n \n-use std::io::{IoResult, File};\n-use std::io::util::copy;\n+use std::io::{IoResult, File, MemReader};\n use std::path::BytesContainer;\n \n-use http::status::Status;\n+use http::status::{Status, InternalServerError};\n+use http::headers::response::HeaderCollection;\n \n-pub use Response = http::server::response::ResponseWriter;\n+pub use HttpResponse = http::server::response::ResponseWriter;\n \n use contenttype::get_content_type;\n \n-/// Adds common serving methods to Response.\n-pub trait Serve: Writer {\n-    /// Serve the file located at `path`.\n+/// The response representation given to `Middleware`\n+pub struct Response<'a, 'b> {\n+    http_res: &'a mut HttpResponse<'b>,\n+\n+    /// The body of the response.\n     ///\n-    /// This is usually a terminal process, and `Middleware` may want to\n-    /// call `Unwind` after a file is served. If the status should be\n-    /// anything other than `200`, the `Middleware` must set it, including in\n-    /// the case of an `Err`.\n+    /// This is a Reader for generality, most data should\n+    /// be sent using either `serve` or `serve_file`.\n     ///\n-    /// `serve_file` will err out if the file does not exist, the process\n-    /// does not have correct permissions, or it has other issues in reading\n-    /// from the file. Middleware should handle this gracefully.\n-    fn serve_file(&mut self, &Path) -> IoResult<()>;\n+    /// Arbitrary Readers can be sent by assigning to body.\n+    pub body: Box<Reader>,\n \n-    /// Write the `Status` and data to the `Response`.\n-    ///\n-    /// `serve` will forward write errors to its caller.\n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()>;\n+    /// The headers of the response.\n+    pub headers: Box<HeaderCollection>,\n+\n+    /// The response status-code.\n+    pub status: Status\n }\n \n-impl<'a> Serve for Response<'a> {\n-    fn serve_file(&mut self, path: &Path) -> IoResult<()> {\n-        let mut file = try!(File::open(path));\n-        self.headers.content_type = path.extension_str().and_then(get_content_type);\n-        copy(&mut file, self)\n+impl<'a, 'b> Response<'a, 'b> {\n+    /// Construct a Response from an HttpResponse reference\n+    pub fn from_http(http_res: &'a mut HttpResponse<'b>) -> Response<'a, 'b> {\n+        Response {\n+            headers: http_res.headers.clone(),\n+            status: http_res.status.clone(),\n+            http_res: http_res,\n+            body: box MemReader::new(vec![]) as Box<Reader>\n+        }\n     }\n \n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()> {\n+    /// Write the `Status` and data to the `Response`.\n+    pub fn serve<S: BytesContainer>(&mut self, status: Status, body: S) {\n         self.status = status;\n-        Ok(try!(self.write(body.container_as_bytes())))\n+        self.body = box MemReader::new(body.container_as_bytes().to_vec()) as Box<Reader>;",
        "path": "src/response.rs",
        "position": null,
        "original_position": 72,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The old implementation allowed multiple writes through multiple calls to `serve`. This looks like it will disallow that. :-1: Can it be rewritten, or am I misreading it?\n",
        "created_at": "2014-07-25T21:14:29Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15424891",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15424891"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15424891"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15424911",
        "pull_request_review_id": null,
        "id": 15424911,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI0OTEx",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.\n \n-use std::io::{IoResult, File};\n-use std::io::util::copy;\n+use std::io::{IoResult, File, MemReader};\n use std::path::BytesContainer;\n \n-use http::status::Status;\n+use http::status::{Status, InternalServerError};\n+use http::headers::response::HeaderCollection;\n \n-pub use Response = http::server::response::ResponseWriter;\n+pub use HttpResponse = http::server::response::ResponseWriter;\n \n use contenttype::get_content_type;\n \n-/// Adds common serving methods to Response.\n-pub trait Serve: Writer {\n-    /// Serve the file located at `path`.\n+/// The response representation given to `Middleware`\n+pub struct Response<'a, 'b> {\n+    http_res: &'a mut HttpResponse<'b>,\n+\n+    /// The body of the response.\n     ///\n-    /// This is usually a terminal process, and `Middleware` may want to\n-    /// call `Unwind` after a file is served. If the status should be\n-    /// anything other than `200`, the `Middleware` must set it, including in\n-    /// the case of an `Err`.\n+    /// This is a Reader for generality, most data should\n+    /// be sent using either `serve` or `serve_file`.\n     ///\n-    /// `serve_file` will err out if the file does not exist, the process\n-    /// does not have correct permissions, or it has other issues in reading\n-    /// from the file. Middleware should handle this gracefully.\n-    fn serve_file(&mut self, &Path) -> IoResult<()>;\n+    /// Arbitrary Readers can be sent by assigning to body.\n+    pub body: Box<Reader>,\n \n-    /// Write the `Status` and data to the `Response`.\n-    ///\n-    /// `serve` will forward write errors to its caller.\n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()>;\n+    /// The headers of the response.\n+    pub headers: Box<HeaderCollection>,\n+\n+    /// The response status-code.\n+    pub status: Status\n }\n \n-impl<'a> Serve for Response<'a> {\n-    fn serve_file(&mut self, path: &Path) -> IoResult<()> {\n-        let mut file = try!(File::open(path));\n-        self.headers.content_type = path.extension_str().and_then(get_content_type);\n-        copy(&mut file, self)\n+impl<'a, 'b> Response<'a, 'b> {\n+    /// Construct a Response from an HttpResponse reference\n+    pub fn from_http(http_res: &'a mut HttpResponse<'b>) -> Response<'a, 'b> {\n+        Response {\n+            headers: http_res.headers.clone(),\n+            status: http_res.status.clone(),\n+            http_res: http_res,\n+            body: box MemReader::new(vec![]) as Box<Reader>\n+        }\n     }\n \n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()> {\n+    /// Write the `Status` and data to the `Response`.\n+    pub fn serve<S: BytesContainer>(&mut self, status: Status, body: S) {\n         self.status = status;\n-        Ok(try!(self.write(body.container_as_bytes())))\n+        self.body = box MemReader::new(body.container_as_bytes().to_vec()) as Box<Reader>;\n+    }\n+\n+    /// Serve the file located at `path`.\n+    ///\n+    /// This usually means a request has been handlded, and `Middleware`\n+    /// may want to `Unwind` after a file is served. If the status should be\n+    /// anything other than `200`, `Middleware` must set it, including in\n+    /// the case of an `Err`.\n+    ///\n+    /// `serve_file` will error if the file does not exist, the process\n+    /// does not have correct permissions, or it has other issues in reading\n+    /// from the file. `Middleware` should handle this gracefully.\n+    pub fn serve_file(&mut self, path: &Path) -> IoResult<()> {\n+        let file = try!(File::open(path));\n+        self.headers.content_type = path.extension_str().and_then(get_content_type);\n+        self.body = box file as Box<Reader>;",
        "path": "src/response.rs",
        "position": null,
        "original_position": 88,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "See comment at L46.\n",
        "created_at": "2014-07-25T21:15:01Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15424911",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15424911"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15424911"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15425231",
        "pull_request_review_id": null,
        "id": 15425231,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI1MjMx",
        "diff_hunk": "@@ -50,6 +50,7 @@\n \n extern crate regex;\n #[phase(plugin)] extern crate regex_macros;\n+#[phase(plugin, link)] extern crate log;",
        "path": "src/lib.rs",
        "position": 4,
        "original_position": 4,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "error!\n",
        "created_at": "2014-07-25T21:22:38Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15425231",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15425231"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15425231"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15425365",
        "pull_request_review_id": null,
        "id": 15425365,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI1MzY1",
        "diff_hunk": "@@ -1,36 +1,44 @@\n //! An alias of the rust-http Request struct.\n \n+use std::io::net::ip::SocketAddr;\n use http::server::request::{AbsolutePath};\n-pub use Request = http::server::request::Request;\n+use http::headers::request::HeaderCollection;\n+use http::method::Method;\n+pub use HttpRequest = http::server::request::Request;\n \n-/// Adds a url getter method.\n-pub trait GetUrl {\n-    /// A url getter method for requests or responses.\n-    fn url<'a>(&'a self) -> Option<&'a String>;\n+/// The `Request` given to all `Middleware`\n+pub struct Request {\n+    /// The request's requested url.\n+    pub url: String,",
        "path": "src/request.rs",
        "position": null,
        "original_position": 17,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We could simply store an &'a str reference to it, making it impossible to change in Middleware as there's no room to change the lifetime of the Request obj, i.e:\n\n``` rust\npub struct Request<'a> {\n       // other fields ...\n       pub originalUrl: &'a str\n}\n\n// In middleware...\nreq.originalUrl = \"Hello\"; // Could not deduce correct lifetime etc. because the lifetime of Hello != the lifetime of originalUrl\n```\n",
        "created_at": "2014-07-25T21:25:39Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15425365",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15425365"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15425365"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15425432",
        "pull_request_review_id": null,
        "id": 15425432,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI1NDMy",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.\n \n-use std::io::{IoResult, File};\n-use std::io::util::copy;\n+use std::io::{IoResult, File, MemReader};\n use std::path::BytesContainer;\n \n-use http::status::Status;\n+use http::status::{Status, InternalServerError};\n+use http::headers::response::HeaderCollection;\n \n-pub use Response = http::server::response::ResponseWriter;\n+pub use HttpResponse = http::server::response::ResponseWriter;\n \n use contenttype::get_content_type;\n \n-/// Adds common serving methods to Response.\n-pub trait Serve: Writer {\n-    /// Serve the file located at `path`.\n+/// The response representation given to `Middleware`\n+pub struct Response<'a, 'b> {\n+    http_res: &'a mut HttpResponse<'b>,\n+\n+    /// The body of the response.\n     ///\n-    /// This is usually a terminal process, and `Middleware` may want to\n-    /// call `Unwind` after a file is served. If the status should be\n-    /// anything other than `200`, the `Middleware` must set it, including in\n-    /// the case of an `Err`.\n+    /// This is a Reader for generality, most data should\n+    /// be sent using either `serve` or `serve_file`.\n     ///\n-    /// `serve_file` will err out if the file does not exist, the process\n-    /// does not have correct permissions, or it has other issues in reading\n-    /// from the file. Middleware should handle this gracefully.\n-    fn serve_file(&mut self, &Path) -> IoResult<()>;\n+    /// Arbitrary Readers can be sent by assigning to body.\n+    pub body: Box<Reader>,\n \n-    /// Write the `Status` and data to the `Response`.\n-    ///\n-    /// `serve` will forward write errors to its caller.\n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()>;\n+    /// The headers of the response.\n+    pub headers: Box<HeaderCollection>,\n+\n+    /// The response status-code.\n+    pub status: Status\n }\n \n-impl<'a> Serve for Response<'a> {\n-    fn serve_file(&mut self, path: &Path) -> IoResult<()> {\n-        let mut file = try!(File::open(path));\n-        self.headers.content_type = path.extension_str().and_then(get_content_type);\n-        copy(&mut file, self)\n+impl<'a, 'b> Response<'a, 'b> {\n+    /// Construct a Response from an HttpResponse reference\n+    pub fn from_http(http_res: &'a mut HttpResponse<'b>) -> Response<'a, 'b> {\n+        Response {\n+            headers: http_res.headers.clone(),\n+            status: http_res.status.clone(),",
        "path": "src/response.rs",
        "position": null,
        "original_position": 61,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It might be even better to just have status be an Option<Status>, default it to None, then set it to Some(status) in serve and serve_file. This breaks code that modifies status directly, but that should be a quick fix and this will dramatically simplify the logic for when to send 404's by default.\n",
        "created_at": "2014-07-25T21:27:25Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15425432",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15425432"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15425432"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15425448",
        "pull_request_review_id": null,
        "id": 15425448,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI1NDQ4",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.\n \n-use std::io::{IoResult, File};\n-use std::io::util::copy;\n+use std::io::{IoResult, File, MemReader};\n use std::path::BytesContainer;\n \n-use http::status::Status;\n+use http::status::{Status, InternalServerError};\n+use http::headers::response::HeaderCollection;\n \n-pub use Response = http::server::response::ResponseWriter;\n+pub use HttpResponse = http::server::response::ResponseWriter;\n \n use contenttype::get_content_type;\n \n-/// Adds common serving methods to Response.\n-pub trait Serve: Writer {\n-    /// Serve the file located at `path`.\n+/// The response representation given to `Middleware`\n+pub struct Response<'a, 'b> {\n+    http_res: &'a mut HttpResponse<'b>,",
        "path": "src/response.rs",
        "position": 24,
        "original_position": 22,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's a private field, ergo not included in the docs.\n",
        "created_at": "2014-07-25T21:27:50Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15425448",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15425448"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15425448"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15425808",
        "pull_request_review_id": null,
        "id": 15425808,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI1ODA4",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.\n \n-use std::io::{IoResult, File};\n-use std::io::util::copy;\n+use std::io::{IoResult, File, MemReader};\n use std::path::BytesContainer;\n \n-use http::status::Status;\n+use http::status::{Status, InternalServerError};\n+use http::headers::response::HeaderCollection;\n \n-pub use Response = http::server::response::ResponseWriter;\n+pub use HttpResponse = http::server::response::ResponseWriter;\n \n use contenttype::get_content_type;\n \n-/// Adds common serving methods to Response.\n-pub trait Serve: Writer {\n-    /// Serve the file located at `path`.\n+/// The response representation given to `Middleware`\n+pub struct Response<'a, 'b> {\n+    http_res: &'a mut HttpResponse<'b>,\n+\n+    /// The body of the response.\n     ///\n-    /// This is usually a terminal process, and `Middleware` may want to\n-    /// call `Unwind` after a file is served. If the status should be\n-    /// anything other than `200`, the `Middleware` must set it, including in\n-    /// the case of an `Err`.\n+    /// This is a Reader for generality, most data should\n+    /// be sent using either `serve` or `serve_file`.\n     ///\n-    /// `serve_file` will err out if the file does not exist, the process\n-    /// does not have correct permissions, or it has other issues in reading\n-    /// from the file. Middleware should handle this gracefully.\n-    fn serve_file(&mut self, &Path) -> IoResult<()>;\n+    /// Arbitrary Readers can be sent by assigning to body.\n+    pub body: Box<Reader>,\n \n-    /// Write the `Status` and data to the `Response`.\n-    ///\n-    /// `serve` will forward write errors to its caller.\n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()>;\n+    /// The headers of the response.\n+    pub headers: Box<HeaderCollection>,\n+\n+    /// The response status-code.\n+    pub status: Status\n }\n \n-impl<'a> Serve for Response<'a> {\n-    fn serve_file(&mut self, path: &Path) -> IoResult<()> {\n-        let mut file = try!(File::open(path));\n-        self.headers.content_type = path.extension_str().and_then(get_content_type);\n-        copy(&mut file, self)\n+impl<'a, 'b> Response<'a, 'b> {\n+    /// Construct a Response from an HttpResponse reference\n+    pub fn from_http(http_res: &'a mut HttpResponse<'b>) -> Response<'a, 'b> {\n+        Response {\n+            headers: http_res.headers.clone(),\n+            status: http_res.status.clone(),\n+            http_res: http_res,\n+            body: box MemReader::new(vec![]) as Box<Reader>\n+        }\n     }\n \n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()> {\n+    /// Write the `Status` and data to the `Response`.\n+    pub fn serve<S: BytesContainer>(&mut self, status: Status, body: S) {\n         self.status = status;\n-        Ok(try!(self.write(body.container_as_bytes())))\n+        self.body = box MemReader::new(body.container_as_bytes().to_vec()) as Box<Reader>;",
        "path": "src/response.rs",
        "position": null,
        "original_position": 72,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This new implementation implements body as a `Reader`, the functionality you are looking for would require it to be a `Writer`. \n\nI originally attempted to implement body as a `Box<Reader + Writer>`, aka `Box<Stream`, but after some discussions with wycats realized that this is detrimental to concurrency within controllers as the `Writer` half of the `Reader/Writer` pair may not be available forever if the body is being written across task boundaries.\n\nI'm not convinced that there is actually a use case for multiple, non-overwriting, calls to `serve`. Should you really want to do that you could store a `Stream` in alloy and just do self.body = alloy.find... etc. in an exit Middleware.\n",
        "created_at": "2014-07-25T21:35:33Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15425808",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15425808"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15425808"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15429373",
        "pull_request_review_id": null,
        "id": 15429373,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI5Mzcz",
        "diff_hunk": "@@ -1,36 +1,44 @@\n //! An alias of the rust-http Request struct.\n \n+use std::io::net::ip::SocketAddr;\n use http::server::request::{AbsolutePath};\n-pub use Request = http::server::request::Request;\n+use http::headers::request::HeaderCollection;\n+use http::method::Method;\n+pub use HttpRequest = http::server::request::Request;\n \n-/// Adds a url getter method.\n-pub trait GetUrl {\n-    /// A url getter method for requests or responses.\n-    fn url<'a>(&'a self) -> Option<&'a String>;\n+/// The `Request` given to all `Middleware`\n+pub struct Request {\n+    /// The request's requested url.\n+    pub url: String,",
        "path": "src/request.rs",
        "position": null,
        "original_position": 17,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1:\n",
        "created_at": "2014-07-25T23:28:50Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15429373",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15429373"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15429373"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15429393",
        "pull_request_review_id": null,
        "id": 15429393,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDI5Mzkz",
        "diff_hunk": "@@ -1,45 +1,93 @@\n //! An augmentation of the rust-http Response struct.\n \n-use std::io::{IoResult, File};\n-use std::io::util::copy;\n+use std::io::{IoResult, File, MemReader};\n use std::path::BytesContainer;\n \n-use http::status::Status;\n+use http::status::{Status, InternalServerError};\n+use http::headers::response::HeaderCollection;\n \n-pub use Response = http::server::response::ResponseWriter;\n+pub use HttpResponse = http::server::response::ResponseWriter;\n \n use contenttype::get_content_type;\n \n-/// Adds common serving methods to Response.\n-pub trait Serve: Writer {\n-    /// Serve the file located at `path`.\n+/// The response representation given to `Middleware`\n+pub struct Response<'a, 'b> {\n+    http_res: &'a mut HttpResponse<'b>,\n+\n+    /// The body of the response.\n     ///\n-    /// This is usually a terminal process, and `Middleware` may want to\n-    /// call `Unwind` after a file is served. If the status should be\n-    /// anything other than `200`, the `Middleware` must set it, including in\n-    /// the case of an `Err`.\n+    /// This is a Reader for generality, most data should\n+    /// be sent using either `serve` or `serve_file`.\n     ///\n-    /// `serve_file` will err out if the file does not exist, the process\n-    /// does not have correct permissions, or it has other issues in reading\n-    /// from the file. Middleware should handle this gracefully.\n-    fn serve_file(&mut self, &Path) -> IoResult<()>;\n+    /// Arbitrary Readers can be sent by assigning to body.\n+    pub body: Box<Reader>,\n \n-    /// Write the `Status` and data to the `Response`.\n-    ///\n-    /// `serve` will forward write errors to its caller.\n-    fn serve<S: BytesContainer>(&mut self, status: Status, body: S) -> IoResult<()>;\n+    /// The headers of the response.\n+    pub headers: Box<HeaderCollection>,\n+\n+    /// The response status-code.\n+    pub status: Status\n }\n \n-impl<'a> Serve for Response<'a> {\n-    fn serve_file(&mut self, path: &Path) -> IoResult<()> {\n-        let mut file = try!(File::open(path));\n-        self.headers.content_type = path.extension_str().and_then(get_content_type);\n-        copy(&mut file, self)\n+impl<'a, 'b> Response<'a, 'b> {\n+    /// Construct a Response from an HttpResponse reference\n+    pub fn from_http(http_res: &'a mut HttpResponse<'b>) -> Response<'a, 'b> {\n+        Response {\n+            headers: http_res.headers.clone(),\n+            status: http_res.status.clone(),",
        "path": "src/response.rs",
        "position": null,
        "original_position": 61,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Just a reminder to remove the logic in the `StackChain`, as per #112 \n",
        "created_at": "2014-07-25T23:29:36Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15429393",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15429393"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15429393"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/15432414",
        "pull_request_review_id": null,
        "id": 15432414,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDMyNDE0",
        "diff_hunk": "@@ -1,36 +1,44 @@\n //! An alias of the rust-http Request struct.\n \n+use std::io::net::ip::SocketAddr;\n use http::server::request::{AbsolutePath};\n-pub use Request = http::server::request::Request;\n+use http::headers::request::HeaderCollection;\n+use http::method::Method;\n+pub use HttpRequest = http::server::request::Request;\n \n-/// Adds a url getter method.\n-pub trait GetUrl {\n-    /// A url getter method for requests or responses.\n-    fn url<'a>(&'a self) -> Option<&'a String>;\n+/// The `Request` given to all `Middleware`\n+pub struct Request {\n+    /// The request's requested url.\n+    pub url: String,",
        "path": "src/request.rs",
        "position": null,
        "original_position": 17,
        "commit_id": "6c5059ea0a55fcc4e4087a7f46d541b0cef3dd56",
        "original_commit_id": "dac3a5597d76399c4d82e51670b2267827db8f09",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "On second note, this is impossible, as you can't store an immutable borrow to the url field with no guarantee about how long the url field will last (it could be changed or dropped and replace at any time, making original_url a null pointer), so this can't be done.\n",
        "created_at": "2014-07-26T06:15:37Z",
        "updated_at": "2014-07-26T06:23:47Z",
        "html_url": "https://github.com/iron/iron/pull/109#discussion_r15432414",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/109",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/15432414"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/109#discussion_r15432414"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/109"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16223515",
        "pull_request_review_id": null,
        "id": 16223515,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjIzNTE1",
        "diff_hunk": "@@ -0,0 +1,141 @@\n+//! HTTP/HTTPS URL type for Iron.\n+//! This module is renamed to `iron::custom_url` in `lib.rs` to avoid conflicts with the URL crate.\n+\n+use url;\n+use url::{Host, RelativeSchemeData,};\n+use url::{whatwg_scheme_type_mapper, RelativeScheme};\n+\n+/// HTTP/HTTPS URL type for Iron.\n+#[deriving(PartialEq, Eq, Clone)]\n+pub struct Url {\n+    /// The lower-cased scheme of the URL, typically \"http\" or \"https\".\n+    pub scheme: String,\n+\n+    /// The host field of the URL, probably a domain.\n+    pub host: Host,\n+\n+    /// The connection port.\n+    pub port: u16,\n+\n+    /// The URL path, the resource to be accessed.\n+    ///\n+    /// A *non-empty* vector encoding the parts of the URL path.\n+    /// Empty entries of `\"\"` correspond to trailing slashes.\n+    pub path: Vec<String>,\n+\n+    /// The URL username field, from the userinfo section of the URL.\n+    ///\n+    /// `None` if the `@` character was not part of the input OR\n+    /// if a blank username was provided.\n+    /// Otherwise, a non-empty string.\n+    pub username: Option<String>,\n+\n+    /// The URL password field, from the userinfo section of the URL.\n+    ///\n+    /// `None` if the `@` character was not part of the input OR\n+    /// if a blank password was provided.\n+    /// Otherwise, a non-empty string.\n+    pub password: Option<String>,\n+\n+    /// The URL query string.\n+    ///\n+    /// `None` if the `?` character was not part of the input.\n+    /// Otherwise, a possibly empty, percent encoded string.\n+    pub query: Option<String>,\n+\n+    /// The URL fragment.\n+    ///\n+    /// `None` if the `#` character was not part of the input.\n+    /// Otherwise, a possibly empty, percent encoded string.\n+    pub fragment: Option<String>\n+}\n+\n+impl Url {\n+    /// Create a URL from a string.\n+    ///\n+    /// The input must be a valid URL in a relative scheme for this to succeed.<br>",
        "path": "src/url.rs",
        "position": null,
        "original_position": 56,
        "commit_id": "d939458101b73d0ec670bb5d027cad40a402c715",
        "original_commit_id": "2bda3354b99a6f193c4d2d33891d3ff09472b26c",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "A blank line will give you the formatting you are looking for.\n",
        "created_at": "2014-08-14T06:55:58Z",
        "updated_at": "2014-08-14T07:22:33Z",
        "html_url": "https://github.com/iron/iron/pull/132#discussion_r16223515",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/132",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16223515"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/132#discussion_r16223515"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/132"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16513648",
        "pull_request_review_id": null,
        "id": 16513648,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTEzNjQ4",
        "diff_hunk": "@@ -68,13 +70,14 @@ pub use middleware::{Middleware, Status, Continue, Unwind, Error, FromFn};\n pub use chain::Chain;\n pub use chain::stackchain::StackChain;\n \n-pub use anymap::AnyMap;",
        "path": "src/lib.rs",
        "position": 15,
        "original_position": 15,
        "commit_id": "7375bf225f9319bf797c937c296d6287d918520f",
        "original_commit_id": "41679e27dab65d6ec8af532506f01241e6e21c1d",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should still export TypeMap.\n",
        "created_at": "2014-08-20T23:52:37Z",
        "updated_at": "2014-08-21T00:10:58Z",
        "html_url": "https://github.com/iron/iron/pull/144#discussion_r16513648",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/144",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16513648"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/144#discussion_r16513648"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/144"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16513673",
        "pull_request_review_id": null,
        "id": 16513673,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTEzNjcz",
        "diff_hunk": "@@ -33,7 +34,7 @@ pub struct Request {\n     pub method: Method,\n \n     /// Extensible storage for data passed between middleware.\n-    pub extensions: AnyMap\n+    extensions: TypeMap",
        "path": "src/request.rs",
        "position": null,
        "original_position": 24,
        "commit_id": "7375bf225f9319bf797c937c296d6287d918520f",
        "original_commit_id": "41679e27dab65d6ec8af532506f01241e6e21c1d",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should be pub so you don't need the Extensible trait to access it + so you can construct Request outside of this module.\n",
        "created_at": "2014-08-20T23:53:18Z",
        "updated_at": "2014-08-21T00:10:58Z",
        "html_url": "https://github.com/iron/iron/pull/144#discussion_r16513673",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/144",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16513673"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/144#discussion_r16513673"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/144"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16513688",
        "pull_request_review_id": null,
        "id": 16513688,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTEzNjg4",
        "diff_hunk": "@@ -29,9 +30,9 @@ pub struct Response {\n     /// The response status-code.\n     pub status: Option<Status>,\n \n-    /// An AnyMap to be used as an extensible storage for data\n+    /// A TypeMap to be used as an extensible storage for data\n     /// associated with this Response.\n-    pub extensions: AnyMap\n+    extensions: TypeMap",
        "path": "src/response.rs",
        "position": null,
        "original_position": 18,
        "commit_id": "7375bf225f9319bf797c937c296d6287d918520f",
        "original_commit_id": "41679e27dab65d6ec8af532506f01241e6e21c1d",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same comment here\n",
        "created_at": "2014-08-20T23:53:42Z",
        "updated_at": "2014-08-21T00:10:58Z",
        "html_url": "https://github.com/iron/iron/pull/144#discussion_r16513688",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/144",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16513688"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/144#discussion_r16513688"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/144"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16514145",
        "pull_request_review_id": null,
        "id": 16514145,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTE0MTQ1",
        "diff_hunk": "@@ -68,13 +70,14 @@ pub use middleware::{Middleware, Status, Continue, Unwind, Error, FromFn};\n pub use chain::Chain;\n pub use chain::stackchain::StackChain;\n \n-pub use anymap::AnyMap;",
        "path": "src/lib.rs",
        "position": 15,
        "original_position": 15,
        "commit_id": "7375bf225f9319bf797c937c296d6287d918520f",
        "original_commit_id": "41679e27dab65d6ec8af532506f01241e6e21c1d",
        "user": {
            "login": "michaelsproul",
            "id": 4452260,
            "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4452260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelsproul",
            "html_url": "https://github.com/michaelsproul",
            "followers_url": "https://api.github.com/users/michaelsproul/followers",
            "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
            "repos_url": "https://api.github.com/users/michaelsproul/repos",
            "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should we also export `Assoc`? I suppose most of the time you'll be using plugins, not creating them, so the asymmetry is ok?\n",
        "created_at": "2014-08-21T00:07:21Z",
        "updated_at": "2014-08-21T00:10:58Z",
        "html_url": "https://github.com/iron/iron/pull/144#discussion_r16514145",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/144",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16514145"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/144#discussion_r16514145"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/144"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633091",
        "pull_request_review_id": null,
        "id": 16633091,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMDkx",
        "diff_hunk": "@@ -4,10 +4,17 @@ extern crate iron;\n \n use std::io::net::ip::Ipv4Addr;\n \n-use iron::{Iron, Server};\n+use iron::{Iron, Request, Response, IronResult};\n+use iron::status;",
        "path": "examples/404.rs",
        "position": 6,
        "original_position": 6,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do you have a reason for not combining L7 + L8? If it is to separate `Traits` and `enum`, :+1: \n",
        "created_at": "2014-08-23T22:44:05Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633091",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633091"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633091"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633094",
        "pull_request_review_id": null,
        "id": 16633094,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMDk0",
        "diff_hunk": "@@ -4,10 +4,17 @@ extern crate iron;\n \n use std::io::net::ip::Ipv4Addr;\n \n-use iron::{Iron, Server};\n+use iron::{Iron, Request, Response, IronResult};\n+use iron::status;\n+\n+fn fourzerofour(_: &mut Request) -> IronResult<Response> {\n+    let mut res = Response::new();\n+    res.status = Some(status::NotFound);\n+    Ok(res)\n+}\n \n fn main() {\n-    let server: Server = Iron::new();\n-    server.listen(Ipv4Addr(127, 0, 0, 1), 3000);\n+    Iron::new(fourzerofour).listen(Ipv4Addr(127, 0, 0, 1), 3000);\n+    println!(\"On 3k\");",
        "path": "examples/404.rs",
        "position": null,
        "original_position": 18,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/k/000\n",
        "created_at": "2014-08-23T22:44:47Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633094",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633094"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633094"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633097",
        "pull_request_review_id": null,
        "id": 16633097,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMDk3",
        "diff_hunk": "@@ -4,10 +4,17 @@ extern crate iron;\n \n use std::io::net::ip::Ipv4Addr;",
        "path": "examples/404.rs",
        "position": 2,
        "original_position": 2,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why don't we reexport this to make is easier?\n",
        "created_at": "2014-08-23T22:45:21Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633097",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633097"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633097"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633114",
        "pull_request_review_id": null,
        "id": 16633114,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMTE0",
        "diff_hunk": "@@ -4,11 +4,7 @@\n #![license = \"MIT\"]\n \n #![deny(missing_doc)]\n-#![deny(unused_result)]\n-#![deny(unnecessary_qualification)]\n-#![deny(non_camel_case_types)]\n-#![deny(unused_variable)]\n-#![deny(unnecessary_typecast)]\n+#![deny(warnings)]\n \n #![feature(macro_rules, phase, globs)]\n //! The main crate for the Iron library.",
        "path": "src/lib.rs",
        "position": 12,
        "original_position": 12,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is the example below this still up-to-date?\nThis should not be merged with bad docs - prefer no example to outdated examples.\n",
        "created_at": "2014-08-23T22:48:34Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633114",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633114"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633114"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633126",
        "pull_request_review_id": null,
        "id": 16633126,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMTI2",
        "diff_hunk": "@@ -47,39 +43,50 @@\n //! // ...\n //! ```\n \n+// Stdlib dependencies\n extern crate regex;\n #[phase(plugin)] extern crate regex_macros;\n #[phase(plugin, link)] extern crate log;\n+#[cfg(test)] extern crate test;\n \n+// Third party packages\n extern crate contenttype;\n extern crate http;\n extern crate typemap;\n extern crate plugin;\n-\n-// Rename the URL crate to avoid clashes with the `url` module.\n+extern crate error;\n extern crate rust_url = \"url\";\n-#[cfg(test)]\n-extern crate test;\n \n-pub use request::Request;\n+// Request + Response\n+pub use request::{Request, Url};\n pub use response::Response;\n \n-pub use iron::{Iron, Server};\n-pub use middleware::{Middleware, Status, Continue, Unwind, Error, FromFn};\n-\n-pub use chain::Chain;\n-pub use chain::stackchain::StackChain;\n+// Middleware system\n+pub use middleware::{BeforeMiddleware, AfterMiddleware, AroundMiddleware,\n+                     Handler, Chain, ChainBuilder};\n \n-pub use url::Url;\n+// Server\n+pub use iron::Iron;\n \n+// Extensions\n pub use typemap::TypeMap;\n \n+// Status codes and Methods.",
        "path": "src/lib.rs",
        "position": 93,
        "original_position": 56,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you also reexport the IpV4 address here?\n",
        "created_at": "2014-08-23T22:50:19Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633126",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633126"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633126"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633137",
        "pull_request_review_id": null,
        "id": 16633137,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMTM3",
        "diff_hunk": "@@ -47,39 +43,50 @@\n //! // ...\n //! ```\n \n+// Stdlib dependencies\n extern crate regex;\n #[phase(plugin)] extern crate regex_macros;\n #[phase(plugin, link)] extern crate log;\n+#[cfg(test)] extern crate test;\n \n+// Third party packages\n extern crate contenttype;\n extern crate http;\n extern crate typemap;\n extern crate plugin;\n-\n-// Rename the URL crate to avoid clashes with the `url` module.\n+extern crate error;\n extern crate rust_url = \"url\";\n-#[cfg(test)]\n-extern crate test;\n \n-pub use request::Request;\n+// Request + Response\n+pub use request::{Request, Url};\n pub use response::Response;\n \n-pub use iron::{Iron, Server};\n-pub use middleware::{Middleware, Status, Continue, Unwind, Error, FromFn};\n-\n-pub use chain::Chain;\n-pub use chain::stackchain::StackChain;\n+// Middleware system\n+pub use middleware::{BeforeMiddleware, AfterMiddleware, AroundMiddleware,\n+                     Handler, Chain, ChainBuilder};\n \n-pub use url::Url;\n+// Server\n+pub use iron::Iron;\n \n+// Extensions\n pub use typemap::TypeMap;\n \n+// Status codes and Methods.\n+pub use http::status;\n+pub use http::method;\n+\n // Expose `GetCached` as `Plugin` so users can do `use iron::Plugin`.",
        "path": "src/lib.rs",
        "position": 97,
        "original_position": 60,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is the only reexport that is explained. Does it need that comment?\n",
        "created_at": "2014-08-23T22:51:21Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633137",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633137"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633137"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633168",
        "pull_request_review_id": null,
        "id": 16633168,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMTY4",
        "diff_hunk": "@@ -2,79 +2,71 @@\n //! `Iron` library.\n \n use std::io::net::ip::{SocketAddr, IpAddr};\n-use std::cell::RefCell;\n+use std::sync::Arc;\n \n use http::server as http;\n-use super::chain::Chain;\n-use super::chain::stackchain::StackChain;\n+use super::{Request, Handler};\n+use super::status;\n \n-use super::response::{HttpResponse, Response};\n-use super::request::{HttpRequest, Request};\n-\n-/// The \"default server\", using a `StackChain`.\n-pub type Server = Iron<StackChain>;\n+use super::response::HttpResponse;\n+use super::request::HttpRequest;\n \n /// The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n ///\n-/// The server can be made with a specific `Chain` (using `from_chain`)\n-/// or with a new `Chain` (using `new`). `Iron` is used to manage the server\n-/// processes:\n-/// `Iron.chain.link` is used to add new `Middleware`, and\n-/// `Iron.listen` is used to kick off a server process.\n-///\n-/// `Iron` contains the `Chain` which holds the `Middleware` necessary to run a server.\n-/// `Iron` is the main interface to adding `Middleware`, and has `Chain` as a\n-/// public field (for the sake of extensibility).\n-pub struct Iron<C> {\n-    /// Add `Middleware` to the `Iron's` `chain` so that requests\n-    /// are passed through those `Middleware`.\n-    /// `Middleware` is added to the chain with with `chain.link`.\n-    pub chain: C,\n+/// `Iron` contains the `Handler` which takes a `Request` and produces a\n+/// `Response`.\n+pub struct Iron<H> {\n+    /// Iron contains a Handler, which it uses to create responses for client\n+    /// requests.\n+    pub handler: H,\n }\n \n // The struct which actually listens and serves requests.\n-//\n-// IronListener holds its chain behind a RefCell to avoid a\n-// second clone in the implementation of .serve_forever().\n-#[deriving(Clone)]\n-struct IronListener<C> {\n-    chain: RefCell<C>,\n+struct IronListener<H> {\n+    handler: Arc<H>,\n     ip: IpAddr,\n     port: u16\n }\n \n-impl<C: Chain> Iron<C> {\n+impl<H: Send + Sync> Clone for IronListener<H> {\n+    fn clone(&self) -> IronListener<H> {\n+        IronListener {\n+            // Just increment a reference count.",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 62,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I know it is defined as an Arc immediately prior, but this comment is incomplete - I think it should say `Just increment the reference count on the Arc` or similar to make it clear.\n\nThis will only serve to make the code more readable for newcomers.\n",
        "created_at": "2014-08-23T22:57:18Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633168",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633168"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633168"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633173",
        "pull_request_review_id": null,
        "id": 16633173,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMTcz",
        "diff_hunk": "@@ -47,39 +43,50 @@\n //! // ...\n //! ```\n \n+// Stdlib dependencies\n extern crate regex;\n #[phase(plugin)] extern crate regex_macros;\n #[phase(plugin, link)] extern crate log;\n+#[cfg(test)] extern crate test;\n \n+// Third party packages\n extern crate contenttype;\n extern crate http;\n extern crate typemap;\n extern crate plugin;\n-\n-// Rename the URL crate to avoid clashes with the `url` module.\n+extern crate error;\n extern crate rust_url = \"url\";\n-#[cfg(test)]\n-extern crate test;\n \n-pub use request::Request;\n+// Request + Response\n+pub use request::{Request, Url};\n pub use response::Response;\n \n-pub use iron::{Iron, Server};\n-pub use middleware::{Middleware, Status, Continue, Unwind, Error, FromFn};\n-\n-pub use chain::Chain;\n-pub use chain::stackchain::StackChain;\n+// Middleware system\n+pub use middleware::{BeforeMiddleware, AfterMiddleware, AroundMiddleware,\n+                     Handler, Chain, ChainBuilder};\n \n-pub use url::Url;\n+// Server\n+pub use iron::Iron;\n \n+// Extensions\n pub use typemap::TypeMap;\n \n+// Status codes and Methods.\n+pub use http::status;\n+pub use http::method;\n+\n // Expose `GetCached` as `Plugin` so users can do `use iron::Plugin`.",
        "path": "src/lib.rs",
        "position": 97,
        "original_position": 60,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes because it is the only one with a rename.\n",
        "created_at": "2014-08-23T22:58:21Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633173",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633173"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633173"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633174",
        "pull_request_review_id": null,
        "id": 16633174,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMTc0",
        "diff_hunk": "@@ -2,79 +2,71 @@\n //! `Iron` library.\n \n use std::io::net::ip::{SocketAddr, IpAddr};\n-use std::cell::RefCell;\n+use std::sync::Arc;\n \n use http::server as http;\n-use super::chain::Chain;\n-use super::chain::stackchain::StackChain;\n+use super::{Request, Handler};\n+use super::status;\n \n-use super::response::{HttpResponse, Response};\n-use super::request::{HttpRequest, Request};\n-\n-/// The \"default server\", using a `StackChain`.\n-pub type Server = Iron<StackChain>;\n+use super::response::HttpResponse;\n+use super::request::HttpRequest;\n \n /// The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n ///\n-/// The server can be made with a specific `Chain` (using `from_chain`)\n-/// or with a new `Chain` (using `new`). `Iron` is used to manage the server\n-/// processes:\n-/// `Iron.chain.link` is used to add new `Middleware`, and\n-/// `Iron.listen` is used to kick off a server process.\n-///\n-/// `Iron` contains the `Chain` which holds the `Middleware` necessary to run a server.\n-/// `Iron` is the main interface to adding `Middleware`, and has `Chain` as a\n-/// public field (for the sake of extensibility).\n-pub struct Iron<C> {\n-    /// Add `Middleware` to the `Iron's` `chain` so that requests\n-    /// are passed through those `Middleware`.\n-    /// `Middleware` is added to the chain with with `chain.link`.\n-    pub chain: C,\n+/// `Iron` contains the `Handler` which takes a `Request` and produces a\n+/// `Response`.\n+pub struct Iron<H> {\n+    /// Iron contains a Handler, which it uses to create responses for client\n+    /// requests.\n+    pub handler: H,\n }\n \n // The struct which actually listens and serves requests.\n-//\n-// IronListener holds its chain behind a RefCell to avoid a\n-// second clone in the implementation of .serve_forever().\n-#[deriving(Clone)]\n-struct IronListener<C> {\n-    chain: RefCell<C>,\n+struct IronListener<H> {\n+    handler: Arc<H>,\n     ip: IpAddr,\n     port: u16\n }\n \n-impl<C: Chain> Iron<C> {\n+impl<H: Send + Sync> Clone for IronListener<H> {\n+    fn clone(&self) -> IronListener<H> {\n+        IronListener {\n+            // Just increment a reference count.\n+            handler: self.handler.clone(),\n+            ip: self.ip.clone(),\n+            port: self.port.clone()\n+        }\n+    }\n+}\n+\n+impl<H: Handler> Iron<H> {\n     /// Kick off the server process.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This is a blocking operation, and is the final op that should be called\n-    /// on the `Iron` instance. Once `listen` is called, requests will be\n-    /// handled as defined through the `Iron's` `chain's` `Middleware`.\n+    /// This consumes the Iron instance, but does the listening on\n+    /// another task, so is not blocking.\n     pub fn listen(self, ip: IpAddr, port: u16) {\n         use http::server::Server;\n \n-        IronListener {\n-            chain: RefCell::new(self.chain),\n-            ip: ip,\n-            port: port\n-        }.serve_forever();\n+        spawn(proc() {",
        "path": "src/iron.rs",
        "position": 87,
        "original_position": 87,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: \n",
        "created_at": "2014-08-23T22:58:36Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633174",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633174"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633174"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633177",
        "pull_request_review_id": null,
        "id": 16633177,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMTc3",
        "diff_hunk": "@@ -2,79 +2,71 @@\n //! `Iron` library.\n \n use std::io::net::ip::{SocketAddr, IpAddr};\n-use std::cell::RefCell;\n+use std::sync::Arc;\n \n use http::server as http;\n-use super::chain::Chain;\n-use super::chain::stackchain::StackChain;\n+use super::{Request, Handler};\n+use super::status;\n \n-use super::response::{HttpResponse, Response};\n-use super::request::{HttpRequest, Request};\n-\n-/// The \"default server\", using a `StackChain`.\n-pub type Server = Iron<StackChain>;\n+use super::response::HttpResponse;\n+use super::request::HttpRequest;\n \n /// The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n ///\n-/// The server can be made with a specific `Chain` (using `from_chain`)\n-/// or with a new `Chain` (using `new`). `Iron` is used to manage the server\n-/// processes:\n-/// `Iron.chain.link` is used to add new `Middleware`, and\n-/// `Iron.listen` is used to kick off a server process.\n-///\n-/// `Iron` contains the `Chain` which holds the `Middleware` necessary to run a server.\n-/// `Iron` is the main interface to adding `Middleware`, and has `Chain` as a\n-/// public field (for the sake of extensibility).\n-pub struct Iron<C> {\n-    /// Add `Middleware` to the `Iron's` `chain` so that requests\n-    /// are passed through those `Middleware`.\n-    /// `Middleware` is added to the chain with with `chain.link`.\n-    pub chain: C,\n+/// `Iron` contains the `Handler` which takes a `Request` and produces a\n+/// `Response`.\n+pub struct Iron<H> {\n+    /// Iron contains a Handler, which it uses to create responses for client\n+    /// requests.\n+    pub handler: H,\n }\n \n // The struct which actually listens and serves requests.\n-//\n-// IronListener holds its chain behind a RefCell to avoid a\n-// second clone in the implementation of .serve_forever().\n-#[deriving(Clone)]\n-struct IronListener<C> {\n-    chain: RefCell<C>,\n+struct IronListener<H> {\n+    handler: Arc<H>,\n     ip: IpAddr,\n     port: u16\n }\n \n-impl<C: Chain> Iron<C> {\n+impl<H: Send + Sync> Clone for IronListener<H> {\n+    fn clone(&self) -> IronListener<H> {\n+        IronListener {\n+            // Just increment a reference count.\n+            handler: self.handler.clone(),\n+            ip: self.ip.clone(),\n+            port: self.port.clone()\n+        }\n+    }\n+}\n+\n+impl<H: Handler> Iron<H> {\n     /// Kick off the server process.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This is a blocking operation, and is the final op that should be called\n-    /// on the `Iron` instance. Once `listen` is called, requests will be\n-    /// handled as defined through the `Iron's` `chain's` `Middleware`.\n+    /// This consumes the Iron instance, but does the listening on\n+    /// another task, so is not blocking.\n     pub fn listen(self, ip: IpAddr, port: u16) {\n         use http::server::Server;\n \n-        IronListener {\n-            chain: RefCell::new(self.chain),\n-            ip: ip,\n-            port: port\n-        }.serve_forever();\n+        spawn(proc() {\n+            IronListener {\n+                handler: Arc::new(self.handler),\n+                ip: ip,\n+                port: port\n+            }.serve_forever();\n+        });\n     }\n \n     /// Instantiate a new instance of `Iron`.\n     ///\n-    /// This will create a new `Iron`, the base unit of the server.\n-    ///\n-    /// Custom chains can be used by explicitly specifying the type as\n-    /// in: `let customServer: Iron<CustomChain> = Iron::new();`\n-    #[inline]\n-    pub fn new() -> Iron<C> {\n-        Iron {\n-            chain: Chain::new(),\n-        }\n+    /// This will create a new `Iron`, the base unit of the server, using the\n+    /// passed in Handler.",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 108,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "backticks around Handler\n",
        "created_at": "2014-08-23T22:59:06Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633177",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633177"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633177"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633182",
        "pull_request_review_id": null,
        "id": 16633182,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMTgy",
        "diff_hunk": "@@ -85,22 +77,28 @@ impl<C: Chain> http::Server for IronListener<C> {\n     }\n \n     fn handle_request(&self, http_req: HttpRequest, http_res: &mut HttpResponse) {\n-        // Create wrapper Request and Response\n+        // Create wrapper Request",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 124,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Backticks around Request. I'm not going to comment on backticks in comments after this - let me know if you want me to make a later pass for comment-format consistency.\n",
        "created_at": "2014-08-23T23:01:16Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633182",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633182"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633182"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633183",
        "pull_request_review_id": null,
        "id": 16633183,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMTgz",
        "diff_hunk": "@@ -85,22 +77,28 @@ impl<C: Chain> http::Server for IronListener<C> {\n     }\n \n     fn handle_request(&self, http_req: HttpRequest, http_res: &mut HttpResponse) {\n-        // Create wrapper Request and Response\n+        // Create wrapper Request",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 124,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also, might be clearer (_and less passive_) as `// Wrap the HttpRequest`\n",
        "created_at": "2014-08-23T23:02:44Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633183",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633183"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633183"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633194",
        "pull_request_review_id": null,
        "id": 16633194,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMTk0",
        "diff_hunk": "@@ -85,22 +77,28 @@ impl<C: Chain> http::Server for IronListener<C> {\n     }\n \n     fn handle_request(&self, http_req: HttpRequest, http_res: &mut HttpResponse) {\n-        // Create wrapper Request and Response\n+        // Create wrapper Request\n         let mut req = match Request::from_http(http_req) {\n             Ok(req) => req,\n             Err(e) => {\n                 error!(\"Error getting request: {}\", e);\n-                http_res.status = ::http::status::InternalServerError;\n+                http_res.status = status::InternalServerError;\n                 let _ = http_res.write(b\"Internal Server Error\");\n                 return;\n             }\n         };\n-        let mut res = Response::from_http(http_res);\n \n         // Dispatch the request\n-        let _ = self.chain.borrow_mut().dispatch(&mut req, &mut res);\n+        let res = self.handler.call(&mut req);\n \n-        // Write the response back to http_res\n-        res.write_back(http_res);\n+        match res {\n+            // Write the response back to http_res\n+            Ok(res) => res.write_back(http_res),\n+            Err(e) => {\n+                error!(\"Error handling {}: {}\", req, e);",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 147,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is this more of an `Error writing response to {}: {}`?\n\nAlso, what does `req` show as?\n",
        "created_at": "2014-08-23T23:05:08Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633194",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633194"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633194"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633220",
        "pull_request_review_id": null,
        "id": 16633220,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjIw",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by",
        "path": "src/middleware.rs",
        "position": 1,
        "original_position": 1,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why are the module comments excluded (I'm assuming you removed them elsewhere, but I'll only comment here)?\n",
        "created_at": "2014-08-23T23:09:56Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633220",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633220"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633220"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633230",
        "pull_request_review_id": null,
        "id": 16633230,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjMw",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by",
        "path": "src/middleware.rs",
        "position": 1,
        "original_position": 1,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Readers might benefit from a high-level overview before reading some of this documentation. I think you already mentioned diagrams as a solution - separate PR.\n",
        "created_at": "2014-08-23T23:14:26Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633230",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633230"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633230"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633235",
        "pull_request_review_id": null,
        "id": 16633235,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjM1",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 55,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "...and this will affect the AfterMiddleware?\n",
        "created_at": "2014-08-23T23:15:18Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633235",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633235"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633235"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633240",
        "pull_request_review_id": null,
        "id": 16633240,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjQw",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 67,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Authorization may not be the best example, as it will usually need to set a cookie in the response. It should probably be considered AroundMiddleware.\n",
        "created_at": "2014-08-23T23:17:04Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633240",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633240"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633240"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633243",
        "pull_request_review_id": null,
        "id": 16633243,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjQz",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 101,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> response post-processing.\n\nTwo words.\n",
        "created_at": "2014-08-23T23:18:40Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633243",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633243"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633243"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633247",
        "pull_request_review_id": null,
        "id": 16633247,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjQ3",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 118,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The first sentence seems unnecessary.\n",
        "created_at": "2014-08-23T23:19:13Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633247",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633247"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633247"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633253",
        "pull_request_review_id": null,
        "id": 16633253,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjUz",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 152,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The error could have been raised by a prior AfterMiddleware. This line is false.\n",
        "created_at": "2014-08-23T23:21:13Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633253",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633253"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633253"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633269",
        "pull_request_review_id": null,
        "id": 16633269,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjY5",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 215,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "<s>However</s>\n",
        "created_at": "2014-08-23T23:26:23Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633269",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633269"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633269"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633271",
        "pull_request_review_id": null,
        "id": 16633271,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjcx",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 251,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If `link` was implemented with a tuple of options, `link_before` and `link_after` could delegate to it with default methods, leaving less to the implementation of `IronChain`.\n",
        "created_at": "2014-08-23T23:28:27Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633271",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633271"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633271"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633273",
        "pull_request_review_id": null,
        "id": 16633273,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjcz",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);\n+        around.around(old);\n+        self.handler = box around as Box<Handler + Send + Sync>;\n+    }\n }\n \n-impl FromFn {\n-    /// Constructs a new FromFn given a fn of the correct signature.\n-    pub fn new(func: fn(&mut Request, &mut Response) -> Status) -> FromFn {\n-        FromFn {\n-            func: func\n+impl Handler for ChainBuilder {\n+    fn call(&self, req: &mut Request) -> IronResult<Response> {\n+        let before_result = helpers::run_befores(req, self.befores.as_slice(), None);\n+\n+        let (res, err) = match before_result {\n+            Ok(()) => match self.handler.call(req) {\n+                Ok(res) => (res, None),\n+                Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+            },\n+            Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+        };\n+\n+        helpers::run_afters(req, res, err, self.afters.as_slice())\n+    }\n+\n+    fn catch(&self, req: &mut Request, err: Box<Error>) -> (Response, IronResult<()>) {\n+        let before_result = helpers::run_befores(req, self.befores.as_slice(), Some(err));\n+\n+        let (res, err) = match before_result {\n+            Ok(()) => match self.handler.call(req) {\n+                Ok(res) => (res, None),\n+                Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+            },\n+            Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+        };\n+\n+        match helpers::run_afters(req, res, err, self.afters.as_slice()) {\n+            Ok(res) => (res, Ok(())),\n+            // FIXME: Make 500\n+            Err(err) => (Response::new(), Err(err))\n         }\n     }\n }\n \n-impl Clone for FromFn {\n-    fn clone(&self) -> FromFn {\n-        FromFn {\n-            func: self.func\n-        }\n+impl Handler for fn(&mut Request) -> IronResult<Response> {\n+    fn call(&self, req: &mut Request) -> IronResult<Response> {\n+        (*self)(req)\n+    }\n+\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> (Response, IronResult<()>) {\n+        // FIXME: Make Response a 500",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 342,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "?\n",
        "created_at": "2014-08-23T23:29:40Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633273",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633273"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633273"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633274",
        "pull_request_review_id": null,
        "id": 16633274,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjc0",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);\n+        around.around(old);\n+        self.handler = box around as Box<Handler + Send + Sync>;\n+    }\n }\n \n-impl FromFn {\n-    /// Constructs a new FromFn given a fn of the correct signature.\n-    pub fn new(func: fn(&mut Request, &mut Response) -> Status) -> FromFn {\n-        FromFn {\n-            func: func\n+impl Handler for ChainBuilder {\n+    fn call(&self, req: &mut Request) -> IronResult<Response> {\n+        let before_result = helpers::run_befores(req, self.befores.as_slice(), None);\n+\n+        let (res, err) = match before_result {\n+            Ok(()) => match self.handler.call(req) {\n+                Ok(res) => (res, None),\n+                Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+            },\n+            Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+        };\n+\n+        helpers::run_afters(req, res, err, self.afters.as_slice())\n+    }\n+\n+    fn catch(&self, req: &mut Request, err: Box<Error>) -> (Response, IronResult<()>) {\n+        let before_result = helpers::run_befores(req, self.befores.as_slice(), Some(err));\n+\n+        let (res, err) = match before_result {\n+            Ok(()) => match self.handler.call(req) {\n+                Ok(res) => (res, None),\n+                Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+            },\n+            Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+        };\n+\n+        match helpers::run_afters(req, res, err, self.afters.as_slice()) {\n+            Ok(res) => (res, Ok(())),\n+            // FIXME: Make 500\n+            Err(err) => (Response::new(), Err(err))\n         }\n     }\n }\n \n-impl Clone for FromFn {\n-    fn clone(&self) -> FromFn {\n-        FromFn {\n-            func: self.func\n-        }\n+impl Handler for fn(&mut Request) -> IronResult<Response> {\n+    fn call(&self, req: &mut Request) -> IronResult<Response> {\n+        (*self)(req)\n+    }\n+\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> (Response, IronResult<()>) {\n+        // FIXME: Make Response a 500\n+        (Response::new(), Err(err))\n+    }\n+}\n+\n+pub struct Nop;",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 347,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is this meant as a no-op? If so, can you rename it to `Noop`?\n",
        "created_at": "2014-08-23T23:30:11Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633274",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633274"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633274"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633275",
        "pull_request_review_id": null,
        "id": 16633275,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjc1",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);\n+        around.around(old);\n+        self.handler = box around as Box<Handler + Send + Sync>;\n+    }\n }\n \n-impl FromFn {\n-    /// Constructs a new FromFn given a fn of the correct signature.\n-    pub fn new(func: fn(&mut Request, &mut Response) -> Status) -> FromFn {\n-        FromFn {\n-            func: func\n+impl Handler for ChainBuilder {\n+    fn call(&self, req: &mut Request) -> IronResult<Response> {\n+        let before_result = helpers::run_befores(req, self.befores.as_slice(), None);\n+\n+        let (res, err) = match before_result {\n+            Ok(()) => match self.handler.call(req) {\n+                Ok(res) => (res, None),\n+                Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+            },\n+            Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+        };\n+\n+        helpers::run_afters(req, res, err, self.afters.as_slice())\n+    }\n+\n+    fn catch(&self, req: &mut Request, err: Box<Error>) -> (Response, IronResult<()>) {\n+        let before_result = helpers::run_befores(req, self.befores.as_slice(), Some(err));\n+\n+        let (res, err) = match before_result {\n+            Ok(()) => match self.handler.call(req) {\n+                Ok(res) => (res, None),\n+                Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+            },\n+            Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+        };\n+\n+        match helpers::run_afters(req, res, err, self.afters.as_slice()) {\n+            Ok(res) => (res, Ok(())),\n+            // FIXME: Make 500",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 325,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "? All these FIXMEs?\n",
        "created_at": "2014-08-23T23:30:40Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633275",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633275"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633275"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633281",
        "pull_request_review_id": null,
        "id": 16633281,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjgx",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);\n+        around.around(old);\n+        self.handler = box around as Box<Handler + Send + Sync>;",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 288,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is there any difference functionally between `around` and `link`? I understand the semantic difference. It looks like `around` may also be able to write to `Response` at any point.\n",
        "created_at": "2014-08-23T23:33:24Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633281",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633281"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633281"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633284",
        "pull_request_review_id": null,
        "id": 16633284,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjg0",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);",
        "path": "src/middleware.rs",
        "position": 327,
        "original_position": 286,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is `Nop` here to reduce copies?\n",
        "created_at": "2014-08-23T23:33:52Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633284",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633284"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633284"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633288",
        "pull_request_review_id": null,
        "id": 16633288,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjg4",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);",
        "path": "src/middleware.rs",
        "position": 327,
        "original_position": 286,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's to avoid `Option::unwrap` or `unsafe` anywhere in the codebase. (we have 0 of both outside of tests!)\n",
        "created_at": "2014-08-23T23:35:03Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633288",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633288"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633288"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633289",
        "pull_request_review_id": null,
        "id": 16633289,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjg5",
        "diff_hunk": "@@ -86,7 +86,11 @@ impl Response {\n         let mut body = self.body.unwrap_or_else(|| box MemReader::new(vec![]) as Box<Reader>);\n         let _ = match body.read_to_end() {\n             Ok(body_content) => {\n-                let plain_txt: MediaType = get_content_type(\"txt\").unwrap();\n+                let plain_txt = MediaType {",
        "path": "src/response.rs",
        "position": 73,
        "original_position": 19,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1:\n",
        "created_at": "2014-08-23T23:35:08Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633289",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633289"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633289"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633294",
        "pull_request_review_id": null,
        "id": 16633294,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMjk0",
        "diff_hunk": "@@ -85,22 +77,28 @@ impl<C: Chain> http::Server for IronListener<C> {\n     }\n \n     fn handle_request(&self, http_req: HttpRequest, http_res: &mut HttpResponse) {\n-        // Create wrapper Request and Response\n+        // Create wrapper Request\n         let mut req = match Request::from_http(http_req) {\n             Ok(req) => req,\n             Err(e) => {\n                 error!(\"Error getting request: {}\", e);\n-                http_res.status = ::http::status::InternalServerError;\n+                http_res.status = status::InternalServerError;\n                 let _ = http_res.write(b\"Internal Server Error\");\n                 return;\n             }\n         };\n-        let mut res = Response::from_http(http_res);\n \n         // Dispatch the request\n-        let _ = self.chain.borrow_mut().dispatch(&mut req, &mut res);\n+        let res = self.handler.call(&mut req);\n \n-        // Write the response back to http_res\n-        res.write_back(http_res);\n+        match res {\n+            // Write the response back to http_res\n+            Ok(res) => res.write_back(http_res),\n+            Err(e) => {\n+                error!(\"Error handling {}: {}\", req, e);",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 147,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I saw that you `impl`ed show at the bottom of this diff.\nI think this will be hard to read, as the `impl` of show causes line breaks _before_ the colon that this literal adds.\n\nMaybe `\"Error handling {}\\n\\nError: {}\"`\n",
        "created_at": "2014-08-23T23:37:08Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633294",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633294"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633294"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633302",
        "pull_request_review_id": null,
        "id": 16633302,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMzAy",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 241,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would like to see a `new` that does not take a handler, in case basic middleware is enough to do what you want.\nIt could use `Nop` as a stand-in.\n\nExample: static fileserver.\n\nLet me know if this is a pattern you are trying to design away from.\n",
        "created_at": "2014-08-23T23:38:41Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633302",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633302"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633302"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633305",
        "pull_request_review_id": null,
        "id": 16633305,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMzA1",
        "diff_hunk": "@@ -86,7 +86,11 @@ impl Response {\n         let mut body = self.body.unwrap_or_else(|| box MemReader::new(vec![]) as Box<Reader>);\n         let _ = match body.read_to_end() {\n             Ok(body_content) => {\n-                let plain_txt: MediaType = get_content_type(\"txt\").unwrap();\n+                let plain_txt = MediaType {",
        "path": "src/response.rs",
        "position": 73,
        "original_position": 19,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This was the last `Option::unwrap` in the entire codebase.\n",
        "created_at": "2014-08-23T23:41:20Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633305",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633305"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633305"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633307",
        "pull_request_review_id": null,
        "id": 16633307,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMzA3",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);\n+        around.around(old);\n+        self.handler = box around as Box<Handler + Send + Sync>;\n+    }\n }\n \n-impl FromFn {\n-    /// Constructs a new FromFn given a fn of the correct signature.\n-    pub fn new(func: fn(&mut Request, &mut Response) -> Status) -> FromFn {\n-        FromFn {\n-            func: func\n+impl Handler for ChainBuilder {\n+    fn call(&self, req: &mut Request) -> IronResult<Response> {\n+        let before_result = helpers::run_befores(req, self.befores.as_slice(), None);\n+\n+        let (res, err) = match before_result {\n+            Ok(()) => match self.handler.call(req) {\n+                Ok(res) => (res, None),\n+                Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+            },\n+            Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+        };\n+\n+        helpers::run_afters(req, res, err, self.afters.as_slice())\n+    }\n+\n+    fn catch(&self, req: &mut Request, err: Box<Error>) -> (Response, IronResult<()>) {\n+        let before_result = helpers::run_befores(req, self.befores.as_slice(), Some(err));\n+\n+        let (res, err) = match before_result {\n+            Ok(()) => match self.handler.call(req) {\n+                Ok(res) => (res, None),\n+                Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+            },\n+            Err(e) => helpers::run_handler_catch(req, e, &self.handler)\n+        };\n+\n+        match helpers::run_afters(req, res, err, self.afters.as_slice()) {\n+            Ok(res) => (res, Ok(())),\n+            // FIXME: Make 500\n+            Err(err) => (Response::new(), Err(err))\n         }\n     }\n }\n \n-impl Clone for FromFn {\n-    fn clone(&self) -> FromFn {\n-        FromFn {\n-            func: self.func\n-        }\n+impl Handler for fn(&mut Request) -> IronResult<Response> {\n+    fn call(&self, req: &mut Request) -> IronResult<Response> {\n+        (*self)(req)\n+    }\n+\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> (Response, IronResult<()>) {\n+        // FIXME: Make Response a 500\n+        (Response::new(), Err(err))\n+    }\n+}\n+\n+pub struct Nop;",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 347,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd never seen `nop` before, but after some googling it looks standard enough.\n\nI'd prefer `noop` (because it seems more common), but I won't put up a stink.\n",
        "created_at": "2014-08-23T23:41:54Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633307",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633307"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633307"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633310",
        "pull_request_review_id": null,
        "id": 16633310,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMzEw",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 241,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "static fileserver would probably be AroundMiddleware, so it could be used as a standalone Handler if need be.\n",
        "created_at": "2014-08-23T23:42:17Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633310",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633310"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633310"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633313",
        "pull_request_review_id": null,
        "id": 16633313,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMzEz",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);",
        "path": "src/middleware.rs",
        "position": 327,
        "original_position": 286,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not sure how it avoids an `Unwrap`, I don't see an `Option`.\n",
        "created_at": "2014-08-23T23:43:35Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633313",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633313"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633313"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633323",
        "pull_request_review_id": null,
        "id": 16633323,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMzIz",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);",
        "path": "src/middleware.rs",
        "position": 327,
        "original_position": 286,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`std::mem::replace` requires substituting in a value of the same type. Without Nop, that either requires `unsafe`, so `std::mem::unitialized` or `std::ptr::read` would work, or using an `Option` and then doing `Option::unwrap` in `Handler::call` for this Chain.\n",
        "created_at": "2014-08-23T23:45:15Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633323",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633323"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633323"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633325",
        "pull_request_review_id": null,
        "id": 16633325,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMzI1",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);\n+        around.around(old);\n+        self.handler = box around as Box<Handler + Send + Sync>;",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 288,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can duplicate most of the functionality of AroundMiddleware using before and after, but it is often more elegant as AroundMiddleware as they can be used as Handlers.\n",
        "created_at": "2014-08-23T23:46:36Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633325",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633325"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633325"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633382",
        "pull_request_review_id": null,
        "id": 16633382,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMzgy",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 251,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I tried that, but you end up having to give random typehints because it leaves either A or B as free type variables, which is not allowed.\n",
        "created_at": "2014-08-24T00:02:39Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633382",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633382"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633382"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633389",
        "pull_request_review_id": null,
        "id": 16633389,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMzg5",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by",
        "path": "src/middleware.rs",
        "position": 1,
        "original_position": 1,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That seems reasonable. I'll work on it after fixing some middleware.\n",
        "created_at": "2014-08-24T00:03:19Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633389",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633389"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633389"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633392",
        "pull_request_review_id": null,
        "id": 16633392,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzMzky",
        "diff_hunk": "@@ -47,39 +43,50 @@\n //! // ...\n //! ```\n \n+// Stdlib dependencies\n extern crate regex;\n #[phase(plugin)] extern crate regex_macros;\n #[phase(plugin, link)] extern crate log;\n+#[cfg(test)] extern crate test;\n \n+// Third party packages\n extern crate contenttype;\n extern crate http;\n extern crate typemap;\n extern crate plugin;\n-\n-// Rename the URL crate to avoid clashes with the `url` module.\n+extern crate error;\n extern crate rust_url = \"url\";\n-#[cfg(test)]\n-extern crate test;\n \n-pub use request::Request;\n+// Request + Response\n+pub use request::{Request, Url};\n pub use response::Response;\n \n-pub use iron::{Iron, Server};\n-pub use middleware::{Middleware, Status, Continue, Unwind, Error, FromFn};\n-\n-pub use chain::Chain;\n-pub use chain::stackchain::StackChain;\n+// Middleware system\n+pub use middleware::{BeforeMiddleware, AfterMiddleware, AroundMiddleware,\n+                     Handler, Chain, ChainBuilder};\n \n-pub use url::Url;\n+// Server\n+pub use iron::Iron;\n \n+// Extensions\n pub use typemap::TypeMap;\n \n+// Status codes and Methods.",
        "path": "src/lib.rs",
        "position": 93,
        "original_position": 56,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's in std, so I think that's unnecessary. I re-exported all this other stuff so you don't have to add all these other modules as dependencies in your project.\n",
        "created_at": "2014-08-24T00:03:48Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633392",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633392"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633392"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633413",
        "pull_request_review_id": null,
        "id": 16633413,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDEz",
        "diff_hunk": "@@ -4,10 +4,17 @@ extern crate iron;\n \n use std::io::net::ip::Ipv4Addr;\n \n-use iron::{Iron, Server};\n+use iron::{Iron, Request, Response, IronResult};\n+use iron::status;",
        "path": "examples/404.rs",
        "position": 6,
        "original_position": 6,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's clearer to separate status so it's obvious where `status::X` came from in later code.\n",
        "created_at": "2014-08-24T00:08:25Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633413",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633413"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633413"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633414",
        "pull_request_review_id": null,
        "id": 16633414,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDE0",
        "diff_hunk": "@@ -4,11 +4,7 @@\n #![license = \"MIT\"]\n \n #![deny(missing_doc)]\n-#![deny(unused_result)]\n-#![deny(unnecessary_qualification)]\n-#![deny(non_camel_case_types)]\n-#![deny(unused_variable)]\n-#![deny(unnecessary_typecast)]\n+#![deny(warnings)]\n \n #![feature(macro_rules, phase, globs)]\n //! The main crate for the Iron library.",
        "path": "src/lib.rs",
        "position": 12,
        "original_position": 12,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It is now.\n",
        "created_at": "2014-08-24T00:08:52Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633414",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633414"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633414"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633417",
        "pull_request_review_id": null,
        "id": 16633417,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDE3",
        "diff_hunk": "@@ -2,79 +2,71 @@\n //! `Iron` library.\n \n use std::io::net::ip::{SocketAddr, IpAddr};\n-use std::cell::RefCell;\n+use std::sync::Arc;\n \n use http::server as http;\n-use super::chain::Chain;\n-use super::chain::stackchain::StackChain;\n+use super::{Request, Handler};\n+use super::status;\n \n-use super::response::{HttpResponse, Response};\n-use super::request::{HttpRequest, Request};\n-\n-/// The \"default server\", using a `StackChain`.\n-pub type Server = Iron<StackChain>;\n+use super::response::HttpResponse;\n+use super::request::HttpRequest;\n \n /// The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n ///\n-/// The server can be made with a specific `Chain` (using `from_chain`)\n-/// or with a new `Chain` (using `new`). `Iron` is used to manage the server\n-/// processes:\n-/// `Iron.chain.link` is used to add new `Middleware`, and\n-/// `Iron.listen` is used to kick off a server process.\n-///\n-/// `Iron` contains the `Chain` which holds the `Middleware` necessary to run a server.\n-/// `Iron` is the main interface to adding `Middleware`, and has `Chain` as a\n-/// public field (for the sake of extensibility).\n-pub struct Iron<C> {\n-    /// Add `Middleware` to the `Iron's` `chain` so that requests\n-    /// are passed through those `Middleware`.\n-    /// `Middleware` is added to the chain with with `chain.link`.\n-    pub chain: C,\n+/// `Iron` contains the `Handler` which takes a `Request` and produces a\n+/// `Response`.\n+pub struct Iron<H> {\n+    /// Iron contains a Handler, which it uses to create responses for client\n+    /// requests.\n+    pub handler: H,\n }\n \n // The struct which actually listens and serves requests.\n-//\n-// IronListener holds its chain behind a RefCell to avoid a\n-// second clone in the implementation of .serve_forever().\n-#[deriving(Clone)]\n-struct IronListener<C> {\n-    chain: RefCell<C>,\n+struct IronListener<H> {\n+    handler: Arc<H>,\n     ip: IpAddr,\n     port: u16\n }\n \n-impl<C: Chain> Iron<C> {\n+impl<H: Send + Sync> Clone for IronListener<H> {\n+    fn clone(&self) -> IronListener<H> {\n+        IronListener {\n+            // Just increment a reference count.",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 62,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This isn't needed. The types convey this information already.\n",
        "created_at": "2014-08-24T00:09:33Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633417",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633417"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633417"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633448",
        "pull_request_review_id": null,
        "id": 16633448,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDQ4",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 55,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not the place for this comment, as Handler is independent of Middleware.\n\nShould be explored in a module comment later.\n",
        "created_at": "2014-08-24T00:17:16Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633448",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633448"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633448"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633452",
        "pull_request_review_id": null,
        "id": 16633452,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDUy",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 67,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Middleware can be both Before and After Middleware. Authorization feels like one of those.\n",
        "created_at": "2014-08-24T00:18:16Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633452",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633452"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633452"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633453",
        "pull_request_review_id": null,
        "id": 16633453,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDUz",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 118,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's critical as this is a relatively common pattern in todays Iron.\n",
        "created_at": "2014-08-24T00:18:40Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633453",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633453"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633453"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633480",
        "pull_request_review_id": null,
        "id": 16633480,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDgw",
        "diff_hunk": "@@ -4,10 +4,17 @@ extern crate iron;\n \n use std::io::net::ip::Ipv4Addr;\n \n-use iron::{Iron, Server};\n+use iron::{Iron, Request, Response, IronResult};\n+use iron::status;",
        "path": "examples/404.rs",
        "position": 6,
        "original_position": 6,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I have no issue with this.\n",
        "created_at": "2014-08-24T00:26:33Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633480",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633480"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633480"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633486",
        "pull_request_review_id": null,
        "id": 16633486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDg2",
        "diff_hunk": "@@ -4,10 +4,17 @@ extern crate iron;\n \n use std::io::net::ip::Ipv4Addr;\n \n-use iron::{Iron, Server};\n+use iron::{Iron, Request, Response, IronResult};\n+use iron::status;\n+\n+fn fourzerofour(_: &mut Request) -> IronResult<Response> {\n+    let mut res = Response::new();\n+    res.status = Some(status::NotFound);\n+    Ok(res)\n+}\n \n fn main() {\n-    let server: Server = Iron::new();\n-    server.listen(Ipv4Addr(127, 0, 0, 1), 3000);\n+    Iron::new(fourzerofour).listen(Ipv4Addr(127, 0, 0, 1), 3000);\n+    println!(\"On 3k\");",
        "path": "examples/404.rs",
        "position": null,
        "original_position": 18,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Still weird.\n",
        "created_at": "2014-08-24T00:27:48Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633486",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633486"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633491",
        "pull_request_review_id": null,
        "id": 16633491,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDkx",
        "diff_hunk": "@@ -4,10 +4,17 @@ extern crate iron;\n \n use std::io::net::ip::Ipv4Addr;",
        "path": "examples/404.rs",
        "position": 2,
        "original_position": 2,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It is a convenience thing.\n",
        "created_at": "2014-08-24T00:28:37Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633491",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633491"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633491"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633495",
        "pull_request_review_id": null,
        "id": 16633495,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDk1",
        "diff_hunk": "@@ -47,39 +43,50 @@\n //! // ...\n //! ```\n \n+// Stdlib dependencies\n extern crate regex;\n #[phase(plugin)] extern crate regex_macros;\n #[phase(plugin, link)] extern crate log;\n+#[cfg(test)] extern crate test;\n \n+// Third party packages\n extern crate contenttype;\n extern crate http;\n extern crate typemap;\n extern crate plugin;\n-\n-// Rename the URL crate to avoid clashes with the `url` module.\n+extern crate error;\n extern crate rust_url = \"url\";\n-#[cfg(test)]\n-extern crate test;\n \n-pub use request::Request;\n+// Request + Response\n+pub use request::{Request, Url};\n pub use response::Response;\n \n-pub use iron::{Iron, Server};\n-pub use middleware::{Middleware, Status, Continue, Unwind, Error, FromFn};\n-\n-pub use chain::Chain;\n-pub use chain::stackchain::StackChain;\n+// Middleware system\n+pub use middleware::{BeforeMiddleware, AfterMiddleware, AroundMiddleware,\n+                     Handler, Chain, ChainBuilder};\n \n-pub use url::Url;\n+// Server\n+pub use iron::Iron;\n \n+// Extensions\n pub use typemap::TypeMap;\n \n+// Status codes and Methods.",
        "path": "src/lib.rs",
        "position": 93,
        "original_position": 56,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think it is a worthwhile convenience export.\n",
        "created_at": "2014-08-24T00:29:12Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633495",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633495"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633495"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633497",
        "pull_request_review_id": null,
        "id": 16633497,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNDk3",
        "diff_hunk": "@@ -47,39 +43,50 @@\n //! // ...\n //! ```\n \n+// Stdlib dependencies\n extern crate regex;\n #[phase(plugin)] extern crate regex_macros;\n #[phase(plugin, link)] extern crate log;\n+#[cfg(test)] extern crate test;\n \n+// Third party packages\n extern crate contenttype;\n extern crate http;\n extern crate typemap;\n extern crate plugin;\n-\n-// Rename the URL crate to avoid clashes with the `url` module.\n+extern crate error;\n extern crate rust_url = \"url\";\n-#[cfg(test)]\n-extern crate test;\n \n-pub use request::Request;\n+// Request + Response\n+pub use request::{Request, Url};\n pub use response::Response;\n \n-pub use iron::{Iron, Server};\n-pub use middleware::{Middleware, Status, Continue, Unwind, Error, FromFn};\n-\n-pub use chain::Chain;\n-pub use chain::stackchain::StackChain;\n+// Middleware system\n+pub use middleware::{BeforeMiddleware, AfterMiddleware, AroundMiddleware,\n+                     Handler, Chain, ChainBuilder};\n \n-pub use url::Url;\n+// Server\n+pub use iron::Iron;\n \n+// Extensions\n pub use typemap::TypeMap;\n \n+// Status codes and Methods.\n+pub use http::status;\n+pub use http::method;\n+\n // Expose `GetCached` as `Plugin` so users can do `use iron::Plugin`.",
        "path": "src/lib.rs",
        "position": 97,
        "original_position": 60,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fair.\n",
        "created_at": "2014-08-24T00:29:30Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633497",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633497"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633497"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633506",
        "pull_request_review_id": null,
        "id": 16633506,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNTA2",
        "diff_hunk": "@@ -2,79 +2,71 @@\n //! `Iron` library.\n \n use std::io::net::ip::{SocketAddr, IpAddr};\n-use std::cell::RefCell;\n+use std::sync::Arc;\n \n use http::server as http;\n-use super::chain::Chain;\n-use super::chain::stackchain::StackChain;\n+use super::{Request, Handler};\n+use super::status;\n \n-use super::response::{HttpResponse, Response};\n-use super::request::{HttpRequest, Request};\n-\n-/// The \"default server\", using a `StackChain`.\n-pub type Server = Iron<StackChain>;\n+use super::response::HttpResponse;\n+use super::request::HttpRequest;\n \n /// The primary entrance point to `Iron`, a `struct` to instantiate a new server.\n ///\n-/// The server can be made with a specific `Chain` (using `from_chain`)\n-/// or with a new `Chain` (using `new`). `Iron` is used to manage the server\n-/// processes:\n-/// `Iron.chain.link` is used to add new `Middleware`, and\n-/// `Iron.listen` is used to kick off a server process.\n-///\n-/// `Iron` contains the `Chain` which holds the `Middleware` necessary to run a server.\n-/// `Iron` is the main interface to adding `Middleware`, and has `Chain` as a\n-/// public field (for the sake of extensibility).\n-pub struct Iron<C> {\n-    /// Add `Middleware` to the `Iron's` `chain` so that requests\n-    /// are passed through those `Middleware`.\n-    /// `Middleware` is added to the chain with with `chain.link`.\n-    pub chain: C,\n+/// `Iron` contains the `Handler` which takes a `Request` and produces a\n+/// `Response`.\n+pub struct Iron<H> {\n+    /// Iron contains a Handler, which it uses to create responses for client\n+    /// requests.\n+    pub handler: H,\n }\n \n // The struct which actually listens and serves requests.\n-//\n-// IronListener holds its chain behind a RefCell to avoid a\n-// second clone in the implementation of .serve_forever().\n-#[deriving(Clone)]\n-struct IronListener<C> {\n-    chain: RefCell<C>,\n+struct IronListener<H> {\n+    handler: Arc<H>,\n     ip: IpAddr,\n     port: u16\n }\n \n-impl<C: Chain> Iron<C> {\n+impl<H: Send + Sync> Clone for IronListener<H> {\n+    fn clone(&self) -> IronListener<H> {\n+        IronListener {\n+            // Just increment a reference count.",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 62,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The type is not explicit, it is inferred. If you're going to include a comment, make it complete, so that newcomers to the project don't need to hunt through the code to discover your intent.\n",
        "created_at": "2014-08-24T00:30:14Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633506",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633506"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633506"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633510",
        "pull_request_review_id": null,
        "id": 16633510,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNTEw",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by",
        "path": "src/middleware.rs",
        "position": 1,
        "original_position": 1,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would not prioritize it, and just open an issue instead for a later PR.\n",
        "created_at": "2014-08-24T00:30:38Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633510",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633510"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633510"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633515",
        "pull_request_review_id": null,
        "id": 16633515,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNTE1",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 67,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why not use a parser as an example instead?\n",
        "created_at": "2014-08-24T00:31:34Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633515",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633515"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633515"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633517",
        "pull_request_review_id": null,
        "id": 16633517,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNTE3",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 118,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It looks weird because you emphasize \"not\", and yet follow it by a qualifier.\n",
        "created_at": "2014-08-24T00:32:17Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633517",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633517"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633517"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633520",
        "pull_request_review_id": null,
        "id": 16633520,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNTIw",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 251,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we add it as an FYI issue, in case someone finds a way?\n",
        "created_at": "2014-08-24T00:32:44Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633520",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633520"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633520"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633524",
        "pull_request_review_id": null,
        "id": 16633524,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNTI0",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);\n+        around.around(old);\n+        self.handler = box around as Box<Handler + Send + Sync>;",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 288,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Curious: Are there any performance gains to modularizing in this way?\n",
        "created_at": "2014-08-24T00:33:40Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633524",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633524"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633524"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633525",
        "pull_request_review_id": null,
        "id": 16633525,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNTI1",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);",
        "path": "src/middleware.rs",
        "position": 327,
        "original_position": 286,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Gotcha. It looks good.\n",
        "created_at": "2014-08-24T00:34:07Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633525",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633525"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633525"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633528",
        "pull_request_review_id": null,
        "id": 16633528,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNTI4",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 241,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Because AroundMiddleware must impl Handler. Got it. Elegant.\n",
        "created_at": "2014-08-24T00:34:43Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633528",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633528"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633528"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633580",
        "pull_request_review_id": null,
        "id": 16633580,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNTgw",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 67,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Because Parser would be a Plugin, not a BeforeMiddleware.\n",
        "created_at": "2014-08-24T00:46:21Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633580",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633580"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633580"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633586",
        "pull_request_review_id": null,
        "id": 16633586,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNTg2",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);\n+        around.around(old);\n+        self.handler = box around as Box<Handler + Send + Sync>;",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 288,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can get the same performance both ways.\n",
        "created_at": "2014-08-24T00:47:07Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633586",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633586"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633586"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633601",
        "pull_request_review_id": null,
        "id": 16633601,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNjAx",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 251,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done.\n",
        "created_at": "2014-08-24T00:49:22Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633601",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633601"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633601"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633609",
        "pull_request_review_id": null,
        "id": 16633609,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNjA5",
        "diff_hunk": "@@ -4,10 +4,17 @@ extern crate iron;\n \n use std::io::net::ip::Ipv4Addr;",
        "path": "examples/404.rs",
        "position": 2,
        "original_position": 2,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's in the std library, I really don't feel the need to export this.\n",
        "created_at": "2014-08-24T00:50:47Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633609",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633609"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633609"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633633",
        "pull_request_review_id": null,
        "id": 16633633,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNjMz",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 67,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you give an example of something that would be `link_before`, and not `link`?\n",
        "created_at": "2014-08-24T00:54:32Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633633",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633633"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633633"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16633634",
        "pull_request_review_id": null,
        "id": 16633634,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMzNjM0",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);\n+        around.around(old);\n+        self.handler = box around as Box<Handler + Send + Sync>;",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 288,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "OK. Semantically worthwhile.\n",
        "created_at": "2014-08-24T00:54:57Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16633634",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16633634"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16633634"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16638395",
        "pull_request_review_id": null,
        "id": 16638395,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjM4Mzk1",
        "diff_hunk": "@@ -85,22 +77,29 @@ impl<C: Chain> http::Server for IronListener<C> {\n     }\n \n     fn handle_request(&self, http_req: HttpRequest, http_res: &mut HttpResponse) {\n-        // Create wrapper Request and Response\n+        // Create `Request` wrapper.\n         let mut req = match Request::from_http(http_req) {\n             Ok(req) => req,\n             Err(e) => {\n                 error!(\"Error getting request: {}\", e);\n-                http_res.status = ::http::status::InternalServerError;\n+                http_res.status = status::InternalServerError;\n                 let _ = http_res.write(b\"Internal Server Error\");\n                 return;\n             }\n         };\n-        let mut res = Response::from_http(http_res);\n \n         // Dispatch the request\n-        let _ = self.chain.borrow_mut().dispatch(&mut req, &mut res);\n+        let res = self.handler.call(&mut req);\n \n-        // Write the response back to http_res\n-        res.write_back(http_res);\n+        match res {\n+            // Write the response back to http_res\n+            Ok(res) => res.write_back(http_res),\n+            Err(e) => {\n+                // There is no Response, so create one.\n+                error!(\"Error handling:\\n{}\\nError was: {}\", req, e);\n+                http_res.status = status::InternalServerError;\n+                let _ = http_res.write(b\"Internal Servr Error\");",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 150,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "85dfa26606c874d295465d9155e9653ae1dfd4f2",
        "user": {
            "login": "brycefisher",
            "id": 220106,
            "node_id": "MDQ6VXNlcjIyMDEwNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/220106?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brycefisher",
            "html_url": "https://github.com/brycefisher",
            "followers_url": "https://api.github.com/users/brycefisher/followers",
            "following_url": "https://api.github.com/users/brycefisher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brycefisher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brycefisher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brycefisher/subscriptions",
            "organizations_url": "https://api.github.com/users/brycefisher/orgs",
            "repos_url": "https://api.github.com/users/brycefisher/repos",
            "events_url": "https://api.github.com/users/brycefisher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brycefisher/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Typo: should be \"Serv **e** r\" not \"Servr\"\n",
        "created_at": "2014-08-24T22:28:48Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16638395",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16638395"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16638395"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16638413",
        "pull_request_review_id": null,
        "id": 16638413,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjM4NDEz",
        "diff_hunk": "@@ -85,22 +77,29 @@ impl<C: Chain> http::Server for IronListener<C> {\n     }\n \n     fn handle_request(&self, http_req: HttpRequest, http_res: &mut HttpResponse) {\n-        // Create wrapper Request and Response\n+        // Create `Request` wrapper.\n         let mut req = match Request::from_http(http_req) {\n             Ok(req) => req,\n             Err(e) => {\n                 error!(\"Error getting request: {}\", e);\n-                http_res.status = ::http::status::InternalServerError;\n+                http_res.status = status::InternalServerError;\n                 let _ = http_res.write(b\"Internal Server Error\");",
        "path": "src/iron.rs",
        "position": 131,
        "original_position": 131,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "85dfa26606c874d295465d9155e9653ae1dfd4f2",
        "user": {
            "login": "brycefisher",
            "id": 220106,
            "node_id": "MDQ6VXNlcjIyMDEwNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/220106?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brycefisher",
            "html_url": "https://github.com/brycefisher",
            "followers_url": "https://api.github.com/users/brycefisher/followers",
            "following_url": "https://api.github.com/users/brycefisher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brycefisher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brycefisher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brycefisher/subscriptions",
            "organizations_url": "https://api.github.com/users/brycefisher/orgs",
            "repos_url": "https://api.github.com/users/brycefisher/repos",
            "events_url": "https://api.github.com/users/brycefisher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brycefisher/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hmm, not sure how this will work with my DefaultErrors library. When there's a 500 error like this, would `res.body` still be `None`? If possible, I'd like to be able to distinguish between a user provided response body and a framework response body.\n",
        "created_at": "2014-08-24T22:31:51Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16638413",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16638413"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16638413"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16638441",
        "pull_request_review_id": null,
        "id": 16638441,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjM4NDQx",
        "diff_hunk": "@@ -1,170 +1,377 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+//! Iron's Middleware and Handler System\n+//!\n+//! Iron's Middleware system is best modeled with a diagram.\n+//!\n+//! ```ignore\n+//! [b] = BeforeMiddleware\n+//! [a] = AfterMiddleware\n+//! [[h]] = AroundMiddleware\n+//! [h] = Handler\n+//! ```\n+//!\n+//! With no errors, the flow looks like:\n+//!\n+//! ```ignore\n+//! [b] -> [b] -> [b] -> [[[[h]]]] -> [a] -> [a] -> [a] -> [a]",
        "path": "src/middleware.rs",
        "position": 17,
        "original_position": 17,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "85dfa26606c874d295465d9155e9653ae1dfd4f2",
        "user": {
            "login": "brycefisher",
            "id": 220106,
            "node_id": "MDQ6VXNlcjIyMDEwNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/220106?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brycefisher",
            "html_url": "https://github.com/brycefisher",
            "followers_url": "https://api.github.com/users/brycefisher/followers",
            "following_url": "https://api.github.com/users/brycefisher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brycefisher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brycefisher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brycefisher/subscriptions",
            "organizations_url": "https://api.github.com/users/brycefisher/orgs",
            "repos_url": "https://api.github.com/users/brycefisher/repos",
            "events_url": "https://api.github.com/users/brycefisher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brycefisher/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This ASCII art and the following paragraph really explain this flow well IMHO. Thanks!\n",
        "created_at": "2014-08-24T22:35:51Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16638441",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16638441"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16638441"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16638447",
        "pull_request_review_id": null,
        "id": 16638447,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjM4NDQ3",
        "diff_hunk": "@@ -1,170 +1,377 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+//! Iron's Middleware and Handler System\n+//!\n+//! Iron's Middleware system is best modeled with a diagram.\n+//!\n+//! ```ignore\n+//! [b] = BeforeMiddleware\n+//! [a] = AfterMiddleware\n+//! [[h]] = AroundMiddleware\n+//! [h] = Handler\n+//! ```\n+//!\n+//! With no errors, the flow looks like:\n+//!\n+//! ```ignore\n+//! [b] -> [b] -> [b] -> [[[[h]]]] -> [a] -> [a] -> [a] -> [a]\n+//! ```\n+//!\n+//! A request first travels through all BeforeMiddleware, then a Response is generated\n+//! by the Handler, which be an arbitrary nesting of AroundMiddleware, then all AfterMiddleware",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 21,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "85dfa26606c874d295465d9155e9653ae1dfd4f2",
        "user": {
            "login": "brycefisher",
            "id": 220106,
            "node_id": "MDQ6VXNlcjIyMDEwNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/220106?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brycefisher",
            "html_url": "https://github.com/brycefisher",
            "followers_url": "https://api.github.com/users/brycefisher/followers",
            "following_url": "https://api.github.com/users/brycefisher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brycefisher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brycefisher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brycefisher/subscriptions",
            "organizations_url": "https://api.github.com/users/brycefisher/orgs",
            "repos_url": "https://api.github.com/users/brycefisher/repos",
            "events_url": "https://api.github.com/users/brycefisher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brycefisher/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Typo (nit): \"which be\" should instead be \"which are\"\n",
        "created_at": "2014-08-24T22:36:37Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16638447",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16638447"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16638447"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16638466",
        "pull_request_review_id": null,
        "id": 16638466,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjM4NDY2",
        "diff_hunk": "@@ -1,170 +1,377 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+//! Iron's Middleware and Handler System\n+//!\n+//! Iron's Middleware system is best modeled with a diagram.\n+//!\n+//! ```ignore\n+//! [b] = BeforeMiddleware\n+//! [a] = AfterMiddleware\n+//! [[h]] = AroundMiddleware\n+//! [h] = Handler\n+//! ```\n+//!\n+//! With no errors, the flow looks like:\n+//!\n+//! ```ignore\n+//! [b] -> [b] -> [b] -> [[[[h]]]] -> [a] -> [a] -> [a] -> [a]\n+//! ```\n+//!\n+//! A request first travels through all BeforeMiddleware, then a Response is generated\n+//! by the Handler, which be an arbitrary nesting of AroundMiddleware, then all AfterMiddleware\n+//! are called with both the Request and Response. After all AfterMiddleware have been fired,\n+//! the response is written back to the client.\n+//!\n+//! Not all too surprising. Of note is that AfterMiddleware and BeforeMiddleware\n+//! are completely separate, unlike in many other web frameworks.\n+//!\n+//! Iron's flexibility comes into play with its novel approach to error handling, which encourages\n+//! not just reporting errors, but *handling* them. An error is not meant to be fatal in Iron, but\n+//! is instead likely to be handled by downstream Middleware. Middleware authors should keep this\n+//! in mind when designing their APIs.\n+//!\n+//! Iron's error propagation and handling scheme is inspired by two primary rules:\n+//!\n+//!   * Errors should persist and be propagated along the same route as successes until they are\n+//!     handled.\n+//!\n+//!   * If an error is fully handled, control flow should resume just after the error was thrown\n+//!     or, if that is not possible flow should resume as close as possible to the origin of the\n+//!     error.\n+//!\n+//! Returning Ok from an IronResult-producing method indicates no error or that a passed-in error\n+//! has been handled. Err indicates that an error is either being created or propagated.\n+//!\n+//! Imagine an Err is returned by a second BeforeMiddleware. Following rule 1, it is propagated\n+//! to all further BeforeMiddleware by calling their `catch` methods, looking for any that could\n+//! handle the error. If none can, then the error is propagated to the Handler, which can attempt\n+//! to handle it through its `catch` method. If the Handler cannot handle the error, then it is\n+//! propagated to all AfterMiddleware.\n+//!\n+//! Following rule 2, if any BeforeMiddleware can handle an error thrown by a previous\n+//! BeforeMiddleware, the control flow returns to the BeforeMiddleware directly after the\n+//! BeforeMiddleware that threw the Error.\n+//!\n+//! If no BeforeMiddleware can handle a propagated error, but the Handler handles it, then\n+//! it is no longer possible to go back to BeforeMiddleware, so control-flow resumes with\n+//! the first AfterMiddleware.\n+//!\n+//! If an error is handled in AfterMiddleware, then if the error was generated by a previous\n+//! AfterMiddleware, control-flow resumes with the AfterMiddleware after the one which threw the\n+//! error. If the error occurred during or before the Handler, control-flow resumes with the\n+//! first AfterMiddleware.\n+//!",
        "path": "src/middleware.rs",
        "position": 63,
        "original_position": 63,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "85dfa26606c874d295465d9155e9653ae1dfd4f2",
        "user": {
            "login": "brycefisher",
            "id": 220106,
            "node_id": "MDQ6VXNlcjIyMDEwNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/220106?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brycefisher",
            "html_url": "https://github.com/brycefisher",
            "followers_url": "https://api.github.com/users/brycefisher/followers",
            "following_url": "https://api.github.com/users/brycefisher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brycefisher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brycefisher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brycefisher/subscriptions",
            "organizations_url": "https://api.github.com/users/brycefisher/orgs",
            "repos_url": "https://api.github.com/users/brycefisher/repos",
            "events_url": "https://api.github.com/users/brycefisher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brycefisher/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is awesome! An ASCII art drawing in your blog post (or on IronFramework.io) would probably help newbies even more.\n",
        "created_at": "2014-08-24T22:39:21Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16638466",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16638466"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16638466"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16639944",
        "pull_request_review_id": null,
        "id": 16639944,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjM5OTQ0",
        "diff_hunk": "@@ -85,22 +77,29 @@ impl<C: Chain> http::Server for IronListener<C> {\n     }\n \n     fn handle_request(&self, http_req: HttpRequest, http_res: &mut HttpResponse) {\n-        // Create wrapper Request and Response\n+        // Create `Request` wrapper.\n         let mut req = match Request::from_http(http_req) {\n             Ok(req) => req,\n             Err(e) => {\n                 error!(\"Error getting request: {}\", e);\n-                http_res.status = ::http::status::InternalServerError;\n+                http_res.status = status::InternalServerError;\n                 let _ = http_res.write(b\"Internal Server Error\");",
        "path": "src/iron.rs",
        "position": 131,
        "original_position": 131,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "85dfa26606c874d295465d9155e9653ae1dfd4f2",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If this happens, the request is not even dispatched through middleware. I'm not sure if there is any alternative.\n",
        "created_at": "2014-08-25T01:32:57Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16639944",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16639944"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16639944"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16641287",
        "pull_request_review_id": null,
        "id": 16641287,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjQxMjg3",
        "diff_hunk": "@@ -85,22 +77,29 @@ impl<C: Chain> http::Server for IronListener<C> {\n     }\n \n     fn handle_request(&self, http_req: HttpRequest, http_res: &mut HttpResponse) {\n-        // Create wrapper Request and Response\n+        // Create `Request` wrapper.\n         let mut req = match Request::from_http(http_req) {\n             Ok(req) => req,\n             Err(e) => {\n                 error!(\"Error getting request: {}\", e);\n-                http_res.status = ::http::status::InternalServerError;\n+                http_res.status = status::InternalServerError;\n                 let _ = http_res.write(b\"Internal Server Error\");",
        "path": "src/iron.rs",
        "position": 131,
        "original_position": 131,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "85dfa26606c874d295465d9155e9653ae1dfd4f2",
        "user": {
            "login": "brycefisher",
            "id": 220106,
            "node_id": "MDQ6VXNlcjIyMDEwNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/220106?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brycefisher",
            "html_url": "https://github.com/brycefisher",
            "followers_url": "https://api.github.com/users/brycefisher/followers",
            "following_url": "https://api.github.com/users/brycefisher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brycefisher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brycefisher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brycefisher/subscriptions",
            "organizations_url": "https://api.github.com/users/brycefisher/orgs",
            "repos_url": "https://api.github.com/users/brycefisher/repos",
            "events_url": "https://api.github.com/users/brycefisher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brycefisher/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Makes sense -- in this specific case, there's no request object to propagate.\n",
        "created_at": "2014-08-25T03:42:49Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16641287",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16641287"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16641287"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16641293",
        "pull_request_review_id": null,
        "id": 16641293,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjQxMjkz",
        "diff_hunk": "@@ -85,22 +77,29 @@ impl<C: Chain> http::Server for IronListener<C> {\n     }\n \n     fn handle_request(&self, http_req: HttpRequest, http_res: &mut HttpResponse) {\n-        // Create wrapper Request and Response\n+        // Create `Request` wrapper.\n         let mut req = match Request::from_http(http_req) {\n             Ok(req) => req,\n             Err(e) => {\n                 error!(\"Error getting request: {}\", e);\n-                http_res.status = ::http::status::InternalServerError;\n+                http_res.status = status::InternalServerError;\n                 let _ = http_res.write(b\"Internal Server Error\");\n                 return;\n             }\n         };\n-        let mut res = Response::from_http(http_res);\n \n         // Dispatch the request\n-        let _ = self.chain.borrow_mut().dispatch(&mut req, &mut res);\n+        let res = self.handler.call(&mut req);\n \n-        // Write the response back to http_res\n-        res.write_back(http_res);\n+        match res {\n+            // Write the response back to http_res\n+            Ok(res) => res.write_back(http_res),\n+            Err(e) => {\n+                // There is no Response, so create one.\n+                error!(\"Error handling:\\n{}\\nError was: {}\", req, e);\n+                http_res.status = status::InternalServerError;\n+                let _ = http_res.write(b\"Internal Servr Error\");",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 150,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "85dfa26606c874d295465d9155e9653ae1dfd4f2",
        "user": {
            "login": "brycefisher",
            "id": 220106,
            "node_id": "MDQ6VXNlcjIyMDEwNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/220106?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/brycefisher",
            "html_url": "https://github.com/brycefisher",
            "followers_url": "https://api.github.com/users/brycefisher/followers",
            "following_url": "https://api.github.com/users/brycefisher/following{/other_user}",
            "gists_url": "https://api.github.com/users/brycefisher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/brycefisher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/brycefisher/subscriptions",
            "organizations_url": "https://api.github.com/users/brycefisher/orgs",
            "repos_url": "https://api.github.com/users/brycefisher/repos",
            "events_url": "https://api.github.com/users/brycefisher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/brycefisher/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": " When there's a 500 error like this, would res.body still be None?\n",
        "created_at": "2014-08-25T03:43:25Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16641293",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16641293"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16641293"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16643163",
        "pull_request_review_id": null,
        "id": 16643163,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjQzMTYz",
        "diff_hunk": "@@ -85,22 +77,29 @@ impl<C: Chain> http::Server for IronListener<C> {\n     }\n \n     fn handle_request(&self, http_req: HttpRequest, http_res: &mut HttpResponse) {\n-        // Create wrapper Request and Response\n+        // Create `Request` wrapper.\n         let mut req = match Request::from_http(http_req) {\n             Ok(req) => req,\n             Err(e) => {\n                 error!(\"Error getting request: {}\", e);\n-                http_res.status = ::http::status::InternalServerError;\n+                http_res.status = status::InternalServerError;\n                 let _ = http_res.write(b\"Internal Server Error\");\n                 return;\n             }\n         };\n-        let mut res = Response::from_http(http_res);\n \n         // Dispatch the request\n-        let _ = self.chain.borrow_mut().dispatch(&mut req, &mut res);\n+        let res = self.handler.call(&mut req);\n \n-        // Write the response back to http_res\n-        res.write_back(http_res);\n+        match res {\n+            // Write the response back to http_res\n+            Ok(res) => res.write_back(http_res),\n+            Err(e) => {\n+                // There is no Response, so create one.\n+                error!(\"Error handling:\\n{}\\nError was: {}\", req, e);\n+                http_res.status = status::InternalServerError;\n+                let _ = http_res.write(b\"Internal Servr Error\");",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 150,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "85dfa26606c874d295465d9155e9653ae1dfd4f2",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This happens when the entire Iron handler failed to produce a Response. In that case, the error is logged and a ISE is sent to the client - this is written directly to the rust-http response, and doesn't ever interact with the rest of Iron.\n",
        "created_at": "2014-08-25T06:11:54Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16643163",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16643163"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16643163"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16644304",
        "pull_request_review_id": null,
        "id": 16644304,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjQ0MzA0",
        "diff_hunk": "@@ -1,37 +1,33 @@\n Iron [![Build Status](https://secure.travis-ci.org/iron/iron.png?branch=master)](https://travis-ci.org/iron/iron)\n ====\n \n-> Express-inspired, rapid, scalable, concurrent and safe server development.\n+> Middleware-Oriented, Concurrency Focused Web Development in Rust.\n \n-## Simple ResponseTimer Middleware\n+## Ex",
        "path": "README.md",
        "position": null,
        "original_position": 8,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "61bb8c148d7f7f8d62515c180fcab71827c025a6",
        "user": {
            "login": "michaelsproul",
            "id": 4452260,
            "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4452260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelsproul",
            "html_url": "https://github.com/michaelsproul",
            "followers_url": "https://api.github.com/users/michaelsproul/followers",
            "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
            "repos_url": "https://api.github.com/users/michaelsproul/repos",
            "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Example?\n",
        "created_at": "2014-08-25T07:08:33Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16644304",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16644304"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16644304"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16644319",
        "pull_request_review_id": null,
        "id": 16644319,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjQ0MzE5",
        "diff_hunk": "@@ -1,37 +1,33 @@\n Iron [![Build Status](https://secure.travis-ci.org/iron/iron.png?branch=master)](https://travis-ci.org/iron/iron)\n ====\n \n-> Express-inspired, rapid, scalable, concurrent and safe server development.\n+> Middleware-Oriented, Concurrency Focused Web Development in Rust.\n \n-## Simple ResponseTimer Middleware\n+## Ex\n \n ```rust\n-#[deriving(Clone)]\n-struct ResponseTime {\n-    entry_time: u64\n-}\n+struct ResponseTime;\n+\n+impl Assoc<uint> for ResponseTime;\n \n impl ResponseTime { fn new() -> ResponseTime { ResponseTime { entry_time: 0u64 } } }\n \n-impl Middleware for ResponseTime {\n-    fn enter(&mut self, _req: &mut Request, _res: &mut Response) -> Status {\n-        self.entry_time = precise_time_ns();\n-        Continue\n+impl BeforeMiddleware for ResponseTime {\n+    fn before(&self, req: &mut Request) -> IronResult<()> {\n+        req.extensions.insert::<ResponseTime, uint>(precise_time_ns());\n     }\n+}",
        "path": "README.md",
        "position": null,
        "original_position": 29,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "61bb8c148d7f7f8d62515c180fcab71827c025a6",
        "user": {
            "login": "michaelsproul",
            "id": 4452260,
            "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4452260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelsproul",
            "html_url": "https://github.com/michaelsproul",
            "followers_url": "https://api.github.com/users/michaelsproul/followers",
            "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
            "repos_url": "https://api.github.com/users/michaelsproul/repos",
            "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This needs to be updated to match the code in the examples directory, it doesn't compile.\n",
        "created_at": "2014-08-25T07:09:17Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16644319",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16644319"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16644319"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16644351",
        "pull_request_review_id": null,
        "id": 16644351,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjQ0MzUx",
        "diff_hunk": "@@ -1,170 +1,380 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+//! Iron's Middleware and Handler System\n+//!\n+//! Iron's Middleware system is best modeled with a diagram.\n+//!\n+//! ```ignore\n+//! [b] = BeforeMiddleware\n+//! [a] = AfterMiddleware\n+//! [[h]] = AroundMiddleware\n+//! [h] = Handler\n+//! ```\n+//!\n+//! With no errors, the flow looks like:\n+//!\n+//! ```ignore\n+//! [b] -> [b] -> [b] -> [[[[h]]]] -> [a] -> [a] -> [a] -> [a]\n+//! ```\n+//!\n+//! A request first travels through all BeforeMiddleware, then a Response is generated\n+//! by the Handler, which can be an arbitrary nesting of AroundMiddleware, then all AfterMiddleware\n+//! are called with both the Request and Response. After all AfterMiddleware have been fired,\n+//! the response is written back to the client.\n+//!\n+//! Not all too surprising. Of note is that AfterMiddleware and BeforeMiddleware\n+//! are completely separate, unlike in many other web frameworks.\n+//!\n+//! Iron's flexibility comes into play with its novel approach to error handling, which encourages\n+//! not just reporting errors, but *handling* them. An error is not meant to be fatal in Iron, but\n+//! is instead likely to be handled by downstream Middleware. Middleware authors should keep this\n+//! in mind when designing their APIs.\n+//!\n+//! Iron's error propagation and handling scheme is inspired by two primary rules:\n+//!\n+//!   * Errors should persist and be propagated along the same route as successes until they are\n+//!     handled.\n+//!\n+//!   * If an error is fully handled, control flow should resume just after the error was thrown\n+//!     or, if that is not possible flow should resume as close as possible to the origin of the\n+//!     error.\n+//!\n+//! Returning Ok from an IronResult-producing method indicates no error or that a passed-in error\n+//! has been handled. Err indicates that an error is either being created or propagated.\n+//!\n+//! Imagine an Err is returned by a second BeforeMiddleware. Following rule 1, it is propagated\n+//! to all further BeforeMiddleware by calling their `catch` methods, looking for any that could\n+//! handle the error. If none can, then the error is propagated to the Handler, which can attempt\n+//! to handle it through its `catch` method. If the Handler cannot handle the error, then it is\n+//! propagated to all AfterMiddleware.\n+//!\n+//! Following rule 2, if any BeforeMiddleware can handle an error thrown by a previous\n+//! BeforeMiddleware, the control flow returns to the BeforeMiddleware directly after the\n+//! BeforeMiddleware that threw the Error.\n+//!\n+//! If no BeforeMiddleware can handle a propagated error, but the Handler handles it, then\n+//! it is no longer possible to go back to BeforeMiddleware, so control-flow resumes with\n+//! the first AfterMiddleware.\n+//!\n+//! If an error is handled in AfterMiddleware, then if the error was generated by a previous\n+//! AfterMiddleware, control-flow resumes with the AfterMiddleware after the one which threw the\n+//! error. If the error occurred during or before the Handler, control-flow resumes with the\n+//! first AfterMiddleware.\n+//!\n \n-use std::fmt::Show;\n+use std::sync::Arc;\n+use error::Error;\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n+use super::{Request, Response, IronResult, status};\n \n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response and the error has\n+    /// been dealt with.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n+}\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n+///\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n+///\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response post-processing.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n-///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` should *not* overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n+    ///\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n+    ///\n+    /// This indicates that the `Response` is abnormal in some way, either because it was\n+    /// generated by a `Handler`s `catch` method or because a previous `AfterMiddleware`\n+    /// errored.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 201,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "61bb8c148d7f7f8d62515c180fcab71827c025a6",
        "user": {
            "login": "michaelsproul",
            "id": 4452260,
            "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4452260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelsproul",
            "html_url": "https://github.com/michaelsproul",
            "followers_url": "https://api.github.com/users/michaelsproul/followers",
            "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
            "repos_url": "https://api.github.com/users/michaelsproul/repos",
            "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should be \"with_handler\" method :)\n",
        "created_at": "2014-08-25T07:10:40Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16644351",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16644351"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16644351"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/16644367",
        "pull_request_review_id": null,
        "id": 16644367,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjQ0MzY3",
        "diff_hunk": "@@ -1,170 +1,314 @@\n-//! Exposes the `Middleware` trait which must be implemented by\n-//! all middleware.\n+use std::sync::Arc;\n+use error::Error;\n \n-use std::fmt::Show;\n+use super::{Request, Response, IronResult};\n \n-use super::response::Response;\n-use super::request::Request;\n-use super::chain::Chain;\n-\n-/// The Status returned by `Middleware's` `enter` and `exit` methods. This indicates\n-/// to the `Chain` whether this is a terminal `Middleware` or whether to continue\n-/// passing the `Request` and `Response` down the `Chain's` stack.\n+/// `Handler`s are responsible for handling requests by creating Responses from Requests.\n ///\n-/// Most `Chains` will ignore the returned `Status` from the `exit` method of\n-/// `Middleware`.\n-pub enum Status {\n-    /// `Continue` indicates that this is an intermediate `Middleware` in the stack\n-    /// and the `Chain` should continue passing requests down the `Chain's`\n-    /// stack.\n-    ///\n-    /// Most `Middleware` will return `Continue` from both `enter` and `exit`.\n-    Continue,\n-\n-    /// `Unwind` indicates that this is a terminal `Middleware`. It can be used to\n-    /// immediately stop passing requests down the `Chain's` stack and start calling\n-    /// `exit` of all previous `Middleware`.\n+/// By default, bare functions and variants of Chain implement `Handler`.\n+///\n+/// `Handler`s are allowed to return errors, and if they do, their `catch` method is called and the\n+/// error is propagated to `AfterMiddleware`.\n+pub trait Handler: Send + Sync {\n+    /// Produce a `Response` from a Request, with the possibility of error.\n     ///\n-    /// `Middleware` such as a router or controller, which are meant to handle\n-    /// requests completely should return `Unwind`.\n-    Unwind,\n+    /// If this returns an Err, `catch` is called with the error.\n+    fn call(&self, &mut Request) -> IronResult<Response>;\n \n-    /// `Error` indicates that something went wrong with a reason. It behaves\n-    /// similarly to `Unwind`, except that it instead calls `Middleware's`\n-    /// `on_error` handler as opposed to `exit`.\n+    /// If `Handler`'s call method produces an Err, then this method is called\n+    /// to produce a `Response` and possibly handle the error.\n     ///\n-    /// For instance, an authorization `Middleware` might return `Error` if the\n-    /// `Request` fails an authentication check, and `Continue` otherwise.\n-    Error(Box<Show>)\n+    /// If the passed-in error is not handled, it should be returned as the second\n+    /// item in the returned tuple. If it is handled, then `Ok(())` can be returned\n+    /// instead to indicate that all is good with the Response.\n+    fn catch(&self, &mut Request, Box<Error>) -> (Response, IronResult<()>);\n }\n \n-/// All middleware should implement `Middleware`, which allows it to be `linked`\n-/// to a `Chain` so that it will be called for each incoming request.\n+/// `BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.\n ///\n-/// There are two sorts of data associated with `Middleware`, data internal\n-/// to the `Middleware` and data that the `Middleware` would like to expose to\n-/// other `Middleware` further down the stack or to terminal controllers.\n+/// `BeforeMiddleware` are responsible for doing request pre-processing that requires\n+/// the ability to change control-flow, such as authorization middleware, or for editing\n+/// the request by modifying the headers.\n ///\n-/// Internal data should be stored on the `struct` that implements `Middleware`\n-/// itself. All `Middleware` are cloned for each client request, so the object\n-/// initially linked to the `Iron` instance will be provided as `&mut self` to\n-/// enter for every request.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n+/// you will need `AfterMiddleware`.\n+pub trait BeforeMiddleware: Send + Sync {\n+    /// Do whatever work this middleware should do with a `Request` object.\n+    ///\n+    /// An error here is propagated by the containing Chain to, first, this Middleware's\n+    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n+    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n+    /// called to produce an error Response.\n+    fn before(&self, &mut Request) -> IronResult<()>;\n+\n+    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n+    ///\n+    /// Should only return Ok(()) if the error has been completely handled and a Chain\n+    /// can proceed as normal.\n+    fn catch(&self, _: &mut Request, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n+    }\n+}\n+\n+/// `AfterMiddleware` are fired after a `Handler` is called inside of a Chain.\n ///\n-/// Data stored on a `Middleware` instance does _not_ persist\n-/// between requests and is _not_ shared between different, concurrent, requests.\n-/// The same is true for data stored on `Request::extensions`. Should you need to persist\n-/// data between requests, you should use an `Arc` within your `Middleware`.\n+/// `AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing\n+/// any response-post-processing.\n ///\n-/// External data should be stored in `Request::extensions`,\n-/// a key value store from a type to an instance of that type. This means\n-/// that each `Middleware` can have a unique type that it stores in the `AnyMap`.\n-/// This can either be an instance of that `Middleware` or some other type. Since\n-/// the same `Request` is passed to all further `Middleware` in the `Chain`, this\n-/// scheme allows you to expose data or functionality to future `Middleware`.\n-pub trait Middleware: Send + Clone {\n-    /// `enter` is called for each `Middleware` in a `Chain` as a client request\n-    /// comes down the stack. `Middleware` have their `enter` methods called in the order\n-    /// in which they were added to the stack, that is, FIFO. If `Middleware` need to pass data\n-    /// between them they should do so using `Request::extensions`.\n-    ///\n-    /// Returning `Unwind` from this handler will cause the `Chain` to stop\n-    /// going down its stack and start bubbling back up through `Middleware`\n-    /// and calling `exit` on them.\n+/// `AfterMiddleware` should *not* usually overwrite the contents of a Response. In\n+/// the common case, a complete response is generated by the Chain's `Handler` and\n+/// `AfterMiddleware` simply do post-processing of that Response, such as\n+/// adding headers or logging.\n+pub trait AfterMiddleware: Send + Sync {\n+    /// Do whatever work this middleware needs to do with both a `Request` and `Response` objects.\n     ///\n-    /// Returning `Error` from this handler will also cause \"bubbling up\" but\n-    /// will call `Middleware's` `on_error` handler instead of their `exit`\n-    /// handler.\n-    fn enter(&mut self,\n-             _: &mut Request,\n-             _: &mut Response) -> Status {\n-        Continue\n-    }\n-\n-    /// `exit` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request. A `Middleware's` `exit` method will be called\n-    /// as the stack is unwound in FILO order - i.e, `Middleware` have their `exit`\n-    /// methods called in opposite order from which `enter` was called.\n+    /// An error here is propagated by the containing Chain down to this and any later\n+    /// `AfterMiddleware`'s `catch` methods, which can attempt to handle the error or modify\n+    /// the `Response` to indicate to a client that something went wrong.\n+    fn after(&self, &mut Request, &mut Response) -> IronResult<()>;\n+\n+    /// Try to catch an error thrown by previous `AfterMiddleware`, the `Handler`, or a previous\n+    /// `BeforeMiddleware`.\n     ///\n-    /// While this method must return a `Status`, most `Chains` will ignore\n-    /// this method's return value.\n-    fn exit(&mut self,\n-            _: &mut Request,\n-            _: &mut Response) -> Status {\n-        Continue\n+    /// The response was generated by the `catch` function of `Handler`s and is abnormal or\n+    /// errored in some way.\n+    fn catch(&self, _: &mut Request, _: &mut Response, err: Box<Error>) -> IronResult<()> {\n+        Err(err)\n     }\n+}\n+\n+/// AroundMiddleware are used to wrap and replace the `Handler` in a Chain.\n+///\n+/// AroundMiddleware must themselves be `Handler`s, and can integrate an existing\n+/// `Handler` through the around method, which is called once on insertion\n+/// into a Chain.\n+pub trait AroundMiddleware: Handler {\n+    /// Incorporate another `Handler` into this AroundMiddleware.\n+    ///\n+    /// Usually this means wrapping the handler and editing the `Request` on the\n+    /// way in and the `Response` on the way out.\n+    fn around(&mut self, handler: Box<Handler + Send + Sync>);\n+}\n+\n+/// Chain's hold `BeforeMiddleware`, a `Handler`, and `AfterMiddleware` and are responsible\n+/// for correctly dispatching a `Request` through them.\n+///\n+/// Chain's are handlers, and most of their work is done in the call method of their\n+/// `Handler` implementation.\n+pub trait Chain: Handler {\n+    /// Create a new Chain from a `Handler`.\n+    fn new<H: Handler>(H) -> Self;\n \n-    /// `on_error` is called for each `Middleware` in a `Chain` that has had its `enter`\n-    /// method called for this client request if an `Error` is returned downstream.\n+    /// Link both a before and after middleware to the chain at once.\n     ///\n-    /// If an Error occurs, `Middleware's` `on_error` methods will be called\n-    /// as the stack is unwound in FILO order in the same was as `exit` would\n-    /// be called on a successful request.\n-    fn on_error(&mut self,\n-                _: &mut Request,\n-                _: &mut Response,\n-                _: &mut Show) { () }\n-\n-    // Helper function to clone the Middleware.\n-    #[doc(hidden)]\n-    fn clone_box(&self) -> Box<Middleware + Send> { box self.clone() as Box<Middleware + Send> }\n+    /// Middleware that have a Before and After piece should have a constructor\n+    /// which returns both as a tuple, so it can be passed directly to link.\n+    fn link<B, A>(&mut self, (B, A)) where A: AfterMiddleware, B: BeforeMiddleware;\n+\n+    /// Link a `BeforeMiddleware` to the Chain.\n+    fn link_before<B>(&mut self, B) where B: BeforeMiddleware;\n+\n+    /// Link a `AfterMiddleware` to the Chain.\n+    fn link_after<A>(&mut self, A) where A: AfterMiddleware;\n+\n+    /// Wrap the Chain's `Handler` using an AroundMiddleware.\n+    fn around<A>(&mut self, A) where A: AroundMiddleware;\n }\n \n-impl Clone for Box<Middleware + Send> {\n-    fn clone(&self) -> Box<Middleware + Send> { self.clone_box() }\n+/// The default Chain used in Iron.\n+///\n+/// For almost all intents and purposes, this is synonymous with the\n+/// Chain trait and is the canonical implementation. However, Chain\n+/// is left as a trait for future interoperability with other\n+/// frameworks.\n+pub struct ChainBuilder {\n+    befores: Vec<Box<BeforeMiddleware + Send + Sync>>,\n+    afters: Vec<Box<AfterMiddleware + Send + Sync>>,\n+    handler: Box<Handler + Send + Sync>\n }\n \n-impl Middleware for Box<Chain + Send> {\n-    fn enter(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_enter(request, response)\n+impl ChainBuilder {\n+    /// Construct a new ChainBuilder from a `Handler`.\n+    pub fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n+}\n \n-    fn exit(&mut self, request: &mut Request, response: &mut Response) -> Status {\n-        self.chain_exit(request, response)\n+impl Chain for ChainBuilder {\n+    fn new<H: Handler>(handler: H) -> ChainBuilder {\n+        ChainBuilder {\n+            befores: vec![],\n+            afters: vec![],\n+            handler: box handler as Box<Handler + Send + Sync>\n+        }\n     }\n \n-    fn on_error(&mut self, request: &mut Request, response: &mut Response, error: &mut Show) {\n-        self.chain_error(request, response, error)\n+    fn link<B, A>(&mut self, link: (B, A))\n+    where A: AfterMiddleware, B: BeforeMiddleware {\n+        let (before, after) = link;\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n     }\n-}\n \n-/// Wrapper struct which allows bare functions to be used as `Middleware`.\n-///\n-/// You can use `FromFn` to wrap any function which accepts a `&mut Request`\n-/// and a `&mut Response` and returns a `Status`. For example:\n-///\n-/// ```ignore\n-/// fn hello_world(&mut Request, &mut Response) -> Status {\n-///     res.serve(http::status::Ok, b\"Hello World!\");\n-///     Continue\n-/// }\n-///\n-/// server.chain.link(FromFn::new(hello_world));\n-/// ```\n-///\n-pub struct FromFn {\n-    func: fn(&mut Request, &mut Response) -> Status\n+    fn link_before<B>(&mut self, before: B) where B: BeforeMiddleware {\n+        self.befores.push(box before as Box<BeforeMiddleware + Send + Sync>);\n+    }\n+\n+    fn link_after<A>(&mut self, after: A) where A: AfterMiddleware {\n+        self.afters.push(box after as Box<AfterMiddleware + Send + Sync>);\n+    }\n+\n+    fn around<A>(&mut self, mut around: A) where A: AroundMiddleware {\n+        use std::mem;\n+\n+        let old = mem::replace(&mut self.handler, box Nop as Box<Handler + Send + Sync>);\n+        around.around(old);\n+        self.handler = box around as Box<Handler + Send + Sync>;",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 288,
        "commit_id": "f39fe2044760c5a7b33828af0c472820e125918f",
        "original_commit_id": "5e9df3168870cea768bb4c10184d41dec2ff7be8",
        "user": {
            "login": "michaelsproul",
            "id": 4452260,
            "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4452260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelsproul",
            "html_url": "https://github.com/michaelsproul",
            "followers_url": "https://api.github.com/users/michaelsproul/followers",
            "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
            "repos_url": "https://api.github.com/users/michaelsproul/repos",
            "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should now be `around.with_handler`.\n",
        "created_at": "2014-08-25T07:11:33Z",
        "updated_at": "2014-08-25T22:17:18Z",
        "html_url": "https://github.com/iron/iron/pull/148#discussion_r16644367",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/148",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/16644367"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/148#discussion_r16644367"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/148"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/18876680",
        "pull_request_review_id": null,
        "id": 18876680,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODc2Njgw",
        "diff_hunk": "@@ -68,6 +69,18 @@ impl Response {\n         }\n     }\n \n+    /// Create a new redirect response with status to the specified url.",
        "path": "src/response.rs",
        "position": null,
        "original_position": 12,
        "commit_id": "d3c545ff840c9d21544a3453772d109d7c7a028d",
        "original_commit_id": "2aaf4aa5a24d5e5ba69fe8d75f108e92bf7f2392",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can this be changed to `Create a new Response with the `location` header set to the specified url.`\n",
        "created_at": "2014-10-15T06:33:44Z",
        "updated_at": "2014-10-15T07:20:09Z",
        "html_url": "https://github.com/iron/iron/pull/197#discussion_r18876680",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/197",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/18876680"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/197#discussion_r18876680"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/18876846",
        "pull_request_review_id": null,
        "id": 18876846,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4ODc2ODQ2",
        "diff_hunk": "@@ -68,6 +69,18 @@ impl Response {\n         }\n     }\n \n+    /// Create a new redirect response with status to the specified url.",
        "path": "src/response.rs",
        "position": null,
        "original_position": 12,
        "commit_id": "d3c545ff840c9d21544a3453772d109d7c7a028d",
        "original_commit_id": "2aaf4aa5a24d5e5ba69fe8d75f108e92bf7f2392",
        "user": {
            "login": "gaudecker",
            "id": 872609,
            "node_id": "MDQ6VXNlcjg3MjYwOQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/872609?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gaudecker",
            "html_url": "https://github.com/gaudecker",
            "followers_url": "https://api.github.com/users/gaudecker/followers",
            "following_url": "https://api.github.com/users/gaudecker/following{/other_user}",
            "gists_url": "https://api.github.com/users/gaudecker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gaudecker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gaudecker/subscriptions",
            "organizations_url": "https://api.github.com/users/gaudecker/orgs",
            "repos_url": "https://api.github.com/users/gaudecker/repos",
            "events_url": "https://api.github.com/users/gaudecker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gaudecker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure thing!\n",
        "created_at": "2014-10-15T06:39:35Z",
        "updated_at": "2014-10-15T07:20:09Z",
        "html_url": "https://github.com/iron/iron/pull/197#discussion_r18876846",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/18876846"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/197#discussion_r18876846"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709754",
        "pull_request_review_id": null,
        "id": 19709754,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5NzU0",
        "diff_hunk": "@@ -51,7 +52,7 @@ impl AroundMiddleware for Logger {\n }\n \n fn hello_world(_: &mut Request) -> IronResult<Response> {\n-    Ok(Response::with(status::Ok, \"Hello World!\"))\n+    Ok(Response::new().set(Status(status::Ok)).set(Body(\"Hello World!\")))",
        "path": "examples/around.rs",
        "position": null,
        "original_position": 15,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be formatted the same way as `examples/error.rs`.\n\nEven though it's short, it still makes it easier to digest.\n\nUPDATE: Add a line break before each chained method, please.\n",
        "created_at": "2014-11-02T04:53:51Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709754",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709754"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709754"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709755",
        "pull_request_review_id": null,
        "id": 19709755,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5NzU1",
        "diff_hunk": "@@ -1,11 +1,12 @@\n extern crate iron;\n \n use std::io::net::ip::Ipv4Addr;\n-use iron::{Iron, Request, Response, IronResult};\n+use iron::{Iron, Request, Response, IronResult, Set};\n+use iron::response::modifiers::{Status, Body};\n use iron::status;\n \n fn hello_world(_: &mut Request) -> IronResult<Response> {\n-    Ok(Response::with(status::Ok, \"Hello world!\"))\n+    Ok(Response::new().set(Status(status::Ok)).set(Body(\"Hello world!\")))",
        "path": "examples/hello.rs",
        "position": null,
        "original_position": 11,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Add a line break before each chained method, please.\n",
        "created_at": "2014-11-02T04:54:55Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709755",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709755"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709755"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709759",
        "pull_request_review_id": null,
        "id": 19709759,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5NzU5",
        "diff_hunk": "@@ -1,12 +1,13 @@\n extern crate iron;\n \n use std::io::net::ip::Ipv4Addr;\n-use iron::{Iron, Request, Response, IronResult, Url};\n+use iron::{Iron, Request, Response, IronResult, Url, Set};\n+use iron::response::modifiers::{Status, Redirect};\n use iron::status;\n \n fn redirect(_: &mut Request) -> IronResult<Response> {\n     let url = Url::parse(\"http://rust-lang.org\").unwrap();\n-    Ok(Response::redirect(status::Ok, url))\n+    Ok(Response::new().set(Status(status::Ok)).set(Redirect(url)))",
        "path": "examples/redirect.rs",
        "position": null,
        "original_position": 12,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Add a line break before each chained method, please.\n",
        "created_at": "2014-11-02T04:55:02Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709759",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709759"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709759"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709760",
        "pull_request_review_id": null,
        "id": 19709760,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5NzYw",
        "diff_hunk": "@@ -28,7 +30,7 @@ impl AfterMiddleware for ResponseTime {\n }\n \n fn hello_world(_: &mut Request) -> IronResult<Response> {\n-    Ok(Response::with(iron::status::Ok, \"Hello World\"))\n+    Ok(Response::new().set(Status(iron::status::Ok)).set(Body(\"Hello World\")))",
        "path": "examples/time.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Add a line break before each chained method, please.\n",
        "created_at": "2014-11-02T04:55:08Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709760",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709760"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709760"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709787",
        "pull_request_review_id": null,
        "id": 19709787,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5Nzg3",
        "diff_hunk": "@@ -62,6 +63,9 @@ pub use http::headers;\n // Expose `GetCached` as `Plugin` so users can do `use iron::Plugin`.\n pub use plugin::GetCached as Plugin;\n \n+// Expose modifiers.\n+pub use modifier::Set;",
        "path": "src/lib.rs",
        "position": 13,
        "original_position": 13,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why not publicize this under the `response` mod?\n\nCan you give clear reasons? If the reason if future enhancements, maybe it's time for a roadmap. Do we have one somewhere yet?\n",
        "created_at": "2014-11-02T05:05:55Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709787",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709787"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709787"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709801",
        "pull_request_review_id": null,
        "id": 19709801,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODAx",
        "diff_hunk": "@@ -51,10 +53,11 @@ impl Response {\n     }\n \n     /// Create a new response with the status.\n+    #[deprecated = \"Use `Response::new().set(Status(status))` instead.\"]",
        "path": "src/response/mod.rs",
        "position": 39,
        "original_position": 39,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "When do we plan on removing this entirely? `0.0.2`?\n",
        "created_at": "2014-11-02T05:08:52Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709801",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709801"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709801"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709810",
        "pull_request_review_id": null,
        "id": 19709810,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODEw",
        "diff_hunk": "@@ -103,39 +109,56 @@ impl Response {\n     // `write_back` consumes the `Response`.\n     #[doc(hidden)]\n     pub fn write_back(self, http_res: &mut HttpResponse) {\n-        http_res.headers = self.headers.clone();\n+        http_res.headers = *self.headers.clone();\n \n         // Default to a 404 if no response code was set\n         http_res.status = self.status.clone().unwrap_or(status::NotFound);\n \n-        // Read the body into the http_res body\n-        let mut body = self.body.unwrap_or_else(|| box MemReader::new(vec![]) as Box<Reader + Send>);\n-        let _ = match body.read_to_end() {\n-            Ok(body_content) => {\n-                let plain_txt = MediaType {\n-                    type_: \"text\".to_string(),\n-                    subtype: \"plain\".to_string(),\n-                    parameters: vec![]\n-                };\n-\n-                // Set content length and type\n-                http_res.headers.content_length =\n-                    Some(body_content.len());\n+        match self.body {\n+            Some(mut body) => {\n                 http_res.headers.content_type =\n-                    Some(http_res.headers.content_type.clone().unwrap_or(plain_txt));\n-\n-                // Write the body\n-                http_res.write(body_content.as_slice())\n+                    Some(http_res.headers\n+                            .content_type\n+                            .clone()\n+                            .unwrap_or_else(||\n+                                MediaType::new(\"text\".into_string(), \"plain\".into_string(), vec![])\n+                            ));\n+\n+                // FIXME: Manually inlined io::util::copy",
        "path": "src/response/mod.rs",
        "position": null,
        "original_position": 116,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This comment can be on one line.\n",
        "created_at": "2014-11-02T05:10:56Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709810",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709810"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709810"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709814",
        "pull_request_review_id": null,
        "id": 19709814,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODE0",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses",
        "path": "src/response/modifiers.rs",
        "position": 1,
        "original_position": 1,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "At some point in here, you should link to your `modifiers` repo - probably near the bottom, as a \"For more information...\" kind of thing.\n",
        "created_at": "2014-11-02T05:12:20Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709814",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709814"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709814"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709816",
        "pull_request_review_id": null,
        "id": 19709816,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODE2",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning",
        "path": "src/response/modifiers.rs",
        "position": null,
        "original_position": 3,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "<s>both</s>\n",
        "created_at": "2014-11-02T05:12:41Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709816",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709816"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709816"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709819",
        "pull_request_review_id": null,
        "id": 19709819,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODE5",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning\n+//! method `set` and the mutating `set_mut`, both of which are",
        "path": "src/response/modifiers.rs",
        "position": null,
        "original_position": 4,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/and/or\n",
        "created_at": "2014-11-02T05:12:57Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709819",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709819"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709819"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709820",
        "pull_request_review_id": null,
        "id": 19709820,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODIw",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning\n+//! method `set` and the mutating `set_mut`, both of which are\n+//! defined through the `Set` trait.",
        "path": "src/response/modifiers.rs",
        "position": null,
        "original_position": 5,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/through/in\n",
        "created_at": "2014-11-02T05:13:07Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709820",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709820"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709820"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709823",
        "pull_request_review_id": null,
        "id": 19709823,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODIz",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning\n+//! method `set` and the mutating `set_mut`, both of which are\n+//! defined through the `Set` trait.\n+//!\n+//! Instead of having a combinatorial explosion of Response methods\n+//! and constructors, we instead provide a series of modifiers that",
        "path": "src/response/modifiers.rs",
        "position": null,
        "original_position": 8,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/we/this, s/provide/provides\n",
        "created_at": "2014-11-02T05:13:26Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709823",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709823"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709823"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709824",
        "pull_request_review_id": null,
        "id": 19709824,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODI0",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning\n+//! method `set` and the mutating `set_mut`, both of which are\n+//! defined through the `Set` trait.\n+//!\n+//! Instead of having a combinatorial explosion of Response methods\n+//! and constructors, we instead provide a series of modifiers that\n+//! can be used through the Set trait.",
        "path": "src/response/modifiers.rs",
        "position": null,
        "original_position": 9,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "backticks around `Set`\n",
        "created_at": "2014-11-02T05:13:38Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709824",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709824"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709824"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709827",
        "pull_request_review_id": null,
        "id": 19709827,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODI3",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning\n+//! method `set` and the mutating `set_mut`, both of which are\n+//! defined through the `Set` trait.\n+//!\n+//! Instead of having a combinatorial explosion of Response methods\n+//! and constructors, we instead provide a series of modifiers that\n+//! can be used through the Set trait.\n+//!\n+//! For instance, instead of `Response::redirect` constructing a\n+//! redirect response, we provide a `Redirect` modifier, so you\n+//! can just do:\n+//!\n+//! ```rust,ignore\n+//! Response::new().set(Status(status)).set(Redirect(url));\n+//! ```\n+//!\n+//! This is much more extensible as it allows you to combine",
        "path": "src/response/modifiers.rs",
        "position": null,
        "original_position": 19,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "<s>much</s>\n",
        "created_at": "2014-11-02T05:14:03Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709827",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709827"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709827"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709831",
        "pull_request_review_id": null,
        "id": 19709831,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODMx",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning\n+//! method `set` and the mutating `set_mut`, both of which are\n+//! defined through the `Set` trait.\n+//!\n+//! Instead of having a combinatorial explosion of Response methods\n+//! and constructors, we instead provide a series of modifiers that\n+//! can be used through the Set trait.\n+//!\n+//! For instance, instead of `Response::redirect` constructing a\n+//! redirect response, we provide a `Redirect` modifier, so you\n+//! can just do:\n+//!\n+//! ```rust,ignore\n+//! Response::new().set(Status(status)).set(Redirect(url));\n+//! ```\n+//!\n+//! This is much more extensible as it allows you to combine\n+//! arbitrary modifiers without having a massive number of\n+//! Response constructors.\n+//!",
        "path": "src/response/modifiers.rs",
        "position": null,
        "original_position": 22,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why is this blank line here?\n",
        "created_at": "2014-11-02T05:14:24Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709831",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709831"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709831"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709835",
        "pull_request_review_id": null,
        "id": 19709835,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODM1",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning\n+//! method `set` and the mutating `set_mut`, both of which are\n+//! defined through the `Set` trait.\n+//!\n+//! Instead of having a combinatorial explosion of Response methods\n+//! and constructors, we instead provide a series of modifiers that\n+//! can be used through the Set trait.\n+//!\n+//! For instance, instead of `Response::redirect` constructing a\n+//! redirect response, we provide a `Redirect` modifier, so you\n+//! can just do:\n+//!\n+//! ```rust,ignore\n+//! Response::new().set(Status(status)).set(Redirect(url));\n+//! ```\n+//!\n+//! This is much more extensible as it allows you to combine\n+//! arbitrary modifiers without having a massive number of\n+//! Response constructors.\n+//!\n+\n+use std::str::StrAllocating;\n+use std::io::{File, MemReader};\n+use std::path::Path;\n+\n+use modifier::Modifier;",
        "path": "src/response/modifiers.rs",
        "position": 32,
        "original_position": 28,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why not `pub` this here?\n",
        "created_at": "2014-11-02T05:15:43Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709835",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709835"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709835"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709863",
        "pull_request_review_id": null,
        "id": 19709863,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODYz",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning\n+//! method `set` and the mutating `set_mut`, both of which are\n+//! defined through the `Set` trait.\n+//!\n+//! Instead of having a combinatorial explosion of Response methods\n+//! and constructors, we instead provide a series of modifiers that\n+//! can be used through the Set trait.\n+//!\n+//! For instance, instead of `Response::redirect` constructing a\n+//! redirect response, we provide a `Redirect` modifier, so you\n+//! can just do:\n+//!\n+//! ```rust,ignore\n+//! Response::new().set(Status(status)).set(Redirect(url));\n+//! ```\n+//!\n+//! This is much more extensible as it allows you to combine\n+//! arbitrary modifiers without having a massive number of\n+//! Response constructors.\n+//!\n+\n+use std::str::StrAllocating;\n+use std::io::{File, MemReader};\n+use std::path::Path;\n+\n+use modifier::Modifier;\n+use http::headers::content_type::MediaType;\n+use content_type::get_content_type;\n+use {status, Response, Url};\n+\n+/// A response modifier for setting the content-type header.\n+pub struct ContentType(pub MediaType);\n+\n+impl ContentType {\n+    /// Create a new ContentType modifier from the parts of a content-type header value.\n+    #[inline]\n+    pub fn new<S: StrAllocating, S1: StrAllocating>(type_: S, subtype: S1) -> ContentType {\n+        ContentType(MediaType::new(type_.into_string(), subtype.into_string(), vec![]))\n+    }\n+}\n+\n+impl Modifier<Response> for ContentType {\n+    #[inline]\n+    fn modify(self, mut res: Response) -> Response {\n+        let ContentType(media) = self;\n+        res.headers.content_type = Some(media);\n+        res\n+    }\n+}\n+\n+/// A response modifier for seeting the body of a response.",
        "path": "src/response/modifiers.rs",
        "position": null,
        "original_position": 53,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "typo\n",
        "created_at": "2014-11-02T05:23:37Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709863",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709863"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709863"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19709869",
        "pull_request_review_id": null,
        "id": 19709869,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzA5ODY5",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning\n+//! method `set` and the mutating `set_mut`, both of which are\n+//! defined through the `Set` trait.\n+//!\n+//! Instead of having a combinatorial explosion of Response methods\n+//! and constructors, we instead provide a series of modifiers that\n+//! can be used through the Set trait.\n+//!\n+//! For instance, instead of `Response::redirect` constructing a\n+//! redirect response, we provide a `Redirect` modifier, so you\n+//! can just do:\n+//!\n+//! ```rust,ignore\n+//! Response::new().set(Status(status)).set(Redirect(url));\n+//! ```\n+//!\n+//! This is much more extensible as it allows you to combine\n+//! arbitrary modifiers without having a massive number of\n+//! Response constructors.\n+//!\n+\n+use std::str::StrAllocating;\n+use std::io::{File, MemReader};\n+use std::path::Path;\n+\n+use modifier::Modifier;\n+use http::headers::content_type::MediaType;\n+use content_type::get_content_type;\n+use {status, Response, Url};\n+\n+/// A response modifier for setting the content-type header.\n+pub struct ContentType(pub MediaType);\n+\n+impl ContentType {\n+    /// Create a new ContentType modifier from the parts of a content-type header value.\n+    #[inline]\n+    pub fn new<S: StrAllocating, S1: StrAllocating>(type_: S, subtype: S1) -> ContentType {\n+        ContentType(MediaType::new(type_.into_string(), subtype.into_string(), vec![]))\n+    }\n+}\n+\n+impl Modifier<Response> for ContentType {\n+    #[inline]\n+    fn modify(self, mut res: Response) -> Response {\n+        let ContentType(media) = self;\n+        res.headers.content_type = Some(media);\n+        res\n+    }\n+}\n+\n+/// A response modifier for seeting the body of a response.\n+pub struct Body<B: Bodyable>(pub B);\n+\n+impl<B: Bodyable> Modifier<Response> for Body<B> {\n+    #[inline]\n+    fn modify(self, mut res: Response) -> Response {\n+        let Body(b) = self;\n+        b.set_body(&mut res);\n+        res\n+    }\n+}\n+\n+/// A modifier that can be used to set the body of a response.",
        "path": "src/response/modifiers.rs",
        "position": null,
        "original_position": 65,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "zzmp",
            "id": 5403956,
            "node_id": "MDQ6VXNlcjU0MDM5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5403956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zzmp",
            "html_url": "https://github.com/zzmp",
            "followers_url": "https://api.github.com/users/zzmp/followers",
            "following_url": "https://api.github.com/users/zzmp/following{/other_user}",
            "gists_url": "https://api.github.com/users/zzmp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zzmp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zzmp/subscriptions",
            "organizations_url": "https://api.github.com/users/zzmp/orgs",
            "repos_url": "https://api.github.com/users/zzmp/repos",
            "events_url": "https://api.github.com/users/zzmp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zzmp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I thought modifiers were `struct`s. Calling this `trait` a modifier as well is confusing.\n",
        "created_at": "2014-11-02T05:27:15Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19709869",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19709869"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19709869"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19716058",
        "pull_request_review_id": null,
        "id": 19716058,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE2MDU4",
        "diff_hunk": "@@ -62,6 +63,9 @@ pub use http::headers;\n // Expose `GetCached` as `Plugin` so users can do `use iron::Plugin`.\n pub use plugin::GetCached as Plugin;\n \n+// Expose modifiers.\n+pub use modifier::Set;",
        "path": "src/lib.rs",
        "position": 13,
        "original_position": 13,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We might use modifiers for other types in the future.\n",
        "created_at": "2014-11-02T23:08:02Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19716058",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19716058"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19716058"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19716063",
        "pull_request_review_id": null,
        "id": 19716063,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE2MDYz",
        "diff_hunk": "@@ -51,10 +53,11 @@ impl Response {\n     }\n \n     /// Create a new response with the status.\n+    #[deprecated = \"Use `Response::new().set(Status(status))` instead.\"]",
        "path": "src/response/mod.rs",
        "position": 39,
        "original_position": 39,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Whenever is most convenient, likely after most middleware have been fixed.\n",
        "created_at": "2014-11-02T23:08:38Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19716063",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19716063"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19716063"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19716067",
        "pull_request_review_id": null,
        "id": 19716067,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE2MDY3",
        "diff_hunk": "@@ -103,39 +109,56 @@ impl Response {\n     // `write_back` consumes the `Response`.\n     #[doc(hidden)]\n     pub fn write_back(self, http_res: &mut HttpResponse) {\n-        http_res.headers = self.headers.clone();\n+        http_res.headers = *self.headers.clone();\n \n         // Default to a 404 if no response code was set\n         http_res.status = self.status.clone().unwrap_or(status::NotFound);\n \n-        // Read the body into the http_res body\n-        let mut body = self.body.unwrap_or_else(|| box MemReader::new(vec![]) as Box<Reader + Send>);\n-        let _ = match body.read_to_end() {\n-            Ok(body_content) => {\n-                let plain_txt = MediaType {\n-                    type_: \"text\".to_string(),\n-                    subtype: \"plain\".to_string(),\n-                    parameters: vec![]\n-                };\n-\n-                // Set content length and type\n-                http_res.headers.content_length =\n-                    Some(body_content.len());\n+        match self.body {\n+            Some(mut body) => {\n                 http_res.headers.content_type =\n-                    Some(http_res.headers.content_type.clone().unwrap_or(plain_txt));\n-\n-                // Write the body\n-                http_res.write(body_content.as_slice())\n+                    Some(http_res.headers\n+                            .content_type\n+                            .clone()\n+                            .unwrap_or_else(||\n+                                MediaType::new(\"text\".into_string(), \"plain\".into_string(), vec![])\n+                            ));\n+\n+                // FIXME: Manually inlined io::util::copy",
        "path": "src/response/mod.rs",
        "position": null,
        "original_position": 116,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Makes for a very long line\n",
        "created_at": "2014-11-02T23:09:17Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19716067",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19716067"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19716067"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19716093",
        "pull_request_review_id": null,
        "id": 19716093,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE2MDkz",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses\n+//!\n+//! Modifiers can be used to edit Responses both through the owning\n+//! method `set` and the mutating `set_mut`, both of which are\n+//! defined through the `Set` trait.\n+//!\n+//! Instead of having a combinatorial explosion of Response methods\n+//! and constructors, we instead provide a series of modifiers that\n+//! can be used through the Set trait.\n+//!\n+//! For instance, instead of `Response::redirect` constructing a\n+//! redirect response, we provide a `Redirect` modifier, so you\n+//! can just do:\n+//!\n+//! ```rust,ignore\n+//! Response::new().set(Status(status)).set(Redirect(url));\n+//! ```\n+//!\n+//! This is much more extensible as it allows you to combine\n+//! arbitrary modifiers without having a massive number of\n+//! Response constructors.\n+//!\n+\n+use std::str::StrAllocating;\n+use std::io::{File, MemReader};\n+use std::path::Path;\n+\n+use modifier::Modifier;",
        "path": "src/response/modifiers.rs",
        "position": 32,
        "original_position": 28,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We might use modifiers in other types in the future.\n",
        "created_at": "2014-11-02T23:12:14Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19716093",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19716093"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19716093"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/19716109",
        "pull_request_review_id": null,
        "id": 19716109,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE2MTA5",
        "diff_hunk": "@@ -0,0 +1,150 @@\n+//! Defines a series of convenience modifiers for editing Responses",
        "path": "src/response/modifiers.rs",
        "position": 1,
        "original_position": 1,
        "commit_id": "def0505f60dff646838586cc507d441c94f63e7b",
        "original_commit_id": "9f9745b96f999a7719cbe8ca78422f1da1a40802",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done.\n",
        "created_at": "2014-11-02T23:13:40Z",
        "updated_at": "2014-11-03T22:10:13Z",
        "html_url": "https://github.com/iron/iron/pull/207#discussion_r19716109",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/207",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/19716109"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/207#discussion_r19716109"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/207"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/20562235",
        "pull_request_review_id": null,
        "id": 20562235,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTYyMjM1",
        "diff_hunk": "@@ -14,7 +12,7 @@ fn fourzerofour(_: &mut Request) -> IronResult<Response> {\n }\n \n fn main() {\n-    Iron::new(fourzerofour).listen(Ipv4Addr(127, 0, 0, 1), 3000);\n+    Iron::new(fourzerofour).listen(\"127.0.0.1:3000\");",
        "path": "examples/404.rs",
        "position": null,
        "original_position": 14,
        "commit_id": "378c33ee704dbed598264299fa545b404022fe99",
        "original_commit_id": "297b005adeafecafadd56f36666b273d740cff65",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can you change all these to \"localhost:3000\"?\n",
        "created_at": "2014-11-19T08:19:13Z",
        "updated_at": "2014-11-23T00:39:55Z",
        "html_url": "https://github.com/iron/iron/pull/222#discussion_r20562235",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/222",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/20562235"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/222#discussion_r20562235"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/222"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/20562248",
        "pull_request_review_id": null,
        "id": 20562248,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTYyMjQ4",
        "diff_hunk": "@@ -45,23 +43,21 @@ impl<H: Handler> Iron<H> {\n     /// another task, so is not blocking.\n     ///\n     /// Defaults to a threadpool of size 100.\n-    pub fn listen(self, ip: IpAddr, port: u16) {\n+    pub fn listen<A: ToSocketAddr + Send>(self, addr: A) {",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 34,
        "commit_id": "378c33ee704dbed598264299fa545b404022fe99",
        "original_commit_id": "297b005adeafecafadd56f36666b273d740cff65",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does this actually need the Send bound? It's not sent anywhere.\n",
        "created_at": "2014-11-19T08:19:39Z",
        "updated_at": "2014-11-23T00:39:55Z",
        "html_url": "https://github.com/iron/iron/pull/222#discussion_r20562248",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/222",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/20562248"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/222#discussion_r20562248"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/222"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/20562375",
        "pull_request_review_id": null,
        "id": 20562375,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTYyMzc1",
        "diff_hunk": "@@ -45,23 +43,21 @@ impl<H: Handler> Iron<H> {\n     /// another task, so is not blocking.\n     ///\n     /// Defaults to a threadpool of size 100.\n-    pub fn listen(self, ip: IpAddr, port: u16) {\n+    pub fn listen<A: ToSocketAddr + Send>(self, addr: A) {",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 34,
        "commit_id": "378c33ee704dbed598264299fa545b404022fe99",
        "original_commit_id": "297b005adeafecafadd56f36666b273d740cff65",
        "user": {
            "login": "barosl",
            "id": 573768,
            "node_id": "MDQ6VXNlcjU3Mzc2OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/573768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barosl",
            "html_url": "https://github.com/barosl",
            "followers_url": "https://api.github.com/users/barosl/followers",
            "following_url": "https://api.github.com/users/barosl/following{/other_user}",
            "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barosl/subscriptions",
            "organizations_url": "https://api.github.com/users/barosl/orgs",
            "repos_url": "https://api.github.com/users/barosl/repos",
            "events_url": "https://api.github.com/users/barosl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barosl/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The compiler complains if I omit `Send`. In fact, I was forced to insert it because of that.\n\n```\nerror: the trait `core::kinds::Send` is not implemented for the type `A`\nnote: the closure that captures `addr` requires that all captured variables \" implement the trait `core::kinds::Send`\n\nerror: the parameter type `A` may not live long enough\nhelp: consider adding an explicit lifetime bound `A: 'static`...\nnote: ...so that the variable `addr` can be captured into a proc\n```\n\nI think that's because `addr` is brought to `proc()`. It should capture all the variables. Are there any better solutions?\n",
        "created_at": "2014-11-19T08:24:06Z",
        "updated_at": "2014-11-23T00:39:55Z",
        "html_url": "https://github.com/iron/iron/pull/222#discussion_r20562375",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/222",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/20562375"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/222#discussion_r20562375"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/222"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/20562446",
        "pull_request_review_id": null,
        "id": 20562446,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTYyNDQ2",
        "diff_hunk": "@@ -45,23 +43,21 @@ impl<H: Handler> Iron<H> {\n     /// another task, so is not blocking.\n     ///\n     /// Defaults to a threadpool of size 100.\n-    pub fn listen(self, ip: IpAddr, port: u16) {\n+    pub fn listen<A: ToSocketAddr + Send>(self, addr: A) {",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 34,
        "commit_id": "378c33ee704dbed598264299fa545b404022fe99",
        "original_commit_id": "297b005adeafecafadd56f36666b273d740cff65",
        "user": {
            "login": "barosl",
            "id": 573768,
            "node_id": "MDQ6VXNlcjU3Mzc2OA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/573768?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/barosl",
            "html_url": "https://github.com/barosl",
            "followers_url": "https://api.github.com/users/barosl/followers",
            "following_url": "https://api.github.com/users/barosl/following{/other_user}",
            "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/barosl/subscriptions",
            "organizations_url": "https://api.github.com/users/barosl/orgs",
            "repos_url": "https://api.github.com/users/barosl/repos",
            "events_url": "https://api.github.com/users/barosl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/barosl/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It seems that if I do `addr.to_socket_addr()` outside of the `proc()`, and then pass the converted `SocketAddr` to `proc()`, it works. Should I proceed like this?\n",
        "created_at": "2014-11-19T08:25:52Z",
        "updated_at": "2014-11-23T00:39:55Z",
        "html_url": "https://github.com/iron/iron/pull/222#discussion_r20562446",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/222",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/20562446"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/222#discussion_r20562446"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/222"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/20563042",
        "pull_request_review_id": null,
        "id": 20563042,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTYzMDQy",
        "diff_hunk": "@@ -45,23 +43,21 @@ impl<H: Handler> Iron<H> {\n     /// another task, so is not blocking.\n     ///\n     /// Defaults to a threadpool of size 100.\n-    pub fn listen(self, ip: IpAddr, port: u16) {\n+    pub fn listen<A: ToSocketAddr + Send>(self, addr: A) {",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 34,
        "commit_id": "378c33ee704dbed598264299fa545b404022fe99",
        "original_commit_id": "297b005adeafecafadd56f36666b273d740cff65",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh, I misread this code here. If the IronListener was created in this thread then sent over it would be fine, but since it is created inside the proc we do send addr.\n\nI'd rather not have the Send bound, so why we just create the IronListener outside the proc then move it into the proc to call .serve.\n",
        "created_at": "2014-11-19T08:43:31Z",
        "updated_at": "2014-11-23T00:39:55Z",
        "html_url": "https://github.com/iron/iron/pull/222#discussion_r20563042",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/222",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/20563042"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/222#discussion_r20563042"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/222"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/20563045",
        "pull_request_review_id": null,
        "id": 20563045,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTYzMDQ1",
        "diff_hunk": "@@ -45,23 +43,21 @@ impl<H: Handler> Iron<H> {\n     /// another task, so is not blocking.\n     ///\n     /// Defaults to a threadpool of size 100.\n-    pub fn listen(self, ip: IpAddr, port: u16) {\n+    pub fn listen<A: ToSocketAddr + Send>(self, addr: A) {\n         spawn(proc() {\n             IronListener {\n                 handler: Arc::new(self.handler),\n-                ip: ip,\n-                port: port\n+                addr: addr.to_socket_addr().unwrap(),\n             }.serve(100)\n         });\n     }\n \n     /// Kick off the server process with X threads.\n-    pub fn listen_with(self, ip: IpAddr, port: u16, threads: uint) {\n+    pub fn listen_with<A: ToSocketAddr + Send>(self, addr: A, threads: uint) {",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 47,
        "commit_id": "378c33ee704dbed598264299fa545b404022fe99",
        "original_commit_id": "297b005adeafecafadd56f36666b273d740cff65",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "same here - honestly listen should probably just call listen_with\n",
        "created_at": "2014-11-19T08:43:38Z",
        "updated_at": "2014-11-23T00:39:55Z",
        "html_url": "https://github.com/iron/iron/pull/222#discussion_r20563045",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/222",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/20563045"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/222#discussion_r20563045"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/222"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/20760498",
        "pull_request_review_id": null,
        "id": 20760498,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzYwNDk4",
        "diff_hunk": "@@ -34,13 +34,19 @@ impl<H: Handler> Iron<H> {\n     /// another task, so is not blocking.\n     ///\n     /// Defaults to a threadpool of size 100.\n-    pub fn listen(self, ip: IpAddr, port: u16) -> IronResult<Listening> {\n+    pub fn listen<A: ToSocketAddr>(self, addr: A) -> IronResult<Listening> {\n+        let SocketAddr { ip, port } = try!(addr.to_socket_addr()\n+            .map_err(|e| box FileError::new(e) as IronError));",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 25,
        "commit_id": "378c33ee704dbed598264299fa545b404022fe99",
        "original_commit_id": "cd60d6a5963d75d975b900a64e507c31c463956f",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You should create a new `InvalidAddressError` and use that instead.\n",
        "created_at": "2014-11-22T22:57:14Z",
        "updated_at": "2014-11-23T00:39:55Z",
        "html_url": "https://github.com/iron/iron/pull/222#discussion_r20760498",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/222",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/20760498"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/222#discussion_r20760498"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/222"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23359047",
        "pull_request_review_id": null,
        "id": 23359047,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzU5MDQ3",
        "diff_hunk": "@@ -113,7 +113,7 @@ pub struct Redirect(pub Url);\n impl Modifier<Response> for Redirect {\n     fn modify(self, res: &mut Response) {\n         let Redirect(url) = self;\n-        res.headers.set(headers::Location(format!(\"{:?}\", url)));\n+        res.headers.set(headers::Location(format!(\"{}\", url)));",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 5,
        "commit_id": "8de5fd3f0af1d459a70458b42902bf1c8661ae7b",
        "original_commit_id": "ca058bd83a8c6246fbe5cefc01dde1ad65469b85",
        "user": {
            "login": "s-panferov",
            "id": 198327,
            "node_id": "MDQ6VXNlcjE5ODMyNw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/198327?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/s-panferov",
            "html_url": "https://github.com/s-panferov",
            "followers_url": "https://api.github.com/users/s-panferov/followers",
            "following_url": "https://api.github.com/users/s-panferov/following{/other_user}",
            "gists_url": "https://api.github.com/users/s-panferov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/s-panferov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/s-panferov/subscriptions",
            "organizations_url": "https://api.github.com/users/s-panferov/orgs",
            "repos_url": "https://api.github.com/users/s-panferov/repos",
            "events_url": "https://api.github.com/users/s-panferov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/s-panferov/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe we can use just `to_string()` here? Or it is a bad practice?\n",
        "created_at": "2015-01-22T07:31:42Z",
        "updated_at": "2015-01-22T09:20:10Z",
        "html_url": "https://github.com/iron/iron/pull/270#discussion_r23359047",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/270",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23359047"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/270#discussion_r23359047"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/270"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23361705",
        "pull_request_review_id": null,
        "id": 23361705,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzYxNzA1",
        "diff_hunk": "@@ -113,7 +113,7 @@ pub struct Redirect(pub Url);\n impl Modifier<Response> for Redirect {\n     fn modify(self, res: &mut Response) {\n         let Redirect(url) = self;\n-        res.headers.set(headers::Location(format!(\"{:?}\", url)));\n+        res.headers.set(headers::Location(format!(\"{}\", url)));",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 5,
        "commit_id": "8de5fd3f0af1d459a70458b42902bf1c8661ae7b",
        "original_commit_id": "ca058bd83a8c6246fbe5cefc01dde1ad65469b85",
        "user": {
            "login": "ProtectedMode",
            "id": 3844517,
            "node_id": "MDQ6VXNlcjM4NDQ1MTc=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3844517?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ProtectedMode",
            "html_url": "https://github.com/ProtectedMode",
            "followers_url": "https://api.github.com/users/ProtectedMode/followers",
            "following_url": "https://api.github.com/users/ProtectedMode/following{/other_user}",
            "gists_url": "https://api.github.com/users/ProtectedMode/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ProtectedMode/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ProtectedMode/subscriptions",
            "organizations_url": "https://api.github.com/users/ProtectedMode/orgs",
            "repos_url": "https://api.github.com/users/ProtectedMode/repos",
            "events_url": "https://api.github.com/users/ProtectedMode/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ProtectedMode/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@s-panferov, Url doesn't have a to_string method as far as I know. If it had/has, to_string would be better.\n",
        "created_at": "2015-01-22T08:46:04Z",
        "updated_at": "2015-01-22T09:20:10Z",
        "html_url": "https://github.com/iron/iron/pull/270#discussion_r23361705",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/270",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23361705"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/270#discussion_r23361705"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/270"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23362679",
        "pull_request_review_id": null,
        "id": 23362679,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzYyNjc5",
        "diff_hunk": "@@ -113,7 +113,7 @@ pub struct Redirect(pub Url);\n impl Modifier<Response> for Redirect {\n     fn modify(self, res: &mut Response) {\n         let Redirect(url) = self;\n-        res.headers.set(headers::Location(format!(\"{:?}\", url)));\n+        res.headers.set(headers::Location(format!(\"{}\", url)));",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 5,
        "commit_id": "8de5fd3f0af1d459a70458b42902bf1c8661ae7b",
        "original_commit_id": "ca058bd83a8c6246fbe5cefc01dde1ad65469b85",
        "user": {
            "login": "s-panferov",
            "id": 198327,
            "node_id": "MDQ6VXNlcjE5ODMyNw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/198327?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/s-panferov",
            "html_url": "https://github.com/s-panferov",
            "followers_url": "https://api.github.com/users/s-panferov/followers",
            "following_url": "https://api.github.com/users/s-panferov/following{/other_user}",
            "gists_url": "https://api.github.com/users/s-panferov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/s-panferov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/s-panferov/subscriptions",
            "organizations_url": "https://api.github.com/users/s-panferov/orgs",
            "repos_url": "https://api.github.com/users/s-panferov/repos",
            "events_url": "https://api.github.com/users/s-panferov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/s-panferov/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@ProtectedMode, it must be there, because of that impl in http://doc.rust-lang.org/nightly/std/string/trait.ToString.html\n\n``` rust\nimpl<T> ToString for T where T: String, T: ?Sized\n```\n",
        "created_at": "2015-01-22T09:09:22Z",
        "updated_at": "2015-01-22T09:20:10Z",
        "html_url": "https://github.com/iron/iron/pull/270#discussion_r23362679",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/270",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23362679"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/270#discussion_r23362679"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/270"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23433131",
        "pull_request_review_id": null,
        "id": 23433131,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDMzMTMx",
        "diff_hunk": "@@ -33,14 +35,14 @@ impl<H: Handler> Iron<H> {\n     ///\n     /// Defaults to a threadpool of size 100.\n     pub fn listen<A: ToSocketAddr>(self, addr: A) -> IronResult<Listening> {\n-        let SocketAddr { ip, port } = try!(addr.to_socket_addr());\n-\n-        Ok(try!(Server::http(ip, port).listen(self)))\n+        self.listen_with(addr, 100)",
        "path": "src/iron.rs",
        "position": 25,
        "original_position": 25,
        "commit_id": "5bfed96df2b28d5aac4eaabf47004e3d1adbc84e",
        "original_commit_id": "68531c0d34d6af44853ba1c5974fc22bd124f18c",
        "user": {
            "login": "michaelsproul",
            "id": 4452260,
            "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4452260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelsproul",
            "html_url": "https://github.com/michaelsproul",
            "followers_url": "https://api.github.com/users/michaelsproul/followers",
            "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
            "repos_url": "https://api.github.com/users/michaelsproul/repos",
            "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Just did this to follow the docs and avoid code duplication.\n",
        "created_at": "2015-01-23T05:49:25Z",
        "updated_at": "2015-01-25T20:11:18Z",
        "html_url": "https://github.com/iron/iron/pull/273#discussion_r23433131",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/273",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23433131"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/273#discussion_r23433131"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/273"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23447964",
        "pull_request_review_id": null,
        "id": 23447964,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDQ3OTY0",
        "diff_hunk": "@@ -33,14 +35,14 @@ impl<H: Handler> Iron<H> {\n     ///\n     /// Defaults to a threadpool of size 100.\n     pub fn listen<A: ToSocketAddr>(self, addr: A) -> IronResult<Listening> {\n-        let SocketAddr { ip, port } = try!(addr.to_socket_addr());\n-\n-        Ok(try!(Server::http(ip, port).listen(self)))\n+        self.listen_with(addr, 100)",
        "path": "src/iron.rs",
        "position": 25,
        "original_position": 25,
        "commit_id": "5bfed96df2b28d5aac4eaabf47004e3d1adbc84e",
        "original_commit_id": "68531c0d34d6af44853ba1c5974fc22bd124f18c",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yup. I have a similar fix in a local branch addressing #272 \n",
        "created_at": "2015-01-23T13:00:59Z",
        "updated_at": "2015-01-25T20:11:18Z",
        "html_url": "https://github.com/iron/iron/pull/273#discussion_r23447964",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/273",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23447964"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/273#discussion_r23447964"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/273"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23511899",
        "pull_request_review_id": null,
        "id": 23511899,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTExODk5",
        "diff_hunk": "@@ -16,76 +16,46 @@\n //! ```\n //!\n //! A request first travels through all BeforeMiddleware, then a Response is generated\n-//! by the Handler, which can be an arbitrary nesting of AroundMiddleware, then all AfterMiddleware\n-//! are called with both the Request and Response. After all AfterMiddleware have been fired,\n-//! the response is written back to the client.\n+//! by the Handler, which can be an arbitrary nesting of AroundMiddleware, then all\n+//! AfterMiddleware are called with both the Request and Response. After all AfterMiddleware\n+//! have been fired, the response is written back to the client.\n //!\n-//! Not all too surprising. Of note is that AfterMiddleware and BeforeMiddleware\n-//! are completely separate, unlike in many other web frameworks.\n+//! Iron's error handling system is pragmatic and focuses on tracking two pieces\n+//! of information for error receivers (other middleware):\n+//!   - The cause of the error\n+//!   - The result (what to do about) the error.",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "be39eca2df5e92b6eb3c33f9da97ba2e9799c19f",
        "original_commit_id": "d39a4c1dad9d59c1bc7b7d32f547225ecd29e9e8",
        "user": {
            "login": "michaelsproul",
            "id": 4452260,
            "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4452260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelsproul",
            "html_url": "https://github.com/michaelsproul",
            "followers_url": "https://api.github.com/users/michaelsproul/followers",
            "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
            "repos_url": "https://api.github.com/users/michaelsproul/repos",
            "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This list looks funky in the HTML docs. Use a `*`?\n",
        "created_at": "2015-01-26T03:40:33Z",
        "updated_at": "2015-01-28T05:36:42Z",
        "html_url": "https://github.com/iron/iron/pull/275#discussion_r23511899",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/275",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23511899"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/275#discussion_r23511899"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23511909",
        "pull_request_review_id": null,
        "id": 23511909,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTExOTA5",
        "diff_hunk": "@@ -94,24 +64,16 @@ pub trait Handler: Send + Sync {\n /// the ability to change control-flow, such as authorization middleware, or for editing\n /// the request by modifying the headers.\n ///\n-/// `BeforeMiddleware` only have access to the Request, if you need to modify or read a Response,\n-/// you will need `AfterMiddleware`.\n+/// `BeforeMiddleware` only have access to the Request, if you need to modify or read\n+/// a Response, you will need `AfterMiddleware`. Middleware which wishes to send an\n+/// early response that is not an error cannot be `BeforeMiddleware`, but should\n+/// instead be `AroundMiddleware`.\n pub trait BeforeMiddleware: Send + Sync {\n     /// Do whatever work this middleware should do with a `Request` object.\n-    ///\n-    /// An error here is propagated by the containing Chain to, first, this Middleware's\n-    /// `catch` method, then every subsequent `BeforeMiddleware`'s `catch` methods until one returns\n-    /// Ok(()) or the Chain's `Handler` is reached, at which point the `Handler`'s `catch` method is\n-    /// called to produce an error Response.\n-    fn before(&self, &mut Request) -> IronResult<()>;\n+    fn before(&self, _: &mut Request) -> IronResult<()> { Ok(()) }\n \n-    /// Try to `catch` an error thrown by this Middleware or a previous `BeforeMiddleware`.\n-    ///\n-    /// Should only return Ok(()) if the error has been completely handled and a Chain\n-    /// can proceed as normal.\n-    fn catch(&self, _: &mut Request, err: IronError) -> IronResult<()> {\n-        Err(err)\n-    }\n+    /// Try to catch an error thrown by a previous `BeforeMiddleware`.",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 132,
        "commit_id": "be39eca2df5e92b6eb3c33f9da97ba2e9799c19f",
        "original_commit_id": "d39a4c1dad9d59c1bc7b7d32f547225ecd29e9e8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should be changed to reflect the comment on AfterMiddleware::catch\n",
        "created_at": "2015-01-26T03:41:47Z",
        "updated_at": "2015-01-28T05:36:42Z",
        "html_url": "https://github.com/iron/iron/pull/275#discussion_r23511909",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/275",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23511909"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/275#discussion_r23511909"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23511929",
        "pull_request_review_id": null,
        "id": 23511929,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTExOTI5",
        "diff_hunk": "@@ -16,76 +16,46 @@\n //! ```\n //!\n //! A request first travels through all BeforeMiddleware, then a Response is generated\n-//! by the Handler, which can be an arbitrary nesting of AroundMiddleware, then all AfterMiddleware\n-//! are called with both the Request and Response. After all AfterMiddleware have been fired,\n-//! the response is written back to the client.\n+//! by the Handler, which can be an arbitrary nesting of AroundMiddleware, then all\n+//! AfterMiddleware are called with both the Request and Response. After all AfterMiddleware\n+//! have been fired, the response is written back to the client.\n //!\n-//! Not all too surprising. Of note is that AfterMiddleware and BeforeMiddleware\n-//! are completely separate, unlike in many other web frameworks.\n+//! Iron's error handling system is pragmatic and focuses on tracking two pieces\n+//! of information for error receivers (other middleware):\n+//!   - The cause of the error\n+//!   - The result (what to do about) the error.\n //!\n-//! Iron's flexibility comes into play with its novel approach to error handling, which encourages\n-//! not just reporting errors, but *handling* them. An error is not meant to be fatal in Iron, but\n-//! is instead likely to be handled by downstream Middleware. Middleware authors should keep this\n-//! in mind when designing their APIs.\n+//! The cause of the error is represented simply by the error itself, and the result\n+//! of the error, representing the action to take in response to the error, is a complete\n+//! Response, which will be sent at the end of the error flow.\n //!\n-//! Iron's error propagation and handling scheme is inspired by two primary rules:\n+//! When an error is thrown in Iron by any middleware or handler returning an `Err`\n+//! variant with an `IronError`, the flow of the Request switches to the error flow,\n+//! which proceeds to just call the `catch` method of middleware and sidesteps the\n+//! `Handler` entirely, since there is already a Response in the error.\n //!\n-//!   * Errors should persist and be propagated along the same route as successes until they are\n-//!     handled.\n+//! Once a Request has entered the error flow, it is impossible to exit. It is therefore\n+//! impossible to fully \"handle\" an error and return to the normal flow, since there is\n+//! often no sensical place to return to and intermingling the two flows results in",
        "path": "src/middleware.rs",
        "position": null,
        "original_position": 36,
        "commit_id": "be39eca2df5e92b6eb3c33f9da97ba2e9799c19f",
        "original_commit_id": "d39a4c1dad9d59c1bc7b7d32f547225ecd29e9e8",
        "user": {
            "login": "michaelsproul",
            "id": 4452260,
            "node_id": "MDQ6VXNlcjQ0NTIyNjA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4452260?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaelsproul",
            "html_url": "https://github.com/michaelsproul",
            "followers_url": "https://api.github.com/users/michaelsproul/followers",
            "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions",
            "organizations_url": "https://api.github.com/users/michaelsproul/orgs",
            "repos_url": "https://api.github.com/users/michaelsproul/repos",
            "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaelsproul/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nitpick: \"sensible\" instead of \"sensical\"? I love nonsensical as a word, but sensical doesn't seem to be a word, or at least not a recognised/common word.\n",
        "created_at": "2015-01-26T03:43:56Z",
        "updated_at": "2015-01-28T05:36:42Z",
        "html_url": "https://github.com/iron/iron/pull/275#discussion_r23511929",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/275",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23511929"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/275#discussion_r23511929"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23514341",
        "pull_request_review_id": null,
        "id": 23514341,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTE0MzQx",
        "diff_hunk": "@@ -52,49 +63,41 @@ impl<H: Handler> Iron<H> {\n     pub fn new(handler: H) -> Iron<H> {\n         Iron { handler: handler }\n     }\n+\n+    fn bad_request(&self, mut http_res: HttpResponse<Fresh>) {",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 58,
        "commit_id": "be39eca2df5e92b6eb3c33f9da97ba2e9799c19f",
        "original_commit_id": "d39a4c1dad9d59c1bc7b7d32f547225ecd29e9e8",
        "user": {
            "login": "s-panferov",
            "id": 198327,
            "node_id": "MDQ6VXNlcjE5ODMyNw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/198327?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/s-panferov",
            "html_url": "https://github.com/s-panferov",
            "followers_url": "https://api.github.com/users/s-panferov/followers",
            "following_url": "https://api.github.com/users/s-panferov/following{/other_user}",
            "gists_url": "https://api.github.com/users/s-panferov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/s-panferov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/s-panferov/subscriptions",
            "organizations_url": "https://api.github.com/users/s-panferov/orgs",
            "repos_url": "https://api.github.com/users/s-panferov/repos",
            "events_url": "https://api.github.com/users/s-panferov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/s-panferov/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we need to specify `Fresh`? It's default as I can see.\n",
        "created_at": "2015-01-26T06:46:07Z",
        "updated_at": "2015-01-28T05:36:42Z",
        "html_url": "https://github.com/iron/iron/pull/275#discussion_r23514341",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/275",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23514341"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/275#discussion_r23514341"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23514391",
        "pull_request_review_id": null,
        "id": 23514391,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTE0Mzkx",
        "diff_hunk": "@@ -33,8 +33,9 @@ extern crate hyper;\n extern crate \"typemap\" as tmap;\n extern crate plugin;\n extern crate \"modifier\" as modfier;\n-extern crate error;\n+extern crate \"error\" as err;",
        "path": "src/lib.rs",
        "position": 82,
        "original_position": 5,
        "commit_id": "be39eca2df5e92b6eb3c33f9da97ba2e9799c19f",
        "original_commit_id": "d39a4c1dad9d59c1bc7b7d32f547225ecd29e9e8",
        "user": {
            "login": "s-panferov",
            "id": 198327,
            "node_id": "MDQ6VXNlcjE5ODMyNw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/198327?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/s-panferov",
            "html_url": "https://github.com/s-panferov",
            "followers_url": "https://api.github.com/users/s-panferov/followers",
            "following_url": "https://api.github.com/users/s-panferov/following{/other_user}",
            "gists_url": "https://api.github.com/users/s-panferov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/s-panferov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/s-panferov/subscriptions",
            "organizations_url": "https://api.github.com/users/s-panferov/orgs",
            "repos_url": "https://api.github.com/users/s-panferov/repos",
            "events_url": "https://api.github.com/users/s-panferov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/s-panferov/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe it's better to rename `error` to something else? I usually rename it too in my own code  [same thing](https://github.com/rustless/valico/commit/e40f668b893aee50e4ba18759672c373f380e735?diff=unified#diff-dd5f1b0c97a16f836553c88faac50f8aR3). \n",
        "created_at": "2015-01-26T06:49:02Z",
        "updated_at": "2015-01-28T05:36:42Z",
        "html_url": "https://github.com/iron/iron/pull/275#discussion_r23514391",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/275",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23514391"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/275#discussion_r23514391"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23531748",
        "pull_request_review_id": null,
        "id": 23531748,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTMxNzQ4",
        "diff_hunk": "@@ -33,8 +33,9 @@ extern crate hyper;\n extern crate \"typemap\" as tmap;\n extern crate plugin;\n extern crate \"modifier\" as modfier;\n-extern crate error;\n+extern crate \"error\" as err;",
        "path": "src/lib.rs",
        "position": 82,
        "original_position": 5,
        "commit_id": "be39eca2df5e92b6eb3c33f9da97ba2e9799c19f",
        "original_commit_id": "d39a4c1dad9d59c1bc7b7d32f547225ecd29e9e8",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hmm.. I think it's usually not needed - I only did it here so I could have a module named error as well.\n",
        "created_at": "2015-01-26T14:04:40Z",
        "updated_at": "2015-01-28T05:36:42Z",
        "html_url": "https://github.com/iron/iron/pull/275#discussion_r23531748",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/275",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23531748"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/275#discussion_r23531748"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/275"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/23790207",
        "pull_request_review_id": null,
        "id": 23790207,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzkwMjA3",
        "diff_hunk": "@@ -58,10 +58,11 @@ fn main() {\n     let silent = Iron::new(Logger::new(LoggerMode::Silent).around(Box::new(hello_world)));\n     let large = Iron::new(Logger::new(LoggerMode::Large).around(Box::new(hello_world)));\n \n+    println!(\"Starting servers on 2000, 3000, and 4000\");\n+    \n     tiny.listen(\"localhost:2000\").unwrap();",
        "path": "examples/around.rs",
        "position": null,
        "original_position": 6,
        "commit_id": "7e0ac7026d0119e6e33721afdf44dd20540c2259",
        "original_commit_id": "8cdba9dc79077630d785351e8713e6986a87c4b3",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this example is actually incorrect now - we'll block here and never set up `silent` or `large`.\n\nCan you change this to `let _tiny_listening = tiny..` for each of these so that creating the server doesn't block, then bring back the println at the bottom?\n",
        "created_at": "2015-01-29T18:31:43Z",
        "updated_at": "2015-01-29T19:18:52Z",
        "html_url": "https://github.com/iron/iron/pull/285#discussion_r23790207",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/285",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/23790207"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/285#discussion_r23790207"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/285"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/24551086",
        "pull_request_review_id": null,
        "id": 24551086,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTUxMDg2",
        "diff_hunk": "@@ -26,7 +26,24 @@ pub struct Iron<H> {\n     pub handler: H,\n \n     /// Once listening, the local address that this server is bound to.\n-    pub addr: Option<SocketAddr>\n+    pub addr: Option<SocketAddr>,\n+\n+    /// Server security mode.\n+    pub security: Security\n+}\n+\n+/// Server security mode, either `Insecure` for HTTP or `Secure` for HTTPS.\n+pub enum Security {",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 12,
        "commit_id": "aa2e843fcedc7d5af9ab80037369593c7d5ca712",
        "original_commit_id": "0e0a486d6ada7398bf4a5ce9c90e3aa9a155a449",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can this just be `Protocol` with `Http` and `Https` as variants?\n",
        "created_at": "2015-02-12T01:18:16Z",
        "updated_at": "2015-02-12T13:15:11Z",
        "html_url": "https://github.com/iron/iron/pull/290#discussion_r24551086",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/290",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/24551086"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/290#discussion_r24551086"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/290"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/24551145",
        "pull_request_review_id": null,
        "id": 24551145,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTUxMTQ1",
        "diff_hunk": "@@ -64,7 +64,8 @@ impl<'a> Request<'a> {\n     /// Create a request from an HttpRequest.\n     ///\n     /// This constructor consumes the HttpRequest.\n-    pub fn from_http(req: HttpRequest<'a>, local_addr: SocketAddr) -> Result<Request<'a>, String> {\n+    pub fn from_http(req: HttpRequest<'a>, local_addr: SocketAddr, protocol: &str)",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 5,
        "commit_id": "aa2e843fcedc7d5af9ab80037369593c7d5ca712",
        "original_commit_id": "0e0a486d6ada7398bf4a5ce9c90e3aa9a155a449",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If we changed `Security` to `Protocol` then the `protocol` argument here could be changed to `Protocol` from `&str`.\n",
        "created_at": "2015-02-12T01:19:26Z",
        "updated_at": "2015-02-12T13:15:11Z",
        "html_url": "https://github.com/iron/iron/pull/290#discussion_r24551145",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/290",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/24551145"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/290#discussion_r24551145"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/290"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/24551157",
        "pull_request_review_id": null,
        "id": 24551157,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTUxMTU3",
        "diff_hunk": "@@ -85,8 +108,13 @@ impl<H: Handler> Iron<H> {\n \n impl<H: Handler> ::hyper::server::Handler for Iron<H> {\n     fn handle(&self, http_req: HttpRequest, http_res: HttpResponse<Fresh>) {\n+        let protocol = match self.security {\n+            Security::Insecure => \"http\",\n+            Security::Secure { .. } => \"https\"",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 56,
        "commit_id": "aa2e843fcedc7d5af9ab80037369593c7d5ca712",
        "original_commit_id": "0e0a486d6ada7398bf4a5ce9c90e3aa9a155a449",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should be factored into a method and called later - `Request::from_http` should take a `Protocol/Security`.\n",
        "created_at": "2015-02-12T01:19:50Z",
        "updated_at": "2015-02-12T13:15:11Z",
        "html_url": "https://github.com/iron/iron/pull/290#discussion_r24551157",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/290",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/24551157"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/290#discussion_r24551157"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/290"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/24551208",
        "pull_request_review_id": null,
        "id": 24551208,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTUxMjA4",
        "diff_hunk": "@@ -26,7 +26,24 @@ pub struct Iron<H> {\n     pub handler: H,\n \n     /// Once listening, the local address that this server is bound to.\n-    pub addr: Option<SocketAddr>\n+    pub addr: Option<SocketAddr>,\n+\n+    /// Server security mode.\n+    pub security: Security\n+}\n+\n+/// Server security mode, either `Insecure` for HTTP or `Secure` for HTTPS.\n+pub enum Security {",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 12,
        "commit_id": "aa2e843fcedc7d5af9ab80037369593c7d5ca712",
        "original_commit_id": "0e0a486d6ada7398bf4a5ce9c90e3aa9a155a449",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we discourage matching on this enum exhaustively in the docs? We may later want to add other options, like `Http2`.\n",
        "created_at": "2015-02-12T01:21:01Z",
        "updated_at": "2015-02-12T13:15:11Z",
        "html_url": "https://github.com/iron/iron/pull/290#discussion_r24551208",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/290",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/24551208"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/290#discussion_r24551208"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/290"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/24551426",
        "pull_request_review_id": null,
        "id": 24551426,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTUxNDI2",
        "diff_hunk": "@@ -58,7 +75,13 @@ impl<H: Handler> Iron<H> {\n         let SocketAddr { ip, port } = sock_addr.clone();\n         self.addr = Some(sock_addr);\n \n-        Ok(try!(Server::http(ip, port).listen_threads(self, threads)))\n+        let server = match self.security {\n+            Security::Insecure => Server::http(ip, port),\n+            Security::Secure { ref certificate, ref key } =>\n+                Server::https(ip, port, certificate.clone(), key.clone())",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 34,
        "commit_id": "aa2e843fcedc7d5af9ab80037369593c7d5ca712",
        "original_commit_id": "0e0a486d6ada7398bf4a5ce9c90e3aa9a155a449",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It seems like it is incorrect for the `Iron` instance to own the certificate and key here. Maybe the protocol should instead be passed as an argument to `listen` and `listen_with`?\n",
        "created_at": "2015-02-12T01:24:49Z",
        "updated_at": "2015-02-12T13:15:11Z",
        "html_url": "https://github.com/iron/iron/pull/290#discussion_r24551426",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/290",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/24551426"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/290#discussion_r24551426"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/290"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/24569532",
        "pull_request_review_id": null,
        "id": 24569532,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTY5NTMy",
        "diff_hunk": "@@ -58,7 +75,13 @@ impl<H: Handler> Iron<H> {\n         let SocketAddr { ip, port } = sock_addr.clone();\n         self.addr = Some(sock_addr);\n \n-        Ok(try!(Server::http(ip, port).listen_threads(self, threads)))\n+        let server = match self.security {\n+            Security::Insecure => Server::http(ip, port),\n+            Security::Secure { ref certificate, ref key } =>\n+                Server::https(ip, port, certificate.clone(), key.clone())",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 34,
        "commit_id": "aa2e843fcedc7d5af9ab80037369593c7d5ca712",
        "original_commit_id": "0e0a486d6ada7398bf4a5ce9c90e3aa9a155a449",
        "user": {
            "login": "cyndis",
            "id": 154330,
            "node_id": "MDQ6VXNlcjE1NDMzMA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/154330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cyndis",
            "html_url": "https://github.com/cyndis",
            "followers_url": "https://api.github.com/users/cyndis/followers",
            "following_url": "https://api.github.com/users/cyndis/following{/other_user}",
            "gists_url": "https://api.github.com/users/cyndis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cyndis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cyndis/subscriptions",
            "organizations_url": "https://api.github.com/users/cyndis/orgs",
            "repos_url": "https://api.github.com/users/cyndis/repos",
            "events_url": "https://api.github.com/users/cyndis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cyndis/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do you mean using two enums, one including the certificate and key and one not (\"Protocol\" and \"ProtocolOptions\" or some such)? We need to store the current protocol for use in handle(), so if we only use one enum type we end up storing the cert/key paths too.\n",
        "created_at": "2015-02-12T09:54:37Z",
        "updated_at": "2015-02-12T13:15:11Z",
        "html_url": "https://github.com/iron/iron/pull/290#discussion_r24569532",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/290",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/24569532"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/290#discussion_r24569532"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/290"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/24569710",
        "pull_request_review_id": null,
        "id": 24569710,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTY5NzEw",
        "diff_hunk": "@@ -58,7 +75,13 @@ impl<H: Handler> Iron<H> {\n         let SocketAddr { ip, port } = sock_addr.clone();\n         self.addr = Some(sock_addr);\n \n-        Ok(try!(Server::http(ip, port).listen_threads(self, threads)))\n+        let server = match self.security {\n+            Security::Insecure => Server::http(ip, port),\n+            Security::Secure { ref certificate, ref key } =>\n+                Server::https(ip, port, certificate.clone(), key.clone())",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 34,
        "commit_id": "aa2e843fcedc7d5af9ab80037369593c7d5ca712",
        "original_commit_id": "0e0a486d6ada7398bf4a5ce9c90e3aa9a155a449",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No, one enum would be used, called `Protocol`, completely equivalent to todays `Security`. The modification I am suggesting is that we instead pass the Protocol in through `listen` or `listen_with` rather than receiving it in `new` or some other constructor.\n",
        "created_at": "2015-02-12T09:57:11Z",
        "updated_at": "2015-02-12T13:15:11Z",
        "html_url": "https://github.com/iron/iron/pull/290#discussion_r24569710",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/290",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/24569710"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/290#discussion_r24569710"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/290"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/24569798",
        "pull_request_review_id": null,
        "id": 24569798,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTY5Nzk4",
        "diff_hunk": "@@ -58,7 +75,13 @@ impl<H: Handler> Iron<H> {\n         let SocketAddr { ip, port } = sock_addr.clone();\n         self.addr = Some(sock_addr);\n \n-        Ok(try!(Server::http(ip, port).listen_threads(self, threads)))\n+        let server = match self.security {\n+            Security::Insecure => Server::http(ip, port),\n+            Security::Secure { ref certificate, ref key } =>\n+                Server::https(ip, port, certificate.clone(), key.clone())",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 34,
        "commit_id": "aa2e843fcedc7d5af9ab80037369593c7d5ca712",
        "original_commit_id": "0e0a486d6ada7398bf4a5ce9c90e3aa9a155a449",
        "user": {
            "login": "cyndis",
            "id": 154330,
            "node_id": "MDQ6VXNlcjE1NDMzMA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/154330?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cyndis",
            "html_url": "https://github.com/cyndis",
            "followers_url": "https://api.github.com/users/cyndis/followers",
            "following_url": "https://api.github.com/users/cyndis/following{/other_user}",
            "gists_url": "https://api.github.com/users/cyndis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cyndis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cyndis/subscriptions",
            "organizations_url": "https://api.github.com/users/cyndis/orgs",
            "repos_url": "https://api.github.com/users/cyndis/repos",
            "events_url": "https://api.github.com/users/cyndis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cyndis/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, sounds good.\n",
        "created_at": "2015-02-12T09:58:38Z",
        "updated_at": "2015-02-12T13:15:11Z",
        "html_url": "https://github.com/iron/iron/pull/290#discussion_r24569798",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/290",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/24569798"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/290#discussion_r24569798"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/290"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/26000628",
        "pull_request_review_id": null,
        "id": 26000628,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MDAwNjI4",
        "diff_hunk": "@@ -83,12 +89,12 @@ impl<'a> Modifier<Response> for &'a [u8] {\n }\n \n impl Modifier<Response> for File {\n-    #[inline]\n     fn modify(self, res: &mut Response) {\n-        // Also set the content type.\n-        // self.path().extension_str()\n-        //     .and_then(get_content_type)\n-        //     .and_then(|ct| { res.set_mut(ct) });\n+        // Set the content type based on the file extension if a path is available.\n+        if let Some(path) = self.path() {\n+            let mime_str = MIME_TYPES.mime_for_path(path);\n+            let _ = mime_str.parse().and_then(|mime: Mime| Ok(res.set_mut(mime)));",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 28,
        "commit_id": "21f2da479d72ee9bb977cf68b974cbebeb9fc814",
        "original_commit_id": "d38acc4bb9c03ca037768ee41168e0f07e128d8c",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why not `map` here instead of `and_then`?\n",
        "created_at": "2015-03-07T23:36:07Z",
        "updated_at": "2015-03-07T23:49:18Z",
        "html_url": "https://github.com/iron/iron/pull/291#discussion_r26000628",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/291",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/26000628"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/291#discussion_r26000628"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/27273072",
        "pull_request_review_id": null,
        "id": 27273072,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjczMDcy",
        "diff_hunk": "@@ -69,7 +69,7 @@ extern crate plugin;\n extern crate \"error\" as err;\n extern crate url;\n extern crate num_cpus;\n-extern crate \"conduit-mime-types\" as mime_types;\n+extern crate \"conduit_mime_types\" as mime_types;",
        "path": "src/lib.rs",
        "position": null,
        "original_position": 5,
        "commit_id": "c056cd20a927ec021fb4f0ff559cb0a825bd6d3c",
        "original_commit_id": "4b165143d501fc6c66b276a59bb59af74215fe18",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the quotes are gone now too\n",
        "created_at": "2015-03-27T02:41:37Z",
        "updated_at": "2015-03-28T23:15:42Z",
        "html_url": "https://github.com/iron/iron/pull/320#discussion_r27273072",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/320",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/27273072"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/320#discussion_r27273072"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/320"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/28189108",
        "pull_request_review_id": null,
        "id": 28189108,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MTg5MTA4",
        "diff_hunk": "@@ -64,6 +64,10 @@ impl<H: Handler> Iron<H> {\n     /// This consumes the Iron instance, but does the listening on\n     /// another task, so is not blocking.\n     ///\n+    /// The threading model used does not return a thread but rather a guard.",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 4,
        "commit_id": "9275345a5753ca0731e257039e3ef8c6fbd38adc",
        "original_commit_id": "7e1299e7c71f3d6c6da50aeebea1b3303d4a9dfd",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is the model used by all threading in rust, so it would be better to just say \"This returns a guard, which will automatically...\"\n",
        "created_at": "2015-04-11T00:04:43Z",
        "updated_at": "2015-04-14T01:30:11Z",
        "html_url": "https://github.com/iron/iron/pull/332#discussion_r28189108",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/332",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/28189108"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/332#discussion_r28189108"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/332"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/30463416",
        "pull_request_review_id": null,
        "id": 30463416,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDYzNDE2",
        "diff_hunk": "@@ -134,6 +134,8 @@ pub mod modifier {\n pub mod status {\n     pub use hyper::status::StatusCode as Status;\n     pub use hyper::status::StatusCode::*;\n+",
        "path": "src/lib.rs",
        "position": null,
        "original_position": 4,
        "commit_id": "b5682c962f2016aba50e4f3904717b5c3d167bb4",
        "original_commit_id": "f485b010ce2b9bd005c16389846ee89206683501",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can you delete this newline? otherwise LGTM\n",
        "created_at": "2015-05-16T18:38:13Z",
        "updated_at": "2015-05-16T18:39:13Z",
        "html_url": "https://github.com/iron/iron/pull/345#discussion_r30463416",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/345",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/30463416"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/345#discussion_r30463416"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/345"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/35269571",
        "pull_request_review_id": null,
        "id": 35269571,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjY5NTcx",
        "diff_hunk": "@@ -1,4 +1,6 @@\n language: rust\n+rust:",
        "path": ".travis.yml",
        "position": 2,
        "original_position": 2,
        "commit_id": "3026c0063e66126defbc28222afac7c66c9ee344",
        "original_commit_id": "e8c82f8152edda084daee0d817279da3cde5c6ce",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can you add both stable and nightly instead of hardcoding a version?\n",
        "created_at": "2015-07-22T22:00:31Z",
        "updated_at": "2015-07-24T04:34:12Z",
        "html_url": "https://github.com/iron/iron/pull/361#discussion_r35269571",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/361",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/35269571"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/361#discussion_r35269571"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/361"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/35274598",
        "pull_request_review_id": null,
        "id": 35274598,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mjc0NTk4",
        "diff_hunk": "@@ -1,4 +1,6 @@\n language: rust\n+rust:",
        "path": ".travis.yml",
        "position": 2,
        "original_position": 2,
        "commit_id": "3026c0063e66126defbc28222afac7c66c9ee344",
        "original_commit_id": "e8c82f8152edda084daee0d817279da3cde5c6ce",
        "user": null,
        "body": "@reem added nightly, 1.1.0 has to be defined for the stable part though .. beta is available too if wanted\n",
        "created_at": "2015-07-22T23:00:19Z",
        "updated_at": "2015-07-24T04:34:12Z",
        "html_url": "https://github.com/iron/iron/pull/361#discussion_r35274598",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/361",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/35274598"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/361#discussion_r35274598"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/361"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/35287993",
        "pull_request_review_id": null,
        "id": 35287993,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mjg3OTkz",
        "diff_hunk": "@@ -1,4 +1,6 @@\n language: rust\n+rust:",
        "path": ".travis.yml",
        "position": 2,
        "original_position": 2,
        "commit_id": "3026c0063e66126defbc28222afac7c66c9ee344",
        "original_commit_id": "e8c82f8152edda084daee0d817279da3cde5c6ce",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Great, beta is not needed. Can you squash these changes and I will merge?\n",
        "created_at": "2015-07-23T03:45:21Z",
        "updated_at": "2015-07-24T04:34:12Z",
        "html_url": "https://github.com/iron/iron/pull/361#discussion_r35287993",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/361",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/35287993"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/361#discussion_r35287993"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/361"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/35327819",
        "pull_request_review_id": null,
        "id": 35327819,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzI3ODE5",
        "diff_hunk": "@@ -1,4 +1,6 @@\n language: rust\n+rust:",
        "path": ".travis.yml",
        "position": 2,
        "original_position": 2,
        "commit_id": "3026c0063e66126defbc28222afac7c66c9ee344",
        "original_commit_id": "e8c82f8152edda084daee0d817279da3cde5c6ce",
        "user": null,
        "body": "@reem I removed 1.1.0 since travis downloads the latest stable rust release by itself, but nightly has added and requested changes have been made\n",
        "created_at": "2015-07-23T14:38:04Z",
        "updated_at": "2015-07-24T04:34:12Z",
        "html_url": "https://github.com/iron/iron/pull/361#discussion_r35327819",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/361",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/35327819"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/361#discussion_r35327819"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/361"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/35387929",
        "pull_request_review_id": null,
        "id": 35387929,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mzg3OTI5",
        "diff_hunk": "@@ -1,4 +1,6 @@\n language: rust\n+rust:",
        "path": ".travis.yml",
        "position": 2,
        "original_position": 2,
        "commit_id": "3026c0063e66126defbc28222afac7c66c9ee344",
        "original_commit_id": "e8c82f8152edda084daee0d817279da3cde5c6ce",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hmm, looking at the travis log it appears only nightly is tested now. I think having `1.1.0` is necessary.\n",
        "created_at": "2015-07-24T00:57:26Z",
        "updated_at": "2015-07-24T04:34:12Z",
        "html_url": "https://github.com/iron/iron/pull/361#discussion_r35387929",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/361",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/35387929"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/361#discussion_r35387929"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/361"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/35394975",
        "pull_request_review_id": null,
        "id": 35394975,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mzk0OTc1",
        "diff_hunk": "@@ -1,4 +1,6 @@\n language: rust\n+rust:",
        "path": ".travis.yml",
        "position": 2,
        "original_position": 2,
        "commit_id": "3026c0063e66126defbc28222afac7c66c9ee344",
        "original_commit_id": "e8c82f8152edda084daee0d817279da3cde5c6ce",
        "user": null,
        "body": "@reem I added stable instead which is the equivalent to 1.1.0\n",
        "created_at": "2015-07-24T04:35:20Z",
        "updated_at": "2015-07-24T04:35:20Z",
        "html_url": "https://github.com/iron/iron/pull/361#discussion_r35394975",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/361",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/35394975"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/361#discussion_r35394975"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/361"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/36039895",
        "pull_request_review_id": null,
        "id": 36039895,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDM5ODk1",
        "diff_hunk": "@@ -1,19 +1,63 @@\n //! Iron's HTTP Response representation and associated methods.\n \n-use std::io::{self, Read, Write};\n+use std::io::{self, Write};\n use std::fmt::{self, Debug};\n+use std::fs::File;\n \n use typemap::TypeMap;\n use plugin::Extensible;\n-use modifier::{Set, Modifier};\n-\n+use modifier::{Set, Modifier}; \n use hyper::header::Headers;\n \n use status::{self, Status};\n use {Plugin, headers};\n \n pub use hyper::server::response::Response as HttpResponse;\n-use hyper::net::Fresh;\n+use hyper::net::{Fresh, Streaming};",
        "path": "src/response.rs",
        "position": 19,
        "original_position": 20,
        "commit_id": "a2a898f19a3b2fb602bf5e62406af4a6ac4ee00c",
        "original_commit_id": "4b9c3fc1ec1ff55bd1171230fdb833d190d9d0a3",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can you `pub use` `Streaming` so implementors don't have to depend on hyper explicitly to implement `WriteBody`?\n",
        "created_at": "2015-08-02T06:02:39Z",
        "updated_at": "2015-08-02T06:22:33Z",
        "html_url": "https://github.com/iron/iron/pull/366#discussion_r36039895",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/366",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/36039895"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/366#discussion_r36039895"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/366"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/37597379",
        "pull_request_review_id": null,
        "id": 37597379,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3Mzc5",
        "diff_hunk": "@@ -24,15 +24,15 @@ default = [\"ssl\"]\n ssl = [\"hyper/ssl\"]\n \n [dependencies]\n-typemap = \"*\"\n-url = \"*\"\n-plugin = \"*\"\n-modifier = \"*\"\n-error = \"*\"\n-log = \"*\"\n-conduit-mime-types = \"*\"\n-lazy_static = \"*\"\n-num_cpus = \"*\"\n+typemap = \"0.3\"\n+url = \"0.2\"\n+plugin = \"0.2*\"",
        "path": "Cargo.toml",
        "position": 15,
        "original_position": 15,
        "commit_id": "186ca217dde912ffb1eacc17150d409c1b288687",
        "original_commit_id": "186ca217dde912ffb1eacc17150d409c1b288687",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Looks like a trailing wildcard here\n",
        "created_at": "2015-08-21T00:45:48Z",
        "updated_at": "2015-08-21T00:45:48Z",
        "html_url": "https://github.com/iron/iron/pull/378#discussion_r37597379",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/378",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/37597379"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/378#discussion_r37597379"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/378"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/37597665",
        "pull_request_review_id": null,
        "id": 37597665,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3NjY1",
        "diff_hunk": "@@ -24,15 +24,15 @@ default = [\"ssl\"]\n ssl = [\"hyper/ssl\"]\n \n [dependencies]\n-typemap = \"*\"\n-url = \"*\"\n-plugin = \"*\"\n-modifier = \"*\"\n-error = \"*\"\n-log = \"*\"\n-conduit-mime-types = \"*\"\n-lazy_static = \"*\"\n-num_cpus = \"*\"\n+typemap = \"0.3\"\n+url = \"0.2\"\n+plugin = \"0.2*\"",
        "path": "Cargo.toml",
        "position": 15,
        "original_position": 15,
        "commit_id": "186ca217dde912ffb1eacc17150d409c1b288687",
        "original_commit_id": "186ca217dde912ffb1eacc17150d409c1b288687",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh woops, what behavior does this actually have?\n",
        "created_at": "2015-08-21T00:51:59Z",
        "updated_at": "2015-08-21T00:51:59Z",
        "html_url": "https://github.com/iron/iron/pull/378#discussion_r37597665",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/378",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/37597665"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/378#discussion_r37597665"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/378"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/37597782",
        "pull_request_review_id": null,
        "id": 37597782,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3Nzgy",
        "diff_hunk": "@@ -24,15 +24,15 @@ default = [\"ssl\"]\n ssl = [\"hyper/ssl\"]\n \n [dependencies]\n-typemap = \"*\"\n-url = \"*\"\n-plugin = \"*\"\n-modifier = \"*\"\n-error = \"*\"\n-log = \"*\"\n-conduit-mime-types = \"*\"\n-lazy_static = \"*\"\n-num_cpus = \"*\"\n+typemap = \"0.3\"\n+url = \"0.2\"\n+plugin = \"0.2*\"",
        "path": "Cargo.toml",
        "position": 15,
        "original_position": 15,
        "commit_id": "186ca217dde912ffb1eacc17150d409c1b288687",
        "original_commit_id": "186ca217dde912ffb1eacc17150d409c1b288687",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No idea. Seems like it shouldn't parse.\n",
        "created_at": "2015-08-21T00:53:40Z",
        "updated_at": "2015-08-21T00:53:40Z",
        "html_url": "https://github.com/iron/iron/pull/378#discussion_r37597782",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/378",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/37597782"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/378#discussion_r37597782"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/378"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/37597824",
        "pull_request_review_id": null,
        "id": 37597824,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3ODI0",
        "diff_hunk": "@@ -24,15 +24,15 @@ default = [\"ssl\"]\n ssl = [\"hyper/ssl\"]\n \n [dependencies]\n-typemap = \"*\"\n-url = \"*\"\n-plugin = \"*\"\n-modifier = \"*\"\n-error = \"*\"\n-log = \"*\"\n-conduit-mime-types = \"*\"\n-lazy_static = \"*\"\n-num_cpus = \"*\"\n+typemap = \"0.3\"\n+url = \"0.2\"\n+plugin = \"0.2*\"",
        "path": "Cargo.toml",
        "position": 15,
        "original_position": 15,
        "commit_id": "186ca217dde912ffb1eacc17150d409c1b288687",
        "original_commit_id": "186ca217dde912ffb1eacc17150d409c1b288687",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Surprisingly enough it does work...\n",
        "created_at": "2015-08-21T00:54:24Z",
        "updated_at": "2015-08-21T00:54:24Z",
        "html_url": "https://github.com/iron/iron/pull/378#discussion_r37597824",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/378",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/37597824"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/378#discussion_r37597824"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/378"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/37834701",
        "pull_request_review_id": null,
        "id": 37834701,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0NzAx",
        "diff_hunk": "@@ -37,17 +37,63 @@ impl Handler for ErrorHandler {\n \n impl BeforeMiddleware for ErrorProducer {\n     fn before(&self, _: &mut Request) -> IronResult<()> {\n-        Err(IronError::new(StringError(\"Error\".to_string()), status::BadRequest))\n+        Err(IronError::new(StringError(\"Error you cannot access the resource!\".to_string()), status::BadRequest))\n     }\n }\n \n+\n+// to handle the Error message by using an AroundMiddleware\n+struct LogEnabler;\n+\n+struct HandlerWithLog<H: Handler> {\n+    handler: H\n+}\n+\n+impl AroundMiddleware for LogEnabler {\n+",
        "path": "examples/error.rs",
        "position": null,
        "original_position": 27,
        "commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "original_commit_id": "3e32165e9ab2cf18cd982b37f4ae8870b1746748",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "delete this newline\n",
        "created_at": "2015-08-25T05:52:02Z",
        "updated_at": "2015-08-25T13:38:29Z",
        "html_url": "https://github.com/iron/iron/pull/375#discussion_r37834701",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/375",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/37834701"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/375#discussion_r37834701"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/375"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/37834726",
        "pull_request_review_id": null,
        "id": 37834726,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0NzI2",
        "diff_hunk": "@@ -37,17 +37,63 @@ impl Handler for ErrorHandler {\n \n impl BeforeMiddleware for ErrorProducer {\n     fn before(&self, _: &mut Request) -> IronResult<()> {\n-        Err(IronError::new(StringError(\"Error\".to_string()), status::BadRequest))\n+        Err(IronError::new(StringError(\"Error you cannot access the resource!\".to_string()), status::BadRequest))\n     }\n }\n \n+\n+// to handle the Error message by using an AroundMiddleware\n+struct LogEnabler;\n+\n+struct HandlerWithLog<H: Handler> {\n+    handler: H\n+}\n+\n+impl AroundMiddleware for LogEnabler {\n+\n+    fn around(self, handler: Box<Handler>) -> Box<Handler> {\n+        Box::new(HandlerWithLog { handler: handler } ) as Box<Handler>\n+    }\n+}\n+ \n+impl <H: Handler> Handler for HandlerWithLog<H> {\n+\n+    fn handle(&self, req: &mut Request) -> IronResult<Response> {\n+    \n+        let res = self.handler.handle(req);\n+        \n+        {",
        "path": "examples/error.rs",
        "position": null,
        "original_position": 39,
        "commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "original_commit_id": "3e32165e9ab2cf18cd982b37f4ae8870b1746748",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why does this need to be in its own block?\n",
        "created_at": "2015-08-25T05:52:41Z",
        "updated_at": "2015-08-25T13:38:29Z",
        "html_url": "https://github.com/iron/iron/pull/375#discussion_r37834726",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/375",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/37834726"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/375#discussion_r37834726"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/375"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/37834745",
        "pull_request_review_id": null,
        "id": 37834745,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0NzQ1",
        "diff_hunk": "@@ -37,17 +37,63 @@ impl Handler for ErrorHandler {\n \n impl BeforeMiddleware for ErrorProducer {\n     fn before(&self, _: &mut Request) -> IronResult<()> {\n-        Err(IronError::new(StringError(\"Error\".to_string()), status::BadRequest))\n+        Err(IronError::new(StringError(\"Error you cannot access the resource!\".to_string()), status::BadRequest))\n     }\n }\n \n+\n+// to handle the Error message by using an AroundMiddleware\n+struct LogEnabler;\n+\n+struct HandlerWithLog<H: Handler> {\n+    handler: H\n+}\n+\n+impl AroundMiddleware for LogEnabler {\n+\n+    fn around(self, handler: Box<Handler>) -> Box<Handler> {\n+        Box::new(HandlerWithLog { handler: handler } ) as Box<Handler>\n+    }\n+}\n+ \n+impl <H: Handler> Handler for HandlerWithLog<H> {\n+\n+    fn handle(&self, req: &mut Request) -> IronResult<Response> {\n+    \n+        let res = self.handler.handle(req);\n+        \n+        {\n+          match res {\n+            Ok(_) => panic!(\"is not possible!\"),\n+            Err(IronError {error: ref what_went_wrong, ref response }) => println!(\"what went wrong: {:?} - response: {:?}\", what_went_wrong, response)",
        "path": "examples/error.rs",
        "position": null,
        "original_position": 42,
        "commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "original_commit_id": "3e32165e9ab2cf18cd982b37f4ae8870b1746748",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "if you just do `IronError { ref error, ref response }` I think that will be clearer\n",
        "created_at": "2015-08-25T05:52:57Z",
        "updated_at": "2015-08-25T13:38:29Z",
        "html_url": "https://github.com/iron/iron/pull/375#discussion_r37834745",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/375",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/37834745"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/375#discussion_r37834745"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/375"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/37834800",
        "pull_request_review_id": null,
        "id": 37834800,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0ODAw",
        "diff_hunk": "@@ -37,17 +37,63 @@ impl Handler for ErrorHandler {\n \n impl BeforeMiddleware for ErrorProducer {\n     fn before(&self, _: &mut Request) -> IronResult<()> {\n-        Err(IronError::new(StringError(\"Error\".to_string()), status::BadRequest))\n+        Err(IronError::new(StringError(\"Error you cannot access the resource!\".to_string()), status::BadRequest))\n     }\n }\n \n+\n+// to handle the Error message by using an AroundMiddleware\n+struct LogEnabler;\n+\n+struct HandlerWithLog<H: Handler> {\n+    handler: H\n+}\n+\n+impl AroundMiddleware for LogEnabler {\n+\n+    fn around(self, handler: Box<Handler>) -> Box<Handler> {\n+        Box::new(HandlerWithLog { handler: handler } ) as Box<Handler>\n+    }\n+}\n+ \n+impl <H: Handler> Handler for HandlerWithLog<H> {\n+\n+    fn handle(&self, req: &mut Request) -> IronResult<Response> {",
        "path": "examples/error.rs",
        "position": null,
        "original_position": 35,
        "commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "original_commit_id": "3e32165e9ab2cf18cd982b37f4ae8870b1746748",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think the best way to write this method would be something like:\n\n``` rust\nself.handler.handle(req).map_err(|e| println!(..); e)\n```\n",
        "created_at": "2015-08-25T05:54:38Z",
        "updated_at": "2015-08-25T13:38:29Z",
        "html_url": "https://github.com/iron/iron/pull/375#discussion_r37834800",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/375",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/37834800"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/375#discussion_r37834800"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/375"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/37834816",
        "pull_request_review_id": null,
        "id": 37834816,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0ODE2",
        "diff_hunk": "@@ -37,17 +37,63 @@ impl Handler for ErrorHandler {\n \n impl BeforeMiddleware for ErrorProducer {\n     fn before(&self, _: &mut Request) -> IronResult<()> {\n-        Err(IronError::new(StringError(\"Error\".to_string()), status::BadRequest))\n+        Err(IronError::new(StringError(\"Error you cannot access the resource!\".to_string()), status::BadRequest))\n     }\n }\n \n+\n+// to handle the Error message by using an AroundMiddleware\n+struct LogEnabler;\n+\n+struct HandlerWithLog<H: Handler> {\n+    handler: H\n+}\n+\n+impl AroundMiddleware for LogEnabler {\n+\n+    fn around(self, handler: Box<Handler>) -> Box<Handler> {\n+        Box::new(HandlerWithLog { handler: handler } ) as Box<Handler>\n+    }\n+}\n+ \n+impl <H: Handler> Handler for HandlerWithLog<H> {\n+\n+    fn handle(&self, req: &mut Request) -> IronResult<Response> {\n+    \n+        let res = self.handler.handle(req);\n+        \n+        {\n+          match res {\n+            Ok(_) => panic!(\"is not possible!\"),\n+            Err(IronError {error: ref what_went_wrong, ref response }) => println!(\"what went wrong: {:?} - response: {:?}\", what_went_wrong, response)\n+          };          \n+        }\n+        \n+        res\n+    }\n+}\n+\n+pub fn get_log_enabled_handler(handler : Box<Handler>) -> Box<Handler> {\n+  \n+  let use_log = LogEnabler;\n+    \n+  use_log.around(handler)\n+}\n+\n+\n fn main() {\n     // Handler is attached here.\n+    \n     let mut chain = Chain::new(ErrorHandler);\n \n     // Link our error maker.\n     chain.link_before(ErrorProducer);\n-\n-    Iron::new(chain).http(\"localhost:3000\").unwrap();\n+    \n+    // enable the tracing of the error by using an AroundMiddleware\n+    let logged_handler = get_log_enabled_handler(Box::new(chain));",
        "path": "examples/error.rs",
        "position": null,
        "original_position": 69,
        "commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "original_commit_id": "3e32165e9ab2cf18cd982b37f4ae8870b1746748",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why not just `logged_handler = LogEnabler.around(Box::new(chain))`\n",
        "created_at": "2015-08-25T05:55:08Z",
        "updated_at": "2015-08-25T13:38:29Z",
        "html_url": "https://github.com/iron/iron/pull/375#discussion_r37834816",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/375",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/37834816"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/375#discussion_r37834816"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/375"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/37834836",
        "pull_request_review_id": null,
        "id": 37834836,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0ODM2",
        "diff_hunk": "@@ -37,17 +37,63 @@ impl Handler for ErrorHandler {\n \n impl BeforeMiddleware for ErrorProducer {\n     fn before(&self, _: &mut Request) -> IronResult<()> {\n-        Err(IronError::new(StringError(\"Error\".to_string()), status::BadRequest))\n+        Err(IronError::new(StringError(\"Error you cannot access the resource!\".to_string()), status::BadRequest))\n     }\n }\n \n+\n+// to handle the Error message by using an AroundMiddleware\n+struct LogEnabler;\n+\n+struct HandlerWithLog<H: Handler> {\n+    handler: H\n+}\n+\n+impl AroundMiddleware for LogEnabler {\n+\n+    fn around(self, handler: Box<Handler>) -> Box<Handler> {\n+        Box::new(HandlerWithLog { handler: handler } ) as Box<Handler>\n+    }\n+}\n+ \n+impl <H: Handler> Handler for HandlerWithLog<H> {\n+\n+    fn handle(&self, req: &mut Request) -> IronResult<Response> {\n+    \n+        let res = self.handler.handle(req);\n+        \n+        {\n+          match res {\n+            Ok(_) => panic!(\"is not possible!\"),\n+            Err(IronError {error: ref what_went_wrong, ref response }) => println!(\"what went wrong: {:?} - response: {:?}\", what_went_wrong, response)\n+          };          \n+        }\n+        \n+        res\n+    }\n+}\n+\n+pub fn get_log_enabled_handler(handler : Box<Handler>) -> Box<Handler> {\n+  \n+  let use_log = LogEnabler;\n+    \n+  use_log.around(handler)\n+}\n+\n+\n fn main() {\n     // Handler is attached here.\n+    \n     let mut chain = Chain::new(ErrorHandler);\n \n     // Link our error maker.\n     chain.link_before(ErrorProducer);\n-\n-    Iron::new(chain).http(\"localhost:3000\").unwrap();\n+    \n+    // enable the tracing of the error by using an AroundMiddleware\n+    let logged_handler = get_log_enabled_handler(Box::new(chain));\n+    \n+    println!(\"server running at http://localhost:3000\");\n+    println!(\"try it by opening the url in a browser or by: 'curl -v http://localhost:3000', 'curl -v http://localhost:3000/any_other_destination/same_bad_request'\");",
        "path": "examples/error.rs",
        "position": null,
        "original_position": 72,
        "commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "original_commit_id": "3e32165e9ab2cf18cd982b37f4ae8870b1746748",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "better as documentation/comments then prints I think\n",
        "created_at": "2015-08-25T05:55:41Z",
        "updated_at": "2015-08-25T13:38:29Z",
        "html_url": "https://github.com/iron/iron/pull/375#discussion_r37834836",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/375",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/37834836"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/375#discussion_r37834836"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/375"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/38167104",
        "pull_request_review_id": null,
        "id": 38167104,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY3MTA0",
        "diff_hunk": "@@ -37,17 +36,32 @@ impl Handler for ErrorHandler {\n \n impl BeforeMiddleware for ErrorProducer {\n     fn before(&self, _: &mut Request) -> IronResult<()> {\n-        Err(IronError::new(StringError(\"Error\".to_string()), status::BadRequest))\n+        Err(IronError::new(StringError(\"You cannot access the resource!\".to_string()), status::BadRequest))\n+    }\n+}\n+\n+// the error is simply printed on stdout and returned as is\n+struct ErrorHandler;",
        "path": "examples/error.rs",
        "position": 36,
        "original_position": 36,
        "commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "original_commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "add a newline after this declaration\n",
        "created_at": "2015-08-28T02:33:54Z",
        "updated_at": "2015-08-28T02:33:54Z",
        "html_url": "https://github.com/iron/iron/pull/375#discussion_r38167104",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/375",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/38167104"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/375#discussion_r38167104"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/375"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/38167126",
        "pull_request_review_id": null,
        "id": 38167126,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY3MTI2",
        "diff_hunk": "@@ -37,17 +36,32 @@ impl Handler for ErrorHandler {\n \n impl BeforeMiddleware for ErrorProducer {\n     fn before(&self, _: &mut Request) -> IronResult<()> {\n-        Err(IronError::new(StringError(\"Error\".to_string()), status::BadRequest))\n+        Err(IronError::new(StringError(\"You cannot access the resource!\".to_string()), status::BadRequest))\n+    }\n+}\n+\n+// the error is simply printed on stdout and returned as is",
        "path": "examples/error.rs",
        "position": 35,
        "original_position": 35,
        "commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "original_commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Generally speaking can you make new comments full sentences with capital letters, punctuation, etc.? It makes the examples easier to read for future new users.\n",
        "created_at": "2015-08-28T02:34:33Z",
        "updated_at": "2015-08-28T02:34:33Z",
        "html_url": "https://github.com/iron/iron/pull/375#discussion_r38167126",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/375",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/38167126"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/375#discussion_r38167126"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/375"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/38167143",
        "pull_request_review_id": null,
        "id": 38167143,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY3MTQz",
        "diff_hunk": "@@ -37,17 +36,32 @@ impl Handler for ErrorHandler {\n \n impl BeforeMiddleware for ErrorProducer {\n     fn before(&self, _: &mut Request) -> IronResult<()> {\n-        Err(IronError::new(StringError(\"Error\".to_string()), status::BadRequest))\n+        Err(IronError::new(StringError(\"You cannot access the resource!\".to_string()), status::BadRequest))\n+    }\n+}\n+\n+// the error is simply printed on stdout and returned as is\n+struct ErrorHandler;\n+impl AfterMiddleware for ErrorHandler {\n+    fn catch(&self, _: &mut Request, err: IronError) -> IronResult<Response> {\n+      println!(\"handled the error: {:?}\",err.error);\n+      Err(err)\n     }\n }\n \n fn main() {\n     // Handler is attached here.\n-    let mut chain = Chain::new(ErrorHandler);\n+\n+    let mut chain = Chain::new(NeverCalledHandler);\n \n     // Link our error maker.\n     chain.link_before(ErrorProducer);\n \n+    // enable the tracing of the error by catching it with an AfterMiddleware\n+    chain.link_after(ErrorHandler);\n+\n+    println!(\"server running at http://localhost:3000\");\n+    println!(\"try it by opening the url in a browser or by: 'curl -v http://localhost:3000', 'curl -v http://localhost:3000/any_other_destination/same_bad_request'\");",
        "path": "examples/error.rs",
        "position": 57,
        "original_position": 57,
        "commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "original_commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would rather these prints were replaced by comments.\n",
        "created_at": "2015-08-28T02:34:57Z",
        "updated_at": "2015-08-28T02:34:57Z",
        "html_url": "https://github.com/iron/iron/pull/375#discussion_r38167143",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/375",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/38167143"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/375#discussion_r38167143"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/375"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/38167161",
        "pull_request_review_id": null,
        "id": 38167161,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY3MTYx",
        "diff_hunk": "@@ -37,17 +36,32 @@ impl Handler for ErrorHandler {\n \n impl BeforeMiddleware for ErrorProducer {\n     fn before(&self, _: &mut Request) -> IronResult<()> {\n-        Err(IronError::new(StringError(\"Error\".to_string()), status::BadRequest))\n+        Err(IronError::new(StringError(\"You cannot access the resource!\".to_string()), status::BadRequest))\n+    }\n+}\n+\n+// the error is simply printed on stdout and returned as is\n+struct ErrorHandler;\n+impl AfterMiddleware for ErrorHandler {\n+    fn catch(&self, _: &mut Request, err: IronError) -> IronResult<Response> {\n+      println!(\"handled the error: {:?}\",err.error);",
        "path": "examples/error.rs",
        "position": 39,
        "original_position": 39,
        "commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "original_commit_id": "b86957d216f5cdd51dcc4da19c27a31afe0cb692",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How about `println!(\"Request Error! Error was: {:?}\", err.error)`?\n",
        "created_at": "2015-08-28T02:35:28Z",
        "updated_at": "2015-08-28T02:35:28Z",
        "html_url": "https://github.com/iron/iron/pull/375#discussion_r38167161",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/375",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/38167161"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/375#discussion_r38167161"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/375"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/41314121",
        "pull_request_review_id": null,
        "id": 41314121,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE0MTIx",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+// This example illustrates the error flow of a Request in BeforeMiddleware.\n+// Here is the chain used and the path of the request through the middleware pieces:\n+//\n+// Normal Flow : ____[ErrorProducer::before]_____     [ErrorRecover::before]     ____[HelloWorldHandler::handle]___\n+// Error Flow  :     [ErrorProducer::catch ]     |____[ErrorRecover::catch ]_____|\n+\n+\n+extern crate iron;\n+\n+use iron::prelude::*;\n+use iron::status;\n+use iron::{Handler, BeforeMiddleware};\n+\n+use std::error::Error;\n+use std::fmt::{self, Debug};\n+\n+struct HelloWorldHandler;\n+struct ErrorProducer;\n+struct ErrorRecover;\n+\n+#[derive(Debug)]\n+struct StringError(String);\n+\n+impl fmt::Display for StringError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        Debug::fmt(self, f)\n+    }\n+}\n+\n+impl Error for StringError {\n+    fn description(&self) -> &str { &*self.0 }\n+}\n+\n+impl Handler for HelloWorldHandler {\n+    fn handle(&self, _: &mut Request) -> IronResult<Response> {\n+        Ok(Response::with((status::Ok, \"Hello world !\")))\n+    }\n+}\n+\n+impl BeforeMiddleware for ErrorProducer {\n+    fn before(&self, _: &mut Request) -> IronResult<()> {\n+        // The error produced here switches to the error flow.\n+        // The catch method of following middleware pieces will be called.\n+        // The Handler will be skipped unless the error is handled by another middleware piece.\n+        Err(IronError::new(StringError(\"Error in ErrorProducer\".to_string()), status::BadRequest))",
        "path": "examples/error_recovery.rs",
        "position": null,
        "original_position": 45,
        "commit_id": "f1ef5f521343855fa0782336e1d1213a29c739d8",
        "original_commit_id": "943bc4c85276955e2bbc9ca83840772eefd98c31",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would also mention here that the `status::BadRequest` is acting as a modifier (can be other things besides just a status) and that `IronError` contains a `Response` which will be sent if the error is not otherwise handled.\n",
        "created_at": "2015-10-06T20:01:20Z",
        "updated_at": "2015-10-06T22:28:04Z",
        "html_url": "https://github.com/iron/iron/pull/389#discussion_r41314121",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/389",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/41314121"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/389#discussion_r41314121"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/389"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/41314242",
        "pull_request_review_id": null,
        "id": 41314242,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE0MjQy",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+// This example illustrates the error flow of a Request in BeforeMiddleware.\n+// Here is the chain used and the path of the request through the middleware pieces:\n+//\n+// Normal Flow : ____[ErrorProducer::before]_____     [ErrorRecover::before]     ____[HelloWorldHandler::handle]___\n+// Error Flow  :     [ErrorProducer::catch ]     |____[ErrorRecover::catch ]_____|\n+\n+\n+extern crate iron;\n+\n+use iron::prelude::*;\n+use iron::status;\n+use iron::{Handler, BeforeMiddleware};\n+\n+use std::error::Error;\n+use std::fmt::{self, Debug};\n+\n+struct HelloWorldHandler;\n+struct ErrorProducer;\n+struct ErrorRecover;\n+\n+#[derive(Debug)]\n+struct StringError(String);\n+\n+impl fmt::Display for StringError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        Debug::fmt(self, f)\n+    }\n+}\n+\n+impl Error for StringError {\n+    fn description(&self) -> &str { &*self.0 }\n+}\n+\n+impl Handler for HelloWorldHandler {\n+    fn handle(&self, _: &mut Request) -> IronResult<Response> {\n+        Ok(Response::with((status::Ok, \"Hello world !\")))\n+    }\n+}\n+\n+impl BeforeMiddleware for ErrorProducer {\n+    fn before(&self, _: &mut Request) -> IronResult<()> {\n+        // The error produced here switches to the error flow.\n+        // The catch method of following middleware pieces will be called.\n+        // The Handler will be skipped unless the error is handled by another middleware piece.\n+        Err(IronError::new(StringError(\"Error in ErrorProducer\".to_string()), status::BadRequest))\n+    }\n+}\n+\n+impl BeforeMiddleware for ErrorRecover {\n+    fn catch(&self, _: &mut Request, err: IronError) -> IronResult<()> {\n+        // We can use the IronError from previous middleware to decide what to do.\n+        // Returning Ok() from a catch method resumes the normal flow.        ",
        "path": "examples/error_recovery.rs",
        "position": null,
        "original_position": 52,
        "commit_id": "f1ef5f521343855fa0782336e1d1213a29c739d8",
        "original_commit_id": "943bc4c85276955e2bbc9ca83840772eefd98c31",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Would be good to note here that this means the Handler will be run, since we entered back into the normal flow before the Hander.\n",
        "created_at": "2015-10-06T20:02:18Z",
        "updated_at": "2015-10-06T22:28:04Z",
        "html_url": "https://github.com/iron/iron/pull/389#discussion_r41314242",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/389",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/41314242"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/389#discussion_r41314242"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/389"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/41902161",
        "pull_request_review_id": null,
        "id": 41902161,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAyMTYx",
        "diff_hunk": "@@ -96,7 +96,17 @@ middleware. No plugins or middleware are bundled with Iron.\n \n ## Performance\n \n-Iron averages [84,000+ requests per second for hello world](https://github.com/iron/iron/wiki/How-to-Benchmark-hello.rs-Example)\n+Iron averages [84,000+ requests per second. We run the benchmark test using:\n+```\n+  Model Name: MacBook Pro\n+  Processor: Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz\n+  Memory (RAM): 16 GB\n+  Total Number of Cores: 4\n+  Total Number of Threads: 8\n+  L2 Cache (per Core): 256 KB\n+  L3 Cache: 6 MB\n+```\n+See details here https://github.com/iron/iron/wiki/How-to-Benchmark-hello.rs-Example\n and is mostly IO-bound, spending over 70% of its time in the kernel send-ing or",
        "path": "README.md",
        "position": 16,
        "original_position": 16,
        "commit_id": "d331efba17d8c470cb3a8009bab38965e647257f",
        "original_commit_id": "d331efba17d8c470cb3a8009bab38965e647257f",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this line now starts in the middle of a sentence, can you massage the english here a bit?\n",
        "created_at": "2015-10-13T18:04:28Z",
        "updated_at": "2015-10-13T18:04:28Z",
        "html_url": "https://github.com/iron/iron/pull/392#discussion_r41902161",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/392",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/41902161"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/392#discussion_r41902161"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/392"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/42326821",
        "pull_request_review_id": null,
        "id": 42326821,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2ODIx",
        "diff_hunk": "@@ -96,7 +96,17 @@ middleware. No plugins or middleware are bundled with Iron.\n \n ## Performance\n \n-Iron averages [84,000+ requests per second for hello world](https://github.com/iron/iron/wiki/How-to-Benchmark-hello.rs-Example)\n+Iron averages [84,000+ requests per second. We run the benchmark test using:",
        "path": "README.md",
        "position": 5,
        "original_position": 5,
        "commit_id": "d331efba17d8c470cb3a8009bab38965e647257f",
        "original_commit_id": "d331efba17d8c470cb3a8009bab38965e647257f",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You still have the stray bracket here.\n",
        "created_at": "2015-10-18T21:38:18Z",
        "updated_at": "2015-10-18T21:38:18Z",
        "html_url": "https://github.com/iron/iron/pull/392#discussion_r42326821",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/392",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/42326821"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/392#discussion_r42326821"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/392"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/44879482",
        "pull_request_review_id": null,
        "id": 44879482,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5NDgy",
        "diff_hunk": "@@ -0,0 +1,27 @@\n+//! A simple demonstration how iron's helper macros make e.g. IO-intensive code easier to write.\n+#[macro_use] extern crate iron;\n+\n+use std::io;\n+use std::fs;\n+\n+use iron::prelude::*;\n+use iron::status;\n+use iron::method;\n+\n+fn main() {\n+    Iron::new(|req: &mut Request| {\n+        Ok(match req.method {\n+            method::Get => {\n+                let f = itry!(fs::File::open(\"foo.txt\"), (status::Ok, \"\"));",
        "path": "examples/helper_macros.rs",
        "position": null,
        "original_position": 15,
        "commit_id": "bb7a624f068298d9493f6a1869d728d1d22fda53",
        "original_commit_id": "9a7d1ea7f9c0d2c7aa33d216b9879ca68004fb9e",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think it would be better to respond with status::NotFound if the file doesn't exist\n",
        "created_at": "2015-11-15T23:14:33Z",
        "updated_at": "2015-11-16T00:47:34Z",
        "html_url": "https://github.com/iron/iron/pull/403#discussion_r44879482",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/403",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/44879482"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/403#discussion_r44879482"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/403"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/44879484",
        "pull_request_review_id": null,
        "id": 44879484,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5NDg0",
        "diff_hunk": "@@ -0,0 +1,27 @@\n+//! A simple demonstration how iron's helper macros make e.g. IO-intensive code easier to write.\n+#[macro_use] extern crate iron;\n+\n+use std::io;\n+use std::fs;\n+\n+use iron::prelude::*;\n+use iron::status;\n+use iron::method;\n+\n+fn main() {\n+    Iron::new(|req: &mut Request| {\n+        Ok(match req.method {\n+            method::Get => {\n+                let f = itry!(fs::File::open(\"foo.txt\"), (status::Ok, \"\"));\n+                Response::with(status::Ok).set(f)",
        "path": "examples/helper_macros.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "bb7a624f068298d9493f6a1869d728d1d22fda53",
        "original_commit_id": "9a7d1ea7f9c0d2c7aa33d216b9879ca68004fb9e",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this can/should be written `Response::with((status::Ok, f))`\n",
        "created_at": "2015-11-15T23:14:46Z",
        "updated_at": "2015-11-16T00:47:34Z",
        "html_url": "https://github.com/iron/iron/pull/403#discussion_r44879484",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/403",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/44879484"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/403#discussion_r44879484"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/403"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/44879502",
        "pull_request_review_id": null,
        "id": 44879502,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5NTAy",
        "diff_hunk": "@@ -0,0 +1,27 @@\n+//! A simple demonstration how iron's helper macros make e.g. IO-intensive code easier to write.\n+#[macro_use] extern crate iron;\n+\n+use std::io;\n+use std::fs;\n+\n+use iron::prelude::*;\n+use iron::status;\n+use iron::method;\n+\n+fn main() {\n+    Iron::new(|req: &mut Request| {\n+        Ok(match req.method {\n+            method::Get => {\n+                let f = itry!(fs::File::open(\"foo.txt\"), (status::Ok, \"\"));\n+                Response::with(status::Ok).set(f)",
        "path": "examples/helper_macros.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "bb7a624f068298d9493f6a1869d728d1d22fda53",
        "original_commit_id": "9a7d1ea7f9c0d2c7aa33d216b9879ca68004fb9e",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "possibly we should change the impl of Modifier for Path to send `NotFound` if the file doesn't exist, so this whole thing could be `Response::with((status::Ok, Path::new(\"foo.txt\")))`\n",
        "created_at": "2015-11-15T23:15:43Z",
        "updated_at": "2015-11-16T00:47:34Z",
        "html_url": "https://github.com/iron/iron/pull/403#discussion_r44879502",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/403",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/44879502"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/403#discussion_r44879502"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/403"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/44879530",
        "pull_request_review_id": null,
        "id": 44879530,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5NTMw",
        "diff_hunk": "@@ -0,0 +1,35 @@\n+//! Helper macros. Note that these are relatively new and may change in a later version.\n+//!\n+//! The idea is to use `itry` for internal server operations which can't be recovered from, and\n+//! `iexpect` for validating user input. Note that this kind of usage is completely non-normative.\n+//! Feedback about actual usability and usage is apprechiated.\n+\n+/// Like try!(), but wrapping the error value in `IronError`. To be used in request handlers.\n+///\n+/// ```ignore\n+/// let f = itry!(fs::File::create(\"foo.txt\"), status::BadRequest);\n+/// let f = itry!(fs::File::create(\"foo.txt\"));  // Default modifier is status::InternalServerError\n+/// ```\n+///\n+#[macro_export]\n+macro_rules! itry {\n+    ($result:expr) => (itry!($result, ::iron::status::InternalServerError));\n+\n+    ($result:expr, $modifier:expr) => (match $result {\n+        ::std::result::Result::Ok(val) => val,\n+        ::std::result::Result::Err(err) => return ::std::result::Result::Err(\n+            ::iron::IronError::new(err, $modifier))",
        "path": "src/macros.rs",
        "position": null,
        "original_position": 21,
        "commit_id": "bb7a624f068298d9493f6a1869d728d1d22fda53",
        "original_commit_id": "9a7d1ea7f9c0d2c7aa33d216b9879ca68004fb9e",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this should be written `$crate::IronError`..., same below\n",
        "created_at": "2015-11-15T23:17:00Z",
        "updated_at": "2015-11-16T00:47:34Z",
        "html_url": "https://github.com/iron/iron/pull/403#discussion_r44879530",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/403",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/44879530"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/403#discussion_r44879530"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/403"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/44881386",
        "pull_request_review_id": null,
        "id": 44881386,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMzg2",
        "diff_hunk": "@@ -0,0 +1,27 @@\n+//! A simple demonstration how iron's helper macros make e.g. IO-intensive code easier to write.\n+#[macro_use] extern crate iron;\n+\n+use std::io;\n+use std::fs;\n+\n+use iron::prelude::*;\n+use iron::status;\n+use iron::method;\n+\n+fn main() {\n+    Iron::new(|req: &mut Request| {\n+        Ok(match req.method {\n+            method::Get => {\n+                let f = itry!(fs::File::open(\"foo.txt\"), (status::Ok, \"\"));\n+                Response::with(status::Ok).set(f)",
        "path": "examples/helper_macros.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "bb7a624f068298d9493f6a1869d728d1d22fda53",
        "original_commit_id": "9a7d1ea7f9c0d2c7aa33d216b9879ca68004fb9e",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "IMO that's too implicit behavior. If I pass a path I probably assume it exists.\n",
        "created_at": "2015-11-16T00:39:55Z",
        "updated_at": "2015-11-16T00:47:34Z",
        "html_url": "https://github.com/iron/iron/pull/403#discussion_r44881386",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/403",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/44881386"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/403#discussion_r44881386"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/403"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/44881455",
        "pull_request_review_id": null,
        "id": 44881455,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxNDU1",
        "diff_hunk": "@@ -0,0 +1,27 @@\n+//! A simple demonstration how iron's helper macros make e.g. IO-intensive code easier to write.\n+#[macro_use] extern crate iron;\n+\n+use std::io;\n+use std::fs;\n+\n+use iron::prelude::*;\n+use iron::status;\n+use iron::method;\n+\n+fn main() {\n+    Iron::new(|req: &mut Request| {\n+        Ok(match req.method {\n+            method::Get => {\n+                let f = itry!(fs::File::open(\"foo.txt\"), (status::Ok, \"\"));\n+                Response::with(status::Ok).set(f)",
        "path": "examples/helper_macros.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "bb7a624f068298d9493f6a1869d728d1d22fda53",
        "original_commit_id": "9a7d1ea7f9c0d2c7aa33d216b9879ca68004fb9e",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Honestly I'm a bit surprised that Path impls Modifier, it seems like a unnecessary specialization of passing a File to the response.\n",
        "created_at": "2015-11-16T00:42:26Z",
        "updated_at": "2015-11-16T00:47:34Z",
        "html_url": "https://github.com/iron/iron/pull/403#discussion_r44881455",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/403",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/44881455"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/403#discussion_r44881455"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/403"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/44881484",
        "pull_request_review_id": null,
        "id": 44881484,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxNDg0",
        "diff_hunk": "@@ -0,0 +1,27 @@\n+//! A simple demonstration how iron's helper macros make e.g. IO-intensive code easier to write.\n+#[macro_use] extern crate iron;\n+\n+use std::io;\n+use std::fs;\n+\n+use iron::prelude::*;\n+use iron::status;\n+use iron::method;\n+\n+fn main() {\n+    Iron::new(|req: &mut Request| {\n+        Ok(match req.method {\n+            method::Get => {\n+                let f = itry!(fs::File::open(\"foo.txt\"), (status::Ok, \"\"));",
        "path": "examples/helper_macros.rs",
        "position": null,
        "original_position": 15,
        "commit_id": "bb7a624f068298d9493f6a1869d728d1d22fda53",
        "original_commit_id": "9a7d1ea7f9c0d2c7aa33d216b9879ca68004fb9e",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It doesn't really matter but I wanted the example to have a default value.\n",
        "created_at": "2015-11-16T00:43:24Z",
        "updated_at": "2015-11-16T00:47:34Z",
        "html_url": "https://github.com/iron/iron/pull/403#discussion_r44881484",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/403",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/44881484"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/403#discussion_r44881484"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/403"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/44881620",
        "pull_request_review_id": null,
        "id": 44881620,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxNjIw",
        "diff_hunk": "@@ -0,0 +1,27 @@\n+//! A simple demonstration how iron's helper macros make e.g. IO-intensive code easier to write.\n+#[macro_use] extern crate iron;\n+\n+use std::io;\n+use std::fs;\n+\n+use iron::prelude::*;\n+use iron::status;\n+use iron::method;\n+\n+fn main() {\n+    Iron::new(|req: &mut Request| {\n+        Ok(match req.method {\n+            method::Get => {\n+                let f = itry!(fs::File::open(\"foo.txt\"), (status::Ok, \"\"));\n+                Response::with(status::Ok).set(f)",
        "path": "examples/helper_macros.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "bb7a624f068298d9493f6a1869d728d1d22fda53",
        "original_commit_id": "9a7d1ea7f9c0d2c7aa33d216b9879ca68004fb9e",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It exists now so that if you pass a Path the content-type will be set automatically.\n",
        "created_at": "2015-11-16T00:48:15Z",
        "updated_at": "2015-11-16T00:48:15Z",
        "html_url": "https://github.com/iron/iron/pull/403#discussion_r44881620",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/403",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/44881620"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/403#discussion_r44881620"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/403"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/43538532",
        "pull_request_review_id": null,
        "id": 43538532,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4NTMy",
        "diff_hunk": "@@ -79,13 +80,21 @@ impl<'a, 'b> Request<'a, 'b> {\n             },\n \n             AbsolutePath(ref path) => {\n-                // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n-                let url_string = match headers.get::<headers::Host>() {\n-                    Some(ref host) => {\n-                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, local_addr.port(),\n-                                path)\n+                let url_string = match (version, headers.get::<headers::Host>()) {\n+                    (_, Some(ref host)) => {\n+                        // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n+                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, local_addr.port(), path)\n                     },\n-                    None => return Err(\"No host specified in request\".to_string())\n+                    (v, None) if v < HttpVersion::Http11 => {\n+                        // Attempt to use the local address? (host header is not required in HTTP/1.0).\n+                        match local_addr {\n+                            SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),",
        "path": "src/request/mod.rs",
        "position": 35,
        "original_position": 35,
        "commit_id": "2c0cbbdec7139ae46f40306499e76d62653957b4",
        "original_commit_id": "ba033a923883fddab79463427c5c58987ae399d8",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm kind of unhappy to write addr serialization code here. Isn't there something in `url` that we can use for this?\n",
        "created_at": "2015-10-30T18:45:53Z",
        "updated_at": "2015-12-07T05:36:01Z",
        "html_url": "https://github.com/iron/iron/pull/362#discussion_r43538532",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/362",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/43538532"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/362#discussion_r43538532"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/362"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/49283517",
        "pull_request_review_id": null,
        "id": 49283517,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzNTE3",
        "diff_hunk": "@@ -178,6 +178,60 @@ impl Chain {\n     }\n }\n \n+/// Builder struct for a `Chain`\n+///\n+pub struct ChainLink {",
        "path": "src/middleware/mod.rs",
        "position": 15,
        "original_position": 15,
        "commit_id": "d99d5a5051c3d58582e4cfea4fe143e771289c16",
        "original_commit_id": "d99d5a5051c3d58582e4cfea4fe143e771289c16",
        "user": {
            "login": "nixpulvis",
            "id": 715947,
            "node_id": "MDQ6VXNlcjcxNTk0Nw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/715947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nixpulvis",
            "html_url": "https://github.com/nixpulvis",
            "followers_url": "https://api.github.com/users/nixpulvis/followers",
            "following_url": "https://api.github.com/users/nixpulvis/following{/other_user}",
            "gists_url": "https://api.github.com/users/nixpulvis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nixpulvis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nixpulvis/subscriptions",
            "organizations_url": "https://api.github.com/users/nixpulvis/orgs",
            "repos_url": "https://api.github.com/users/nixpulvis/repos",
            "events_url": "https://api.github.com/users/nixpulvis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nixpulvis/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd probably use a wrapper struct like `ChainLink(Chain)`, because the name of the field of your struct doesn't really add any information.\n",
        "created_at": "2016-01-10T23:21:38Z",
        "updated_at": "2016-01-10T23:21:38Z",
        "html_url": "https://github.com/iron/iron/pull/355#discussion_r49283517",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/355",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/49283517"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/355#discussion_r49283517"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/355"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/52357920",
        "pull_request_review_id": null,
        "id": 52357920,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzU3OTIw",
        "diff_hunk": "@@ -6,9 +6,15 @@ use std::time::Duration;\n #[cfg(feature = \"ssl\")]\n use std::path::PathBuf;\n \n+#[cfg(feature = \"ssl\")]\n+use hyper::net::{NetworkStream, Openssl, Ssl};\n+\n pub use hyper::server::Listening;\n use hyper::server::Server;\n-use hyper::net::Fresh;\n+use hyper::net::{Fresh, NetworkListener, HttpListener};\n+\n+#[cfg(feature = \"ssl\")]",
        "path": "src/iron.rs",
        "position": 12,
        "original_position": 12,
        "commit_id": "fec59599db3518f5e5a0f5c713e82fa5831b911a",
        "original_commit_id": "fec59599db3518f5e5a0f5c713e82fa5831b911a",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The ssl feature doesn't seem super necessary.\n",
        "created_at": "2016-02-09T19:13:33Z",
        "updated_at": "2016-02-09T19:13:33Z",
        "html_url": "https://github.com/iron/iron/pull/422#discussion_r52357920",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/422",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/52357920"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/422#discussion_r52357920"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/422"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/52358134",
        "pull_request_review_id": null,
        "id": 52358134,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzU4MTM0",
        "diff_hunk": "@@ -87,11 +90,68 @@ impl Protocol {\n         match *self {\n             Protocol::Http => \"http\",\n             #[cfg(feature = \"ssl\")]\n-            Protocol::Https { .. } => \"https\"\n+            Protocol::Https => \"https\"\n         }\n     }\n }\n \n+/// Protocol Handlers create servers\n+pub trait ProtocolHandler<TListener: NetworkListener> {\n+    /// Return the name used for this protocol in a URI's scheme part.\n+    fn name(&self) -> &'static str;\n+\n+    /// Returns the protocol this represents\n+    fn protocol(&self) -> Protocol;\n+\n+    /// Returns server for this protocol\n+    fn create_server(&self, sock_addr: SocketAddr) -> Result<Server<TListener>, Error>;\n+}\n+\n+/// Default HTTP handler\n+pub struct HttpProtocolHandler;\n+\n+impl ProtocolHandler<HttpListener> for HttpProtocolHandler {\n+    fn name(&self) -> &'static str { \"http\" }\n+    fn protocol(&self) -> Protocol { Protocol::Http }\n+\n+    fn create_server(&self, sock_addr: SocketAddr) -> Result<Server, Error>{\n+        Server::http(sock_addr)\n+   }\n+}\n+\n+/// Default HTTPs handler\n+#[cfg(feature = \"ssl\")]\n+pub struct HttpsProtocolHandler<S: Ssl + Clone + Send> {",
        "path": "src/iron.rs",
        "position": 76,
        "original_position": 76,
        "commit_id": "fec59599db3518f5e5a0f5c713e82fa5831b911a",
        "original_commit_id": "fec59599db3518f5e5a0f5c713e82fa5831b911a",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd just give this a constructor that takes in the `S` and avoid the Option + `impl HttpsProtocolHandler<Openssl>` altogether.\n",
        "created_at": "2016-02-09T19:15:11Z",
        "updated_at": "2016-02-09T19:15:11Z",
        "html_url": "https://github.com/iron/iron/pull/422#discussion_r52358134",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/422",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/52358134"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/422#discussion_r52358134"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/422"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/52358584",
        "pull_request_review_id": null,
        "id": 52358584,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzU4NTg0",
        "diff_hunk": "@@ -6,9 +6,15 @@ use std::time::Duration;\n #[cfg(feature = \"ssl\")]\n use std::path::PathBuf;\n \n+#[cfg(feature = \"ssl\")]\n+use hyper::net::{NetworkStream, Openssl, Ssl};\n+\n pub use hyper::server::Listening;\n use hyper::server::Server;\n-use hyper::net::Fresh;\n+use hyper::net::{Fresh, NetworkListener, HttpListener};\n+\n+#[cfg(feature = \"ssl\")]",
        "path": "src/iron.rs",
        "position": 12,
        "original_position": 12,
        "commit_id": "fec59599db3518f5e5a0f5c713e82fa5831b911a",
        "original_commit_id": "fec59599db3518f5e5a0f5c713e82fa5831b911a",
        "user": {
            "login": "jimktrains",
            "id": 40850,
            "node_id": "MDQ6VXNlcjQwODUw",
            "avatar_url": "https://avatars2.githubusercontent.com/u/40850?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jimktrains",
            "html_url": "https://github.com/jimktrains",
            "followers_url": "https://api.github.com/users/jimktrains/followers",
            "following_url": "https://api.github.com/users/jimktrains/following{/other_user}",
            "gists_url": "https://api.github.com/users/jimktrains/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jimktrains/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jimktrains/subscriptions",
            "organizations_url": "https://api.github.com/users/jimktrains/orgs",
            "repos_url": "https://api.github.com/users/jimktrains/repos",
            "events_url": "https://api.github.com/users/jimktrains/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jimktrains/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a hold over from the current codebase; I didn't add the feature.\n",
        "created_at": "2016-02-09T19:17:55Z",
        "updated_at": "2016-02-09T19:17:55Z",
        "html_url": "https://github.com/iron/iron/pull/422#discussion_r52358584",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/422",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/52358584"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/422#discussion_r52358584"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/422"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/54138553",
        "pull_request_review_id": null,
        "id": 54138553,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4NTUz",
        "diff_hunk": "@@ -87,11 +90,68 @@ impl Protocol {\n         match *self {\n             Protocol::Http => \"http\",\n             #[cfg(feature = \"ssl\")]\n-            Protocol::Https { .. } => \"https\"\n+            Protocol::Https => \"https\"\n         }\n     }\n }\n \n+/// Protocol Handlers create servers\n+pub trait ProtocolHandler<TListener: NetworkListener> {\n+    /// Return the name used for this protocol in a URI's scheme part.\n+    fn name(&self) -> &'static str;",
        "path": "src/iron.rs",
        "position": 53,
        "original_position": 53,
        "commit_id": "fec59599db3518f5e5a0f5c713e82fa5831b911a",
        "original_commit_id": "fec59599db3518f5e5a0f5c713e82fa5831b911a",
        "user": {
            "login": "samgiles",
            "id": 840334,
            "node_id": "MDQ6VXNlcjg0MDMzNA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/840334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/samgiles",
            "html_url": "https://github.com/samgiles",
            "followers_url": "https://api.github.com/users/samgiles/followers",
            "following_url": "https://api.github.com/users/samgiles/following{/other_user}",
            "gists_url": "https://api.github.com/users/samgiles/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/samgiles/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/samgiles/subscriptions",
            "organizations_url": "https://api.github.com/users/samgiles/orgs",
            "repos_url": "https://api.github.com/users/samgiles/repos",
            "events_url": "https://api.github.com/users/samgiles/events{/privacy}",
            "received_events_url": "https://api.github.com/users/samgiles/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we need this if `protocol().name()` returns the same thing?\n",
        "created_at": "2016-02-25T18:16:32Z",
        "updated_at": "2016-02-25T18:16:32Z",
        "html_url": "https://github.com/iron/iron/pull/422#discussion_r54138553",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/422",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/54138553"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/422#discussion_r54138553"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/422"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/54357028",
        "pull_request_review_id": null,
        "id": 54357028,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MDI4",
        "diff_hunk": "@@ -4,8 +4,8 @@ rust:\n     - nightly\n sudo: false\n script:\n-    - cargo build\n-    - cargo test\n+    - cargo build --features=ssl\n+    - cargo test --features=ssl",
        "path": ".travis.yml",
        "position": null,
        "original_position": 7,
        "commit_id": "28a7d43ba974c08210e135a5ac363b988991546f",
        "original_commit_id": "d0812de3412ceadaa6e1f9243db6b643f2c5a701",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you add `cargo build` and `cargo test` without `ssl` as well?\n",
        "created_at": "2016-02-28T21:45:16Z",
        "updated_at": "2016-02-29T06:20:11Z",
        "html_url": "https://github.com/iron/iron/pull/432#discussion_r54357028",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/432",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/54357028"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/432#discussion_r54357028"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/432"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55663328",
        "pull_request_review_id": null,
        "id": 55663328,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzMzI4",
        "diff_hunk": "@@ -22,8 +28,8 @@ macro_rules! itry {\n     })\n }\n \n-/// Unwrap the given Option or return a Ok(Response::new()) with the given modifier. The default\n-/// modifier is status::BadRequest.\n+/// Unwrap the given `Option` or return a `Ok(Response::new())` with the given\n+/// modifier. The default modifier is `status::BadRequest.",
        "path": "src/macros.rs",
        "position": 30,
        "original_position": 30,
        "commit_id": "f1cc306336fcfed3fbece372858ad7bcfa1f56c2",
        "original_commit_id": "f1cc306336fcfed3fbece372858ad7bcfa1f56c2",
        "user": {
            "login": "SkylerLipthay",
            "id": 38674,
            "node_id": "MDQ6VXNlcjM4Njc0",
            "avatar_url": "https://avatars0.githubusercontent.com/u/38674?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SkylerLipthay",
            "html_url": "https://github.com/SkylerLipthay",
            "followers_url": "https://api.github.com/users/SkylerLipthay/followers",
            "following_url": "https://api.github.com/users/SkylerLipthay/following{/other_user}",
            "gists_url": "https://api.github.com/users/SkylerLipthay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SkylerLipthay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SkylerLipthay/subscriptions",
            "organizations_url": "https://api.github.com/users/SkylerLipthay/orgs",
            "repos_url": "https://api.github.com/users/SkylerLipthay/repos",
            "events_url": "https://api.github.com/users/SkylerLipthay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SkylerLipthay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Missing a backtick here\n",
        "created_at": "2016-03-10T10:58:11Z",
        "updated_at": "2016-03-10T10:58:11Z",
        "html_url": "https://github.com/iron/iron/pull/435#discussion_r55663328",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/435",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55663328"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/435#discussion_r55663328"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55663497",
        "pull_request_review_id": null,
        "id": 55663497,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNDk3",
        "diff_hunk": "@@ -22,8 +28,8 @@ macro_rules! itry {\n     })\n }\n \n-/// Unwrap the given Option or return a Ok(Response::new()) with the given modifier. The default\n-/// modifier is status::BadRequest.\n+/// Unwrap the given `Option` or return a `Ok(Response::new())` with the given\n+/// modifier. The default modifier is `status::BadRequest.",
        "path": "src/macros.rs",
        "position": 30,
        "original_position": 30,
        "commit_id": "f1cc306336fcfed3fbece372858ad7bcfa1f56c2",
        "original_commit_id": "f1cc306336fcfed3fbece372858ad7bcfa1f56c2",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Jeez, sorry for merging :(\n\nOn 10 March 2016 11:58:14 CET, Skyler notifications@github.com wrote:\n\n> > @@ -22,8 +28,8 @@ macro_rules! itry {\n> >      })\n> >  }\n> > \n> > -/// Unwrap the given Option or return a Ok(Response::new()) with the\n> > given modifier. The default\n> > -/// modifier is status::BadRequest.\n> > +/// Unwrap the given `Option` or return a `Ok(Response::new())` with\n> > the given\n> > +/// modifier. The default modifier is `status::BadRequest.\n> \n> Missing a backtick here\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/iron/iron/pull/435/files#r55663328\n\n## \n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n",
        "created_at": "2016-03-10T10:59:54Z",
        "updated_at": "2016-03-10T10:59:54Z",
        "html_url": "https://github.com/iron/iron/pull/435#discussion_r55663497",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/435",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55663497"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/435#discussion_r55663497"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55663718",
        "pull_request_review_id": null,
        "id": 55663718,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNzE4",
        "diff_hunk": "@@ -22,8 +28,8 @@ macro_rules! itry {\n     })\n }\n \n-/// Unwrap the given Option or return a Ok(Response::new()) with the given modifier. The default\n-/// modifier is status::BadRequest.\n+/// Unwrap the given `Option` or return a `Ok(Response::new())` with the given\n+/// modifier. The default modifier is `status::BadRequest.",
        "path": "src/macros.rs",
        "position": 30,
        "original_position": 30,
        "commit_id": "f1cc306336fcfed3fbece372858ad7bcfa1f56c2",
        "original_commit_id": "f1cc306336fcfed3fbece372858ad7bcfa1f56c2",
        "user": {
            "login": "dbrgn",
            "id": 105168,
            "node_id": "MDQ6VXNlcjEwNTE2OA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/105168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dbrgn",
            "html_url": "https://github.com/dbrgn",
            "followers_url": "https://api.github.com/users/dbrgn/followers",
            "following_url": "https://api.github.com/users/dbrgn/following{/other_user}",
            "gists_url": "https://api.github.com/users/dbrgn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dbrgn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dbrgn/subscriptions",
            "organizations_url": "https://api.github.com/users/dbrgn/orgs",
            "repos_url": "https://api.github.com/users/dbrgn/repos",
            "events_url": "https://api.github.com/users/dbrgn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dbrgn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oops, I only checked `itry` docs in my browser, not `iexpect` :(\n\nDo you want a PR, or will you fix it directly on master?\n",
        "created_at": "2016-03-10T11:02:22Z",
        "updated_at": "2016-03-10T11:02:22Z",
        "html_url": "https://github.com/iron/iron/pull/435#discussion_r55663718",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/435",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55663718"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/435#discussion_r55663718"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55663960",
        "pull_request_review_id": null,
        "id": 55663960,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzOTYw",
        "diff_hunk": "@@ -22,8 +28,8 @@ macro_rules! itry {\n     })\n }\n \n-/// Unwrap the given Option or return a Ok(Response::new()) with the given modifier. The default\n-/// modifier is status::BadRequest.\n+/// Unwrap the given `Option` or return a `Ok(Response::new())` with the given\n+/// modifier. The default modifier is `status::BadRequest.",
        "path": "src/macros.rs",
        "position": 30,
        "original_position": 30,
        "commit_id": "f1cc306336fcfed3fbece372858ad7bcfa1f56c2",
        "original_commit_id": "f1cc306336fcfed3fbece372858ad7bcfa1f56c2",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fixed https://github.com/iron/iron/commit/44390ca93d7a4df93e7fd8397aadb6d84483f232\n\nOn Thu, Mar 10, 2016 at 03:02:49AM -0800, Skyler wrote:\n\n> > @@ -22,8 +28,8 @@ macro_rules! itry {\n> >      })\n> >  }\n> > \n> > -/// Unwrap the given Option or return a Ok(Response::new()) with the given modifier. The default\n> > -/// modifier is status::BadRequest.\n> > +/// Unwrap the given `Option` or return a `Ok(Response::new())` with the given\n> > +/// modifier. The default modifier is `status::BadRequest.\n> \n> how dare you :stuck_out_tongue_winking_eye:\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/iron/iron/pull/435/files#r55663753\n",
        "created_at": "2016-03-10T11:04:39Z",
        "updated_at": "2016-03-10T11:04:39Z",
        "html_url": "https://github.com/iron/iron/pull/435#discussion_r55663960",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/435",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55663960"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/435#discussion_r55663960"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55663753",
        "pull_request_review_id": null,
        "id": 55663753,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNzUz",
        "diff_hunk": "@@ -22,8 +28,8 @@ macro_rules! itry {\n     })\n }\n \n-/// Unwrap the given Option or return a Ok(Response::new()) with the given modifier. The default\n-/// modifier is status::BadRequest.\n+/// Unwrap the given `Option` or return a `Ok(Response::new())` with the given\n+/// modifier. The default modifier is `status::BadRequest.",
        "path": "src/macros.rs",
        "position": 30,
        "original_position": 30,
        "commit_id": "f1cc306336fcfed3fbece372858ad7bcfa1f56c2",
        "original_commit_id": "f1cc306336fcfed3fbece372858ad7bcfa1f56c2",
        "user": {
            "login": "SkylerLipthay",
            "id": 38674,
            "node_id": "MDQ6VXNlcjM4Njc0",
            "avatar_url": "https://avatars0.githubusercontent.com/u/38674?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SkylerLipthay",
            "html_url": "https://github.com/SkylerLipthay",
            "followers_url": "https://api.github.com/users/SkylerLipthay/followers",
            "following_url": "https://api.github.com/users/SkylerLipthay/following{/other_user}",
            "gists_url": "https://api.github.com/users/SkylerLipthay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SkylerLipthay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SkylerLipthay/subscriptions",
            "organizations_url": "https://api.github.com/users/SkylerLipthay/orgs",
            "repos_url": "https://api.github.com/users/SkylerLipthay/repos",
            "events_url": "https://api.github.com/users/SkylerLipthay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SkylerLipthay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "how dare you :stuck_out_tongue_winking_eye:\n\nI'll fix on master! --nevermind\n",
        "created_at": "2016-03-10T11:02:47Z",
        "updated_at": "2016-03-10T11:05:06Z",
        "html_url": "https://github.com/iron/iron/pull/435#discussion_r55663753",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/435",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55663753"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/435#discussion_r55663753"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/435"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55661686",
        "pull_request_review_id": null,
        "id": 55661686,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYxNjg2",
        "diff_hunk": "@@ -1,4 +1,5 @@\n-//! Defines a series of convenience modifiers for editing Responses\n+//! This module defines a series of convenience modifiers for editing",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 2,
        "commit_id": "e107bf9c5866a41777977ec69ee628f40411f3c5",
        "original_commit_id": "5fe75e508dc48d8b3dd5389a920ed74f7f05eb62",
        "user": {
            "login": "steveklabnik",
            "id": 27786,
            "node_id": "MDQ6VXNlcjI3Nzg2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/27786?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/steveklabnik",
            "html_url": "https://github.com/steveklabnik",
            "followers_url": "https://api.github.com/users/steveklabnik/followers",
            "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}",
            "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions",
            "organizations_url": "https://api.github.com/users/steveklabnik/orgs",
            "repos_url": "https://api.github.com/users/steveklabnik/repos",
            "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}",
            "received_events_url": "https://api.github.com/users/steveklabnik/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I might use 'change' rather than 'edit' here, for consistency with the rest of everything.\n",
        "created_at": "2016-03-10T10:43:10Z",
        "updated_at": "2016-03-10T11:18:09Z",
        "html_url": "https://github.com/iron/iron/pull/434#discussion_r55661686",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/434",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55661686"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/434#discussion_r55661686"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/434"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55661836",
        "pull_request_review_id": null,
        "id": 55661836,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYxODM2",
        "diff_hunk": "@@ -8,24 +9,48 @@\n //! and constructors, this provides a series of modifiers that\n //! can be used through the `Set` trait.\n //!\n-//! For instance, instead of `Response::redirect` constructing a\n-//! redirect response, we provide a `Redirect` modifier, so you\n-//! can just do:\n+//! The simplest case of a modifier is probably the one used to change the\n+//! return status code:\n //!\n //! ```\n //! # use iron::prelude::*;\n //! # use iron::status;\n-//! # use iron::modifiers::Redirect;\n+//!\n+//! let r = Response::with(status::NotFound);\n+//! assert_eq!(r.status.unwrap().to_u16(), 404);\n+//! ```\n+//!\n+//! You can also pass in a tuple of modifiers, they will all be applied. Here's\n+//! an example of a modifier 2-tuple that will change the status code and the",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 27,
        "commit_id": "e107bf9c5866a41777977ec69ee628f40411f3c5",
        "original_commit_id": "5fe75e508dc48d8b3dd5389a920ed74f7f05eb62",
        "user": {
            "login": "steveklabnik",
            "id": 27786,
            "node_id": "MDQ6VXNlcjI3Nzg2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/27786?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/steveklabnik",
            "html_url": "https://github.com/steveklabnik",
            "followers_url": "https://api.github.com/users/steveklabnik/followers",
            "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}",
            "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions",
            "organizations_url": "https://api.github.com/users/steveklabnik/orgs",
            "repos_url": "https://api.github.com/users/steveklabnik/repos",
            "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}",
            "received_events_url": "https://api.github.com/users/steveklabnik/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "tutuple, hehe\n![tutu](https://cloud.githubusercontent.com/assets/27786/13667163/1c6f75ee-e683-11e5-98ec-2c16f8be762c.jpg)\n",
        "created_at": "2016-03-10T10:44:15Z",
        "updated_at": "2016-03-10T11:18:09Z",
        "html_url": "https://github.com/iron/iron/pull/434#discussion_r55661836",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/434",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55661836"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/434#discussion_r55661836"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/434"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55662222",
        "pull_request_review_id": null,
        "id": 55662222,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMjIy",
        "diff_hunk": "@@ -8,24 +9,45 @@\n //! and constructors, this provides a series of modifiers that\n //! can be used through the `Set` trait.\n //!\n-//! For instance, instead of `Response::redirect` constructing a\n-//! redirect response, we provide a `Redirect` modifier, so you\n-//! can just do:\n+//! The simplest case of a modifier is probably the one used to change the\n+//! return status code:\n //!\n //! ```\n //! # use iron::prelude::*;\n //! # use iron::status;\n-//! # use iron::modifiers::Redirect;\n-//! # use iron::Url;\n+//! let r = Response::with(status::NotFound);\n+//! assert_eq!(r.status.unwrap().to_u16(), 404);\n+//! ```\n+//!\n+//! You can also pass in a tuple of modifiers, they will all be applied. Here's\n+//! an example of a modifier 2-tuple that will change the status code and the\n+//! body message:\n+//!\n+//! ```\n+//! # use iron::prelude::*;\n+//! # use iron::status;\n+//! Response::with((status::ImATeapot, \"I am a tea pot!\"));\n+//! ```\n+//!\n+//! There is also a `Redirect` modifier:\n //!\n+//! ```\n+//! # use iron::prelude::*;\n+//! # use iron::status;\n+//! # use iron::modifiers;\n+//! # use iron::Url;\n //! let url = Url::parse(\"http://doc.rust-lang.org\").unwrap();\n-//! Response::with((status::Found, Redirect(url)));\n+//! Response::with((status::Found, modifiers::Redirect(url)));\n //! ```\n //!\n //! This is more extensible as it allows you to combine",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 48,
        "commit_id": "e107bf9c5866a41777977ec69ee628f40411f3c5",
        "original_commit_id": "f9598443cde50fd3ca99abe69291ecc4d0a5e1fc",
        "user": {
            "login": "SkylerLipthay",
            "id": 38674,
            "node_id": "MDQ6VXNlcjM4Njc0",
            "avatar_url": "https://avatars0.githubusercontent.com/u/38674?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SkylerLipthay",
            "html_url": "https://github.com/SkylerLipthay",
            "followers_url": "https://api.github.com/users/SkylerLipthay/followers",
            "following_url": "https://api.github.com/users/SkylerLipthay/following{/other_user}",
            "gists_url": "https://api.github.com/users/SkylerLipthay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SkylerLipthay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SkylerLipthay/subscriptions",
            "organizations_url": "https://api.github.com/users/SkylerLipthay/orgs",
            "repos_url": "https://api.github.com/users/SkylerLipthay/repos",
            "events_url": "https://api.github.com/users/SkylerLipthay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SkylerLipthay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should this paragraph be moved, perhaps to after line 10? Or maybe combined with that paragraph?\n",
        "created_at": "2016-03-10T10:47:54Z",
        "updated_at": "2016-03-10T11:18:09Z",
        "html_url": "https://github.com/iron/iron/pull/434#discussion_r55662222",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/434",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55662222"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/434#discussion_r55662222"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/434"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55663010",
        "pull_request_review_id": null,
        "id": 55663010,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzMDEw",
        "diff_hunk": "@@ -8,24 +9,48 @@\n //! and constructors, this provides a series of modifiers that\n //! can be used through the `Set` trait.\n //!\n-//! For instance, instead of `Response::redirect` constructing a\n-//! redirect response, we provide a `Redirect` modifier, so you\n-//! can just do:\n+//! The simplest case of a modifier is probably the one used to change the\n+//! return status code:\n //!\n //! ```\n //! # use iron::prelude::*;\n //! # use iron::status;\n-//! # use iron::modifiers::Redirect;\n+//!\n+//! let r = Response::with(status::NotFound);\n+//! assert_eq!(r.status.unwrap().to_u16(), 404);\n+//! ```\n+//!\n+//! You can also pass in a tuple of modifiers, they will all be applied. Here's\n+//! an example of a modifier 2-tuple that will change the status code and the",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 27,
        "commit_id": "e107bf9c5866a41777977ec69ee628f40411f3c5",
        "original_commit_id": "5fe75e508dc48d8b3dd5389a920ed74f7f05eb62",
        "user": {
            "login": "dbrgn",
            "id": 105168,
            "node_id": "MDQ6VXNlcjEwNTE2OA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/105168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dbrgn",
            "html_url": "https://github.com/dbrgn",
            "followers_url": "https://api.github.com/users/dbrgn/followers",
            "following_url": "https://api.github.com/users/dbrgn/following{/other_user}",
            "gists_url": "https://api.github.com/users/dbrgn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dbrgn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dbrgn/subscriptions",
            "organizations_url": "https://api.github.com/users/dbrgn/orgs",
            "repos_url": "https://api.github.com/users/dbrgn/repos",
            "events_url": "https://api.github.com/users/dbrgn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dbrgn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hahaha :)\n\nDo you think just `tuple` would be better?\n",
        "created_at": "2016-03-10T10:55:35Z",
        "updated_at": "2016-03-10T11:18:09Z",
        "html_url": "https://github.com/iron/iron/pull/434#discussion_r55663010",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/434",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55663010"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/434#discussion_r55663010"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/434"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55663407",
        "pull_request_review_id": null,
        "id": 55663407,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNDA3",
        "diff_hunk": "@@ -1,30 +1,49 @@\n-//! Defines a series of convenience modifiers for editing Responses\n+//! This module defines a series of convenience modifiers for changing\n+//! Responses.\n //!\n-//! Modifiers can be used to edit Responses through the owning\n-//! method `set` or the mutating `set_mut`, both of which are\n-//! defined in the `Set` trait.\n+//! Modifiers can be used to edit `Response`s through the owning method `set`\n+//! or the mutating `set_mut`, both of which are defined in the `Set` trait.\n //!\n-//! Instead of having a combinatorial explosion of Response methods\n-//! and constructors, this provides a series of modifiers that\n-//! can be used through the `Set` trait.\n+//! Instead of having a combinatorial explosion of Response methods and\n+//! constructors, this provides a series of modifiers that can be used through\n+//! the `Set` trait. This is more extensible as it allows you to combine\n+//! arbitrary modifiers without having a massive number of Response\n+//! constructors.",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 18,
        "commit_id": "e107bf9c5866a41777977ec69ee628f40411f3c5",
        "original_commit_id": "29db24de92ea99571339d50968db662cdd7812eb",
        "user": {
            "login": "dbrgn",
            "id": 105168,
            "node_id": "MDQ6VXNlcjEwNTE2OA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/105168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dbrgn",
            "html_url": "https://github.com/dbrgn",
            "followers_url": "https://api.github.com/users/dbrgn/followers",
            "following_url": "https://api.github.com/users/dbrgn/following{/other_user}",
            "gists_url": "https://api.github.com/users/dbrgn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dbrgn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dbrgn/subscriptions",
            "organizations_url": "https://api.github.com/users/dbrgn/orgs",
            "repos_url": "https://api.github.com/users/dbrgn/repos",
            "events_url": "https://api.github.com/users/dbrgn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dbrgn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@SkylerLipthay I moved the paragraph up here, but still think that the wording is a bit confusing. Maybe you or @steveklabnik have a better proposal on wording?\n",
        "created_at": "2016-03-10T10:59:00Z",
        "updated_at": "2016-03-10T11:18:09Z",
        "html_url": "https://github.com/iron/iron/pull/434#discussion_r55663407",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/434",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55663407"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/434#discussion_r55663407"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/434"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55665115",
        "pull_request_review_id": null,
        "id": 55665115,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1MTE1",
        "diff_hunk": "@@ -1,30 +1,49 @@\n-//! Defines a series of convenience modifiers for editing Responses\n+//! This module defines a series of convenience modifiers for changing\n+//! Responses.\n //!\n-//! Modifiers can be used to edit Responses through the owning\n-//! method `set` or the mutating `set_mut`, both of which are\n-//! defined in the `Set` trait.\n+//! Modifiers can be used to edit `Response`s through the owning method `set`\n+//! or the mutating `set_mut`, both of which are defined in the `Set` trait.\n //!\n-//! Instead of having a combinatorial explosion of Response methods\n-//! and constructors, this provides a series of modifiers that\n-//! can be used through the `Set` trait.\n+//! Instead of having a combinatorial explosion of Response methods and\n+//! constructors, this provides a series of modifiers that can be used through\n+//! the `Set` trait. This is more extensible as it allows you to combine\n+//! arbitrary modifiers without having a massive number of Response\n+//! constructors.",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 18,
        "commit_id": "e107bf9c5866a41777977ec69ee628f40411f3c5",
        "original_commit_id": "29db24de92ea99571339d50968db662cdd7812eb",
        "user": {
            "login": "SkylerLipthay",
            "id": 38674,
            "node_id": "MDQ6VXNlcjM4Njc0",
            "avatar_url": "https://avatars0.githubusercontent.com/u/38674?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SkylerLipthay",
            "html_url": "https://github.com/SkylerLipthay",
            "followers_url": "https://api.github.com/users/SkylerLipthay/followers",
            "following_url": "https://api.github.com/users/SkylerLipthay/following{/other_user}",
            "gists_url": "https://api.github.com/users/SkylerLipthay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SkylerLipthay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SkylerLipthay/subscriptions",
            "organizations_url": "https://api.github.com/users/SkylerLipthay/orgs",
            "repos_url": "https://api.github.com/users/SkylerLipthay/repos",
            "events_url": "https://api.github.com/users/SkylerLipthay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SkylerLipthay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think the whole paragraph could be replaced with \"For Iron, the `Modifier` interface offers extensible and ergonomic `Response` creation while avoiding the introduction of many highly specific `Response` constructors.\"\n",
        "created_at": "2016-03-10T11:14:43Z",
        "updated_at": "2016-03-10T11:18:09Z",
        "html_url": "https://github.com/iron/iron/pull/434#discussion_r55665115",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/434",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55665115"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/434#discussion_r55665115"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/434"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/55665318",
        "pull_request_review_id": null,
        "id": 55665318,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1MzE4",
        "diff_hunk": "@@ -1,30 +1,49 @@\n-//! Defines a series of convenience modifiers for editing Responses\n+//! This module defines a series of convenience modifiers for changing\n+//! Responses.\n //!\n-//! Modifiers can be used to edit Responses through the owning\n-//! method `set` or the mutating `set_mut`, both of which are\n-//! defined in the `Set` trait.\n+//! Modifiers can be used to edit `Response`s through the owning method `set`\n+//! or the mutating `set_mut`, both of which are defined in the `Set` trait.\n //!\n-//! Instead of having a combinatorial explosion of Response methods\n-//! and constructors, this provides a series of modifiers that\n-//! can be used through the `Set` trait.\n+//! Instead of having a combinatorial explosion of Response methods and\n+//! constructors, this provides a series of modifiers that can be used through\n+//! the `Set` trait. This is more extensible as it allows you to combine\n+//! arbitrary modifiers without having a massive number of Response\n+//! constructors.",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 18,
        "commit_id": "e107bf9c5866a41777977ec69ee628f40411f3c5",
        "original_commit_id": "29db24de92ea99571339d50968db662cdd7812eb",
        "user": {
            "login": "dbrgn",
            "id": 105168,
            "node_id": "MDQ6VXNlcjEwNTE2OA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/105168?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dbrgn",
            "html_url": "https://github.com/dbrgn",
            "followers_url": "https://api.github.com/users/dbrgn/followers",
            "following_url": "https://api.github.com/users/dbrgn/following{/other_user}",
            "gists_url": "https://api.github.com/users/dbrgn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dbrgn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dbrgn/subscriptions",
            "organizations_url": "https://api.github.com/users/dbrgn/orgs",
            "repos_url": "https://api.github.com/users/dbrgn/repos",
            "events_url": "https://api.github.com/users/dbrgn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dbrgn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sounds great!\n",
        "created_at": "2016-03-10T11:16:52Z",
        "updated_at": "2016-03-10T11:18:09Z",
        "html_url": "https://github.com/iron/iron/pull/434#discussion_r55665318",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/434",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/55665318"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/434#discussion_r55665318"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/434"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/57855410",
        "pull_request_review_id": null,
        "id": 57855410,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODU1NDEw",
        "diff_hunk": "@@ -152,9 +152,12 @@ impl fmt::Display for Url {\n         // Write the host.\n         try!(self.host.fmt(formatter));\n \n-        // Write the port.\n-        try!(\":\".fmt(formatter));\n-        try!(self.port.fmt(formatter));\n+        // Write the port if they are not the default ports of 80 for HTTP and 443 for HTTPS.\n+        if !((self.scheme == \"http\".to_owned() && self.port == 80) ||\n+            (self.scheme == \"https\".to_owned() && self.port == 443)) {",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 9,
        "commit_id": "683d4d3d148a48f45939f7678441ca0cea6f5b6e",
        "original_commit_id": "e15c6cd6cf4f61a8f917e732b9dcef2ee4b8a7c9",
        "user": {
            "login": "fsommar",
            "id": 3105909,
            "node_id": "MDQ6VXNlcjMxMDU5MDk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3105909?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fsommar",
            "html_url": "https://github.com/fsommar",
            "followers_url": "https://api.github.com/users/fsommar/followers",
            "following_url": "https://api.github.com/users/fsommar/following{/other_user}",
            "gists_url": "https://api.github.com/users/fsommar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fsommar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fsommar/subscriptions",
            "organizations_url": "https://api.github.com/users/fsommar/orgs",
            "repos_url": "https://api.github.com/users/fsommar/repos",
            "events_url": "https://api.github.com/users/fsommar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fsommar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wouldn't it be possible to do &self.scheme == \"http\" or similarly to prevent allocations?\n",
        "created_at": "2016-03-30T08:52:21Z",
        "updated_at": "2016-03-30T15:50:13Z",
        "html_url": "https://github.com/iron/iron/pull/445#discussion_r57855410",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/445",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/57855410"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/445#discussion_r57855410"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/445"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/57912757",
        "pull_request_review_id": null,
        "id": 57912757,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTEyNzU3",
        "diff_hunk": "@@ -152,9 +152,12 @@ impl fmt::Display for Url {\n         // Write the host.\n         try!(self.host.fmt(formatter));\n \n-        // Write the port.\n-        try!(\":\".fmt(formatter));\n-        try!(self.port.fmt(formatter));\n+        // Write the port if they are not the default ports of 80 for HTTP and 443 for HTTPS.\n+        if !((self.scheme == \"http\".to_owned() && self.port == 80) ||\n+            (self.scheme == \"https\".to_owned() && self.port == 443)) {",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 9,
        "commit_id": "683d4d3d148a48f45939f7678441ca0cea6f5b6e",
        "original_commit_id": "e15c6cd6cf4f61a8f917e732b9dcef2ee4b8a7c9",
        "user": {
            "login": "gsquire",
            "id": 2665334,
            "node_id": "MDQ6VXNlcjI2NjUzMzQ=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2665334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gsquire",
            "html_url": "https://github.com/gsquire",
            "followers_url": "https://api.github.com/users/gsquire/followers",
            "following_url": "https://api.github.com/users/gsquire/following{/other_user}",
            "gists_url": "https://api.github.com/users/gsquire/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gsquire/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gsquire/subscriptions",
            "organizations_url": "https://api.github.com/users/gsquire/orgs",
            "repos_url": "https://api.github.com/users/gsquire/repos",
            "events_url": "https://api.github.com/users/gsquire/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gsquire/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're right, plus that looks cleaner. Good catch.\n",
        "created_at": "2016-03-30T15:49:25Z",
        "updated_at": "2016-03-30T15:50:13Z",
        "html_url": "https://github.com/iron/iron/pull/445#discussion_r57912757",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/445",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/57912757"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/445#discussion_r57912757"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/445"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61839002",
        "pull_request_review_id": null,
        "id": 61839002,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODM5MDAy",
        "diff_hunk": "@@ -70,70 +67,47 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {\n+            false => {\n                 // Extract the port as a 16-bit unsigned integer.\n-                let port: u16 = match data.port {\n-                    // If explicitly defined, unwrap it.\n+                let port: u16 = match raw_url.port_or_known_default() {\n+                    // If explicitly defined or has a known default, unwrap it.\n                     Some(port) => port,\n \n                     // Otherwise, use the scheme's default port.\n-                    None => {\n-                        match whatwg_scheme_type_mapper(&raw_url.scheme) {\n-                            SchemeType::Relative(port) => port,\n-                            _ => return Err(format!(\"Invalid special scheme: `{}`\",\n-                                                    raw_url.scheme))\n-                        }\n-                    }\n+                    None => return Err(format!(\"Invalid special scheme: `{}`\",\n+                                                    raw_url.scheme())),\n                 };\n-\n                 // Map empty usernames to None.\n-                let username = match &*data.username {\n+                let username = match raw_url.username() {\n                     \"\" => None,\n-                    _ => Some(data.username)\n+                    _ => Some(raw_url.username())\n                 };\n-\n                 // Map empty passwords to None.\n-                let password = match data.password {\n+                let password = match raw_url.password() {\n                     None => None,\n                     Some(ref x) if x.is_empty() => None,\n                     Some(password) => Some(password)\n                 };\n-\n                 Ok(Url {\n-                    scheme: raw_url.scheme,\n-                    host: data.host,\n+                    scheme: raw_url.scheme().to_string(),\n+                    // `unwrap` is safe here because urls that cannot be a base don't have a host\n+                    host: raw_url.host().unwrap().to_owned(),\n                     port: port,\n-                    path: data.path,\n-                    username: username,\n-                    password: password,\n-                    query: raw_url.query,\n-                    fragment: raw_url.fragment\n+                    path: raw_url.path_segments().into_iter().flat_map(|x| x).map(|x| x.to_string()).collect(),",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 66,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "bca05d75107e7bb3896064e78633334d663d5045",
        "user": {
            "login": "SimonSapin",
            "id": 291359,
            "node_id": "MDQ6VXNlcjI5MTM1OQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/291359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SimonSapin",
            "html_url": "https://github.com/SimonSapin",
            "followers_url": "https://api.github.com/users/SimonSapin/followers",
            "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}",
            "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions",
            "organizations_url": "https://api.github.com/users/SimonSapin/orgs",
            "repos_url": "https://api.github.com/users/SimonSapin/repos",
            "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SimonSapin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Given `raw_url.cannot_be_a_base() == false`, `raw_url.path_segments()` can be assumed to return `Some`. So there is no need to use `Option::into_iter` and this line can be `path: raw_url.path_segments().unwrap().map(|x| x.to_string()).collect()`.\n",
        "created_at": "2016-05-03T05:13:45Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61839002",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61839002"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61839002"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61895919",
        "pull_request_review_id": null,
        "id": 61895919,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODk1OTE5",
        "diff_hunk": "@@ -70,70 +67,47 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {\n+            false => {\n                 // Extract the port as a 16-bit unsigned integer.\n-                let port: u16 = match data.port {\n-                    // If explicitly defined, unwrap it.\n+                let port: u16 = match raw_url.port_or_known_default() {\n+                    // If explicitly defined or has a known default, unwrap it.\n                     Some(port) => port,\n \n                     // Otherwise, use the scheme's default port.\n-                    None => {\n-                        match whatwg_scheme_type_mapper(&raw_url.scheme) {\n-                            SchemeType::Relative(port) => port,\n-                            _ => return Err(format!(\"Invalid special scheme: `{}`\",\n-                                                    raw_url.scheme))\n-                        }\n-                    }\n+                    None => return Err(format!(\"Invalid special scheme: `{}`\",\n+                                                    raw_url.scheme())),\n                 };\n-\n                 // Map empty usernames to None.\n-                let username = match &*data.username {\n+                let username = match raw_url.username() {\n                     \"\" => None,\n-                    _ => Some(data.username)\n+                    _ => Some(raw_url.username())\n                 };\n-\n                 // Map empty passwords to None.\n-                let password = match data.password {\n+                let password = match raw_url.password() {\n                     None => None,\n                     Some(ref x) if x.is_empty() => None,\n                     Some(password) => Some(password)\n                 };\n-\n                 Ok(Url {\n-                    scheme: raw_url.scheme,\n-                    host: data.host,\n+                    scheme: raw_url.scheme().to_string(),\n+                    // `unwrap` is safe here because urls that cannot be a base don't have a host\n+                    host: raw_url.host().unwrap().to_owned(),\n                     port: port,\n-                    path: data.path,\n-                    username: username,\n-                    password: password,\n-                    query: raw_url.query,\n-                    fragment: raw_url.fragment\n+                    path: raw_url.path_segments().into_iter().flat_map(|x| x).map(|x| x.to_string()).collect(),\n+                    username: username.map(|s| s.to_string()),\n+                    password: password.map(|s| s.to_string()),\n+                    query: raw_url.query().map(|s| s.to_string()),\n+                    fragment: raw_url.fragment().map(|s| s.to_string()),",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 70,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "bca05d75107e7bb3896064e78633334d663d5045",
        "user": {
            "login": "LFalch",
            "id": 1416084,
            "node_id": "MDQ6VXNlcjE0MTYwODQ=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1416084?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LFalch",
            "html_url": "https://github.com/LFalch",
            "followers_url": "https://api.github.com/users/LFalch/followers",
            "following_url": "https://api.github.com/users/LFalch/following{/other_user}",
            "gists_url": "https://api.github.com/users/LFalch/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LFalch/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LFalch/subscriptions",
            "organizations_url": "https://api.github.com/users/LFalch/orgs",
            "repos_url": "https://api.github.com/users/LFalch/repos",
            "events_url": "https://api.github.com/users/LFalch/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LFalch/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could this not just be `std::string::ToString::to_string`?\n",
        "created_at": "2016-05-03T14:58:38Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61895919",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61895919"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61895919"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61943140",
        "pull_request_review_id": null,
        "id": 61943140,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQzMTQw",
        "diff_hunk": "@@ -70,70 +67,47 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {\n+            false => {\n                 // Extract the port as a 16-bit unsigned integer.\n-                let port: u16 = match data.port {\n-                    // If explicitly defined, unwrap it.\n+                let port: u16 = match raw_url.port_or_known_default() {\n+                    // If explicitly defined or has a known default, unwrap it.\n                     Some(port) => port,\n \n                     // Otherwise, use the scheme's default port.\n-                    None => {\n-                        match whatwg_scheme_type_mapper(&raw_url.scheme) {\n-                            SchemeType::Relative(port) => port,\n-                            _ => return Err(format!(\"Invalid special scheme: `{}`\",\n-                                                    raw_url.scheme))\n-                        }\n-                    }\n+                    None => return Err(format!(\"Invalid special scheme: `{}`\",\n+                                                    raw_url.scheme())),\n                 };\n-\n                 // Map empty usernames to None.\n-                let username = match &*data.username {\n+                let username = match raw_url.username() {\n                     \"\" => None,\n-                    _ => Some(data.username)\n+                    _ => Some(raw_url.username())\n                 };\n-\n                 // Map empty passwords to None.\n-                let password = match data.password {\n+                let password = match raw_url.password() {\n                     None => None,\n                     Some(ref x) if x.is_empty() => None,\n                     Some(password) => Some(password)\n                 };\n-\n                 Ok(Url {\n-                    scheme: raw_url.scheme,\n-                    host: data.host,\n+                    scheme: raw_url.scheme().to_string(),\n+                    // `unwrap` is safe here because urls that cannot be a base don't have a host\n+                    host: raw_url.host().unwrap().to_owned(),\n                     port: port,\n-                    path: data.path,\n-                    username: username,\n-                    password: password,\n-                    query: raw_url.query,\n-                    fragment: raw_url.fragment\n+                    path: raw_url.path_segments().into_iter().flat_map(|x| x).map(|x| x.to_string()).collect(),\n+                    username: username.map(|s| s.to_string()),\n+                    password: password.map(|s| s.to_string()),\n+                    query: raw_url.query().map(|s| s.to_string()),\n+                    fragment: raw_url.fragment().map(|s| s.to_string()),",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 70,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "bca05d75107e7bb3896064e78633334d663d5045",
        "user": {
            "login": "carols10cents",
            "id": 193874,
            "node_id": "MDQ6VXNlcjE5Mzg3NA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/193874?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/carols10cents",
            "html_url": "https://github.com/carols10cents",
            "followers_url": "https://api.github.com/users/carols10cents/followers",
            "following_url": "https://api.github.com/users/carols10cents/following{/other_user}",
            "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions",
            "organizations_url": "https://api.github.com/users/carols10cents/orgs",
            "repos_url": "https://api.github.com/users/carols10cents/repos",
            "events_url": "https://api.github.com/users/carols10cents/events{/privacy}",
            "received_events_url": "https://api.github.com/users/carols10cents/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry, do you mean make this change?\n\n``` diff\n- fragment: raw_url.fragment().map(|s| s.to_string()),\n+ fragment: raw_url.fragment().to_string(),\n```\n\nThis doesn't work because `url::Url::fragment` returns `Option<&str>`, and `Option<&str>` doesn't implement `Display`. Or is there another way to use `std::string::ToString::to_string`?\n",
        "created_at": "2016-05-03T19:44:33Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61943140",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61943140"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61943140"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61943322",
        "pull_request_review_id": null,
        "id": 61943322,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQzMzIy",
        "diff_hunk": "@@ -70,70 +67,47 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {\n+            false => {\n                 // Extract the port as a 16-bit unsigned integer.\n-                let port: u16 = match data.port {\n-                    // If explicitly defined, unwrap it.\n+                let port: u16 = match raw_url.port_or_known_default() {\n+                    // If explicitly defined or has a known default, unwrap it.\n                     Some(port) => port,\n \n                     // Otherwise, use the scheme's default port.\n-                    None => {\n-                        match whatwg_scheme_type_mapper(&raw_url.scheme) {\n-                            SchemeType::Relative(port) => port,\n-                            _ => return Err(format!(\"Invalid special scheme: `{}`\",\n-                                                    raw_url.scheme))\n-                        }\n-                    }\n+                    None => return Err(format!(\"Invalid special scheme: `{}`\",\n+                                                    raw_url.scheme())),\n                 };\n-\n                 // Map empty usernames to None.\n-                let username = match &*data.username {\n+                let username = match raw_url.username() {\n                     \"\" => None,\n-                    _ => Some(data.username)\n+                    _ => Some(raw_url.username())\n                 };\n-\n                 // Map empty passwords to None.\n-                let password = match data.password {\n+                let password = match raw_url.password() {\n                     None => None,\n                     Some(ref x) if x.is_empty() => None,\n                     Some(password) => Some(password)\n                 };\n-\n                 Ok(Url {\n-                    scheme: raw_url.scheme,\n-                    host: data.host,\n+                    scheme: raw_url.scheme().to_string(),\n+                    // `unwrap` is safe here because urls that cannot be a base don't have a host\n+                    host: raw_url.host().unwrap().to_owned(),\n                     port: port,\n-                    path: data.path,\n-                    username: username,\n-                    password: password,\n-                    query: raw_url.query,\n-                    fragment: raw_url.fragment\n+                    path: raw_url.path_segments().into_iter().flat_map(|x| x).map(|x| x.to_string()).collect(),\n+                    username: username.map(|s| s.to_string()),\n+                    password: password.map(|s| s.to_string()),\n+                    query: raw_url.query().map(|s| s.to_string()),\n+                    fragment: raw_url.fragment().map(|s| s.to_string()),",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 70,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "bca05d75107e7bb3896064e78633334d663d5045",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can pass ToString::to_string to map.\n\nOn 3 May 2016 21:44:39 CEST, \"Carol (Nichols || Goulding)\" notifications@github.com wrote:\n\n> > ```\n> >                  port: port,\n> > ```\n> > -                    path: data.path,\n> > -                    username: username,\n> > -                    password: password,\n> > -                    query: raw_url.query,\n> > -                    fragment: raw_url.fragment\n> > -                    path:\n> >   raw_url.path_segments().into_iter().flat_map(|x| x).map(|x|\n> >   x.to_string()).collect(),\n> > -                    username: username.map(|s| s.to_string()),\n> > -                    password: password.map(|s| s.to_string()),\n> > -                    query: raw_url.query().map(|s| s.to_string()),\n> > -                    fragment: raw_url.fragment().map(|s|\n> >   s.to_string()),\n> \n> Sorry, do you mean make this change?\n> \n> ``` diff\n> - fragment: raw_url.fragment().map(|s| s.to_string()),\n> + fragment: raw_url.fragment().to_string(),\n> ```\n> \n> This doesn't work because `url::Url::fragment` returns `Option<&str>`,\n> and `Option<&str>` doesn't implement `Display`. Or is there another way\n> to use `std::string::ToString::to_string`?\n> \n> ---\n> \n> You are receiving this because you commented.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/iron/iron/pull/452/files/bca05d75107e7bb3896064e78633334d663d5045#r61943140\n\n## \n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n",
        "created_at": "2016-05-03T19:45:45Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61943322",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61943322"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61943322"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61943344",
        "pull_request_review_id": null,
        "id": 61943344,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQzMzQ0",
        "diff_hunk": "@@ -70,70 +67,47 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {\n+            false => {\n                 // Extract the port as a 16-bit unsigned integer.\n-                let port: u16 = match data.port {\n-                    // If explicitly defined, unwrap it.\n+                let port: u16 = match raw_url.port_or_known_default() {\n+                    // If explicitly defined or has a known default, unwrap it.\n                     Some(port) => port,\n \n                     // Otherwise, use the scheme's default port.\n-                    None => {\n-                        match whatwg_scheme_type_mapper(&raw_url.scheme) {\n-                            SchemeType::Relative(port) => port,\n-                            _ => return Err(format!(\"Invalid special scheme: `{}`\",\n-                                                    raw_url.scheme))\n-                        }\n-                    }\n+                    None => return Err(format!(\"Invalid special scheme: `{}`\",\n+                                                    raw_url.scheme())),\n                 };\n-\n                 // Map empty usernames to None.\n-                let username = match &*data.username {\n+                let username = match raw_url.username() {\n                     \"\" => None,\n-                    _ => Some(data.username)\n+                    _ => Some(raw_url.username())\n                 };\n-\n                 // Map empty passwords to None.\n-                let password = match data.password {\n+                let password = match raw_url.password() {\n                     None => None,\n                     Some(ref x) if x.is_empty() => None,\n                     Some(password) => Some(password)\n                 };\n-\n                 Ok(Url {\n-                    scheme: raw_url.scheme,\n-                    host: data.host,\n+                    scheme: raw_url.scheme().to_string(),\n+                    // `unwrap` is safe here because urls that cannot be a base don't have a host\n+                    host: raw_url.host().unwrap().to_owned(),\n                     port: port,\n-                    path: data.path,\n-                    username: username,\n-                    password: password,\n-                    query: raw_url.query,\n-                    fragment: raw_url.fragment\n+                    path: raw_url.path_segments().into_iter().flat_map(|x| x).map(|x| x.to_string()).collect(),",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 66,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "bca05d75107e7bb3896064e78633334d663d5045",
        "user": {
            "login": "carols10cents",
            "id": 193874,
            "node_id": "MDQ6VXNlcjE5Mzg3NA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/193874?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/carols10cents",
            "html_url": "https://github.com/carols10cents",
            "followers_url": "https://api.github.com/users/carols10cents/followers",
            "following_url": "https://api.github.com/users/carols10cents/following{/other_user}",
            "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions",
            "organizations_url": "https://api.github.com/users/carols10cents/orgs",
            "repos_url": "https://api.github.com/users/carols10cents/repos",
            "events_url": "https://api.github.com/users/carols10cents/events{/privacy}",
            "received_events_url": "https://api.github.com/users/carols10cents/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good catch! I've added a commit to address this. Thank you!\n",
        "created_at": "2016-05-03T19:45:55Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61943344",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61943344"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61943344"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61943489",
        "pull_request_review_id": null,
        "id": 61943489,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQzNDg5",
        "diff_hunk": "@@ -70,70 +67,48 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 17,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "9146f221b9ba3a84b0d994a971ce4333e4cc30e5",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "match on bool should be an if/else\n",
        "created_at": "2016-05-03T19:46:57Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61943489",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61943489"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61943489"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61943979",
        "pull_request_review_id": null,
        "id": 61943979,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQzOTc5",
        "diff_hunk": "@@ -70,70 +67,47 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {\n+            false => {\n                 // Extract the port as a 16-bit unsigned integer.\n-                let port: u16 = match data.port {\n-                    // If explicitly defined, unwrap it.\n+                let port: u16 = match raw_url.port_or_known_default() {\n+                    // If explicitly defined or has a known default, unwrap it.\n                     Some(port) => port,\n \n                     // Otherwise, use the scheme's default port.\n-                    None => {\n-                        match whatwg_scheme_type_mapper(&raw_url.scheme) {\n-                            SchemeType::Relative(port) => port,\n-                            _ => return Err(format!(\"Invalid special scheme: `{}`\",\n-                                                    raw_url.scheme))\n-                        }\n-                    }\n+                    None => return Err(format!(\"Invalid special scheme: `{}`\",\n+                                                    raw_url.scheme())),\n                 };\n-\n                 // Map empty usernames to None.\n-                let username = match &*data.username {\n+                let username = match raw_url.username() {\n                     \"\" => None,\n-                    _ => Some(data.username)\n+                    _ => Some(raw_url.username())\n                 };\n-\n                 // Map empty passwords to None.\n-                let password = match data.password {\n+                let password = match raw_url.password() {\n                     None => None,\n                     Some(ref x) if x.is_empty() => None,\n                     Some(password) => Some(password)\n                 };\n-\n                 Ok(Url {\n-                    scheme: raw_url.scheme,\n-                    host: data.host,\n+                    scheme: raw_url.scheme().to_string(),\n+                    // `unwrap` is safe here because urls that cannot be a base don't have a host\n+                    host: raw_url.host().unwrap().to_owned(),\n                     port: port,\n-                    path: data.path,\n-                    username: username,\n-                    password: password,\n-                    query: raw_url.query,\n-                    fragment: raw_url.fragment\n+                    path: raw_url.path_segments().into_iter().flat_map(|x| x).map(|x| x.to_string()).collect(),\n+                    username: username.map(|s| s.to_string()),\n+                    password: password.map(|s| s.to_string()),\n+                    query: raw_url.query().map(|s| s.to_string()),\n+                    fragment: raw_url.fragment().map(|s| s.to_string()),",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 70,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "bca05d75107e7bb3896064e78633334d663d5045",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Though I am unsure if that's a desirable change or purely subject to\nbikeshedding.\n\nOn Tue, May 03, 2016 at 12:44:39PM -0700, Carol (Nichols || Goulding) wrote:\n\n> > ```\n> >                  port: port,\n> > ```\n> > -                    path: data.path,\n> > -                    username: username,\n> > -                    password: password,\n> > -                    query: raw_url.query,\n> > -                    fragment: raw_url.fragment\n> > -                    path: raw_url.path_segments().into_iter().flat_map(|x| x).map(|x| x.to_string()).collect(),\n> > -                    username: username.map(|s| s.to_string()),\n> > -                    password: password.map(|s| s.to_string()),\n> > -                    query: raw_url.query().map(|s| s.to_string()),\n> > -                    fragment: raw_url.fragment().map(|s| s.to_string()),\n> \n> Sorry, do you mean make this change?\n> \n> ``` diff\n> - fragment: raw_url.fragment().map(|s| s.to_string()),\n> + fragment: raw_url.fragment().to_string(),\n> ```\n> \n> This doesn't work because `url::Url::fragment` returns `Option<&str>`, and `Option<&str>` doesn't implement `Display`. Or is there another way to use `std::string::ToString::to_string`?\n> \n> ---\n> \n> You are receiving this because you commented.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/iron/iron/pull/452/files/bca05d75107e7bb3896064e78633334d663d5045#r61943140\n",
        "created_at": "2016-05-03T19:50:00Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61943979",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61943979"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61943979"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61944068",
        "pull_request_review_id": null,
        "id": 61944068,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQ0MDY4",
        "diff_hunk": "@@ -70,70 +67,47 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {\n+            false => {\n                 // Extract the port as a 16-bit unsigned integer.\n-                let port: u16 = match data.port {\n-                    // If explicitly defined, unwrap it.\n+                let port: u16 = match raw_url.port_or_known_default() {\n+                    // If explicitly defined or has a known default, unwrap it.\n                     Some(port) => port,\n \n                     // Otherwise, use the scheme's default port.\n-                    None => {\n-                        match whatwg_scheme_type_mapper(&raw_url.scheme) {\n-                            SchemeType::Relative(port) => port,\n-                            _ => return Err(format!(\"Invalid special scheme: `{}`\",\n-                                                    raw_url.scheme))\n-                        }\n-                    }\n+                    None => return Err(format!(\"Invalid special scheme: `{}`\",\n+                                                    raw_url.scheme())),\n                 };\n-\n                 // Map empty usernames to None.\n-                let username = match &*data.username {\n+                let username = match raw_url.username() {\n                     \"\" => None,\n-                    _ => Some(data.username)\n+                    _ => Some(raw_url.username())\n                 };\n-\n                 // Map empty passwords to None.\n-                let password = match data.password {\n+                let password = match raw_url.password() {\n                     None => None,\n                     Some(ref x) if x.is_empty() => None,\n                     Some(password) => Some(password)\n                 };\n-\n                 Ok(Url {\n-                    scheme: raw_url.scheme,\n-                    host: data.host,\n+                    scheme: raw_url.scheme().to_string(),\n+                    // `unwrap` is safe here because urls that cannot be a base don't have a host\n+                    host: raw_url.host().unwrap().to_owned(),\n                     port: port,\n-                    path: data.path,\n-                    username: username,\n-                    password: password,\n-                    query: raw_url.query,\n-                    fragment: raw_url.fragment\n+                    path: raw_url.path_segments().into_iter().flat_map(|x| x).map(|x| x.to_string()).collect(),\n+                    username: username.map(|s| s.to_string()),\n+                    password: password.map(|s| s.to_string()),\n+                    query: raw_url.query().map(|s| s.to_string()),\n+                    fragment: raw_url.fragment().map(|s| s.to_string()),",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 70,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "bca05d75107e7bb3896064e78633334d663d5045",
        "user": {
            "login": "SimonSapin",
            "id": 291359,
            "node_id": "MDQ6VXNlcjI5MTM1OQ==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/291359?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SimonSapin",
            "html_url": "https://github.com/SimonSapin",
            "followers_url": "https://api.github.com/users/SimonSapin/followers",
            "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}",
            "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions",
            "organizations_url": "https://api.github.com/users/SimonSapin/orgs",
            "repos_url": "https://api.github.com/users/SimonSapin/repos",
            "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SimonSapin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe @LFalch meant replacing `.map(|s| s.to_string())` with `.map(::std::string::ToString::to_string)`? In that case it can also be written `.map(str::to_string)` (since the `str` type is in the prelude), but I don\u2019t know if it\u2019s better than a closure. Matter of preference, I suppose.\n",
        "created_at": "2016-05-03T19:50:39Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61944068",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61944068"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61944068"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61944465",
        "pull_request_review_id": null,
        "id": 61944465,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQ0NDY1",
        "diff_hunk": "@@ -70,70 +67,47 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {\n+            false => {\n                 // Extract the port as a 16-bit unsigned integer.\n-                let port: u16 = match data.port {\n-                    // If explicitly defined, unwrap it.\n+                let port: u16 = match raw_url.port_or_known_default() {\n+                    // If explicitly defined or has a known default, unwrap it.\n                     Some(port) => port,\n \n                     // Otherwise, use the scheme's default port.\n-                    None => {\n-                        match whatwg_scheme_type_mapper(&raw_url.scheme) {\n-                            SchemeType::Relative(port) => port,\n-                            _ => return Err(format!(\"Invalid special scheme: `{}`\",\n-                                                    raw_url.scheme))\n-                        }\n-                    }\n+                    None => return Err(format!(\"Invalid special scheme: `{}`\",\n+                                                    raw_url.scheme())),\n                 };\n-\n                 // Map empty usernames to None.\n-                let username = match &*data.username {\n+                let username = match raw_url.username() {\n                     \"\" => None,\n-                    _ => Some(data.username)\n+                    _ => Some(raw_url.username())\n                 };\n-\n                 // Map empty passwords to None.\n-                let password = match data.password {\n+                let password = match raw_url.password() {\n                     None => None,\n                     Some(ref x) if x.is_empty() => None,\n                     Some(password) => Some(password)\n                 };\n-\n                 Ok(Url {\n-                    scheme: raw_url.scheme,\n-                    host: data.host,\n+                    scheme: raw_url.scheme().to_string(),\n+                    // `unwrap` is safe here because urls that cannot be a base don't have a host\n+                    host: raw_url.host().unwrap().to_owned(),\n                     port: port,\n-                    path: data.path,\n-                    username: username,\n-                    password: password,\n-                    query: raw_url.query,\n-                    fragment: raw_url.fragment\n+                    path: raw_url.path_segments().into_iter().flat_map(|x| x).map(|x| x.to_string()).collect(),\n+                    username: username.map(|s| s.to_string()),\n+                    password: password.map(|s| s.to_string()),\n+                    query: raw_url.query().map(|s| s.to_string()),\n+                    fragment: raw_url.fragment().map(|s| s.to_string()),",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 70,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "bca05d75107e7bb3896064e78633334d663d5045",
        "user": {
            "login": "carols10cents",
            "id": 193874,
            "node_id": "MDQ6VXNlcjE5Mzg3NA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/193874?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/carols10cents",
            "html_url": "https://github.com/carols10cents",
            "followers_url": "https://api.github.com/users/carols10cents/followers",
            "following_url": "https://api.github.com/users/carols10cents/following{/other_user}",
            "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions",
            "organizations_url": "https://api.github.com/users/carols10cents/orgs",
            "repos_url": "https://api.github.com/users/carols10cents/repos",
            "events_url": "https://api.github.com/users/carols10cents/events{/privacy}",
            "received_events_url": "https://api.github.com/users/carols10cents/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ahhhhh I see! I'll add a commit on here and yinz can choose to keep it or not :) \n",
        "created_at": "2016-05-03T19:52:54Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61944465",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61944465"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61944465"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61944708",
        "pull_request_review_id": null,
        "id": 61944708,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQ0NzA4",
        "diff_hunk": "@@ -70,70 +67,47 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {\n+            false => {\n                 // Extract the port as a 16-bit unsigned integer.\n-                let port: u16 = match data.port {\n-                    // If explicitly defined, unwrap it.\n+                let port: u16 = match raw_url.port_or_known_default() {\n+                    // If explicitly defined or has a known default, unwrap it.\n                     Some(port) => port,\n \n                     // Otherwise, use the scheme's default port.\n-                    None => {\n-                        match whatwg_scheme_type_mapper(&raw_url.scheme) {\n-                            SchemeType::Relative(port) => port,\n-                            _ => return Err(format!(\"Invalid special scheme: `{}`\",\n-                                                    raw_url.scheme))\n-                        }\n-                    }\n+                    None => return Err(format!(\"Invalid special scheme: `{}`\",\n+                                                    raw_url.scheme())),\n                 };\n-\n                 // Map empty usernames to None.\n-                let username = match &*data.username {\n+                let username = match raw_url.username() {\n                     \"\" => None,\n-                    _ => Some(data.username)\n+                    _ => Some(raw_url.username())\n                 };\n-\n                 // Map empty passwords to None.\n-                let password = match data.password {\n+                let password = match raw_url.password() {\n                     None => None,\n                     Some(ref x) if x.is_empty() => None,\n                     Some(password) => Some(password)\n                 };\n-\n                 Ok(Url {\n-                    scheme: raw_url.scheme,\n-                    host: data.host,\n+                    scheme: raw_url.scheme().to_string(),\n+                    // `unwrap` is safe here because urls that cannot be a base don't have a host\n+                    host: raw_url.host().unwrap().to_owned(),\n                     port: port,\n-                    path: data.path,\n-                    username: username,\n-                    password: password,\n-                    query: raw_url.query,\n-                    fragment: raw_url.fragment\n+                    path: raw_url.path_segments().into_iter().flat_map(|x| x).map(|x| x.to_string()).collect(),\n+                    username: username.map(|s| s.to_string()),\n+                    password: password.map(|s| s.to_string()),\n+                    query: raw_url.query().map(|s| s.to_string()),\n+                    fragment: raw_url.fragment().map(|s| s.to_string()),",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 70,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "bca05d75107e7bb3896064e78633334d663d5045",
        "user": {
            "login": "LFalch",
            "id": 1416084,
            "node_id": "MDQ6VXNlcjE0MTYwODQ=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1416084?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LFalch",
            "html_url": "https://github.com/LFalch",
            "followers_url": "https://api.github.com/users/LFalch/followers",
            "following_url": "https://api.github.com/users/LFalch/following{/other_user}",
            "gists_url": "https://api.github.com/users/LFalch/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LFalch/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LFalch/subscriptions",
            "organizations_url": "https://api.github.com/users/LFalch/orgs",
            "repos_url": "https://api.github.com/users/LFalch/repos",
            "events_url": "https://api.github.com/users/LFalch/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LFalch/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@SimonSapin That's exactly what I meant!\n",
        "created_at": "2016-05-03T19:54:35Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61944708",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61944708"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61944708"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61944801",
        "pull_request_review_id": null,
        "id": 61944801,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQ0ODAx",
        "diff_hunk": "@@ -70,70 +67,48 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 17,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "9146f221b9ba3a84b0d994a971ce4333e4cc30e5",
        "user": {
            "login": "carols10cents",
            "id": 193874,
            "node_id": "MDQ6VXNlcjE5Mzg3NA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/193874?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/carols10cents",
            "html_url": "https://github.com/carols10cents",
            "followers_url": "https://api.github.com/users/carols10cents/followers",
            "following_url": "https://api.github.com/users/carols10cents/following{/other_user}",
            "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions",
            "organizations_url": "https://api.github.com/users/carols10cents/orgs",
            "repos_url": "https://api.github.com/users/carols10cents/repos",
            "events_url": "https://api.github.com/users/carols10cents/events{/privacy}",
            "received_events_url": "https://api.github.com/users/carols10cents/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "On it!\n",
        "created_at": "2016-05-03T19:55:19Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61944801",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61944801"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61944801"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/61945060",
        "pull_request_review_id": null,
        "id": 61945060,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTQ1MDYw",
        "diff_hunk": "@@ -70,70 +67,48 @@ impl Url {\n     /// Create a `Url` from a `rust-url` `Url`.\n     pub fn from_generic_url(raw_url: url::Url) -> Result<Url, String> {\n         // Create an Iron URL by extracting the special scheme data.\n-        match raw_url.scheme_data {\n-            SchemeData::Relative(data) => {\n+        match raw_url.cannot_be_a_base() {",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 17,
        "commit_id": "f2ae44f3b99b7eb6bcdcae4fa1bfe1febcac2e35",
        "original_commit_id": "9146f221b9ba3a84b0d994a971ce4333e4cc30e5",
        "user": {
            "login": "carols10cents",
            "id": 193874,
            "node_id": "MDQ6VXNlcjE5Mzg3NA==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/193874?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/carols10cents",
            "html_url": "https://github.com/carols10cents",
            "followers_url": "https://api.github.com/users/carols10cents/followers",
            "following_url": "https://api.github.com/users/carols10cents/following{/other_user}",
            "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions",
            "organizations_url": "https://api.github.com/users/carols10cents/orgs",
            "repos_url": "https://api.github.com/users/carols10cents/repos",
            "events_url": "https://api.github.com/users/carols10cents/events{/privacy}",
            "received_events_url": "https://api.github.com/users/carols10cents/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "And commit added.\n",
        "created_at": "2016-05-03T19:57:02Z",
        "updated_at": "2016-05-06T17:27:43Z",
        "html_url": "https://github.com/iron/iron/pull/452#discussion_r61945060",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/452",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/61945060"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/452#discussion_r61945060"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/81374507",
        "pull_request_review_id": 2360397,
        "id": 81374507,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMzc0NTA3",
        "diff_hunk": "@@ -0,0 +1,41 @@\n+// This requires running with:\n+//\n+// ```bash\n+// cargo run --example https --features ssl\n+// ```\n+//\n+// Generate a key and certificate like so:\n+//\n+// ```bash\n+// openssl genrsa -out localhost.key 4096\n+// openssl req -key localhost.key -x509 -new -days 3650 -out localhost.crt\n+// ```\n+\n+extern crate iron;\n+\n+#[cfg(feature = \"ssl\")]\n+fn main() {\n+    // Avoid unused errors due to conditional compilation ('ssl' feature is not default)\n+    use iron::status;\n+    use iron::{Iron, Request, Response};\n+    use std::path::{Path};\n+    use std::result::{Result};\n+\n+    // openssl genrsa -out localhost.key 4096\n+    let key = Path::new(\"localhost.key\").to_path_buf();\n+    // openssl req -key localhost.key -x509 -new -days 3650 -out localhost.crt\n+    let cert = Path::new(\"localhost.crt\").to_path_buf();\n+\n+    match Iron::new(|_: &mut Request| {\n+        Ok(Response::with((status::Ok, \"Hello world!\")))\n+    }).https(\"127.0.0.1:3000\", cert, key) {\n+        Result::Ok(listening) => println!(\"{:?}\", listening),\n+        Result::Err(err) => println!(\"{:?}\", err),",
        "path": "examples/https.rs",
        "position": null,
        "original_position": 33,
        "commit_id": "1fc512f58685f20dda8782f3a1faaea610f569e4",
        "original_commit_id": "1569ef184b92b2564ff1cba7fddd366c37d86a69",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Needs a different exitcode I think. Also for illustratory purposes I think it's good enough to `unwrap` to keep the example short.\n",
        "created_at": "2016-09-30T16:41:50Z",
        "updated_at": "2016-09-30T17:15:18Z",
        "html_url": "https://github.com/iron/iron/pull/485#discussion_r81374507",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/485",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/81374507"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/485#discussion_r81374507"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/485"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/81379687",
        "pull_request_review_id": 2365511,
        "id": 81379687,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMzc5Njg3",
        "diff_hunk": "@@ -0,0 +1,41 @@\n+// This requires running with:\n+//\n+// ```bash\n+// cargo run --example https --features ssl\n+// ```\n+//\n+// Generate a key and certificate like so:\n+//\n+// ```bash\n+// openssl genrsa -out localhost.key 4096\n+// openssl req -key localhost.key -x509 -new -days 3650 -out localhost.crt\n+// ```\n+\n+extern crate iron;\n+\n+#[cfg(feature = \"ssl\")]\n+fn main() {\n+    // Avoid unused errors due to conditional compilation ('ssl' feature is not default)\n+    use iron::status;\n+    use iron::{Iron, Request, Response};\n+    use std::path::{Path};\n+    use std::result::{Result};\n+\n+    // openssl genrsa -out localhost.key 4096\n+    let key = Path::new(\"localhost.key\").to_path_buf();\n+    // openssl req -key localhost.key -x509 -new -days 3650 -out localhost.crt\n+    let cert = Path::new(\"localhost.crt\").to_path_buf();\n+\n+    match Iron::new(|_: &mut Request| {\n+        Ok(Response::with((status::Ok, \"Hello world!\")))\n+    }).https(\"127.0.0.1:3000\", cert, key) {\n+        Result::Ok(listening) => println!(\"{:?}\", listening),\n+        Result::Err(err) => println!(\"{:?}\", err),",
        "path": "examples/https.rs",
        "position": null,
        "original_position": 33,
        "commit_id": "1fc512f58685f20dda8782f3a1faaea610f569e4",
        "original_commit_id": "1569ef184b92b2564ff1cba7fddd366c37d86a69",
        "user": {
            "login": "Hoverbear",
            "id": 130903,
            "node_id": "MDQ6VXNlcjEzMDkwMw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/130903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Hoverbear",
            "html_url": "https://github.com/Hoverbear",
            "followers_url": "https://api.github.com/users/Hoverbear/followers",
            "following_url": "https://api.github.com/users/Hoverbear/following{/other_user}",
            "gists_url": "https://api.github.com/users/Hoverbear/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Hoverbear/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Hoverbear/subscriptions",
            "organizations_url": "https://api.github.com/users/Hoverbear/orgs",
            "repos_url": "https://api.github.com/users/Hoverbear/repos",
            "events_url": "https://api.github.com/users/Hoverbear/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Hoverbear/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This method is nice because it outputs `Listening { socket: V4(127.0.0.1:3000) }` which is nice for users to see \"Oh hey look it's listening I can browse to it\".\n\nI do agree that the Err should panic though. Will amend.\n",
        "created_at": "2016-09-30T17:13:42Z",
        "updated_at": "2016-09-30T17:15:18Z",
        "html_url": "https://github.com/iron/iron/pull/485#discussion_r81379687",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/485",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/81379687"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/485#discussion_r81379687"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/485"
            }
        },
        "in_reply_to_id": 81374507
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/81445695",
        "pull_request_review_id": 2427932,
        "id": 81445695,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxNDQ1Njk1",
        "diff_hunk": "@@ -79,13 +80,21 @@ impl<'a, 'b> Request<'a, 'b> {\n             },\n \n             AbsolutePath(ref path) => {\n-                // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n-                let url_string = match headers.get::<headers::Host>() {\n-                    Some(ref host) => {\n-                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, local_addr.port(),\n-                                path)\n+                let url_string = match (version, headers.get::<headers::Host>()) {\n+                    (_, Some(ref host)) => {\n+                        // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n+                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, local_addr.port(), path)\n                     },\n-                    None => return Err(\"No host specified in request\".to_string())\n+                    (v, None) if v < HttpVersion::Http11 => {\n+                        // Attempt to use the local address? (host header is not required in HTTP/1.0).\n+                        match local_addr {\n+                            SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),",
        "path": "src/request/mod.rs",
        "position": 35,
        "original_position": 35,
        "commit_id": "2c0cbbdec7139ae46f40306499e76d62653957b4",
        "original_commit_id": "ba033a923883fddab79463427c5c58987ae399d8",
        "user": {
            "login": "Hoverbear",
            "id": 130903,
            "node_id": "MDQ6VXNlcjEzMDkwMw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/130903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Hoverbear",
            "html_url": "https://github.com/Hoverbear",
            "followers_url": "https://api.github.com/users/Hoverbear/followers",
            "following_url": "https://api.github.com/users/Hoverbear/following{/other_user}",
            "gists_url": "https://api.github.com/users/Hoverbear/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Hoverbear/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Hoverbear/subscriptions",
            "organizations_url": "https://api.github.com/users/Hoverbear/orgs",
            "repos_url": "https://api.github.com/users/Hoverbear/repos",
            "events_url": "https://api.github.com/users/Hoverbear/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Hoverbear/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is what was already used so there is no reason for this to block this PR. (See line 85). Also a few lines later we do `Url::parse`. I agree it kind of sucks. Cleaning it should be a different PR.\n",
        "created_at": "2016-10-01T07:44:09Z",
        "updated_at": "2016-10-01T07:50:12Z",
        "html_url": "https://github.com/iron/iron/pull/362#discussion_r81445695",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/362",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/81445695"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/362#discussion_r81445695"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/362"
            }
        },
        "in_reply_to_id": 43538532
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/84896653",
        "pull_request_review_id": 5644250,
        "id": 84896653,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0ODk2NjUz",
        "diff_hunk": "@@ -1,13 +1,46 @@\n+#[macro_use]\n+extern crate mime;\n extern crate iron;\n \n+use std::env;\n+\n use iron::prelude::*;\n-use iron::mime::Mime;\n+use iron::headers::ContentType;\n use iron::status;\n \n+// All these variants do the same thing, with more or less options for customization.\n+\n+fn variant1(_: &mut Request) -> IronResult<Response> {\n+    Ok(Response::with((ContentType::json().0, status::Ok, \"{}\")))\n+}\n+\n+fn variant2(_: &mut Request) -> IronResult<Response> {\n+    use iron::mime;\n+    let content_type = \"application/json\".parse::<mime::Mime>().unwrap();\n+    Ok(Response::with((content_type, status::Ok, \"{}\")))\n+}\n+\n+fn variant3(_: &mut Request) -> IronResult<Response> {\n+    let content_type = mime!(Application/Json);\n+    Ok(Response::with((content_type, status::Ok, \"{}\")))\n+}\n+\n+fn variant4(_: &mut Request) -> IronResult<Response> {\n+    use iron::mime;\n+    let content_type = mime::Mime(iron::mime::TopLevel::Application, iron::mime::SubLevel::Json, vec![]);\n+    Ok(Response::with((content_type, status::Ok, \"{}\")))\n+}\n \n fn main() {\n-    Iron::new(|_: &mut Request| {\n-        let content_type = \"application/json\".parse::<Mime>().unwrap();\n-        Ok(Response::with((content_type, status::Ok, \"{}\")))\n-    }).http(\"localhost:3000\").unwrap();\n+    let args: Vec<String> = env::args().collect();\n+    let variant_index = if args.len() > 1 { args[1].parse().unwrap() } else { 1 };",
        "path": "examples/content_type.rs",
        "position": 41,
        "original_position": 41,
        "commit_id": "9708eabef45703d870f7901639b0cd6f7230b260",
        "original_commit_id": "9708eabef45703d870f7901639b0cd6f7230b260",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can use Option::unwrap_or here.\n",
        "created_at": "2016-10-25T13:06:07Z",
        "updated_at": "2016-10-25T13:06:30Z",
        "html_url": "https://github.com/iron/iron/pull/489#discussion_r84896653",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/489",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/84896653"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/489#discussion_r84896653"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/489"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/84899287",
        "pull_request_review_id": 5646724,
        "id": 84899287,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0ODk5Mjg3",
        "diff_hunk": "@@ -1,13 +1,46 @@\n+#[macro_use]\n+extern crate mime;\n extern crate iron;\n \n+use std::env;\n+\n use iron::prelude::*;\n-use iron::mime::Mime;\n+use iron::headers::ContentType;\n use iron::status;\n \n+// All these variants do the same thing, with more or less options for customization.\n+\n+fn variant1(_: &mut Request) -> IronResult<Response> {\n+    Ok(Response::with((ContentType::json().0, status::Ok, \"{}\")))\n+}\n+\n+fn variant2(_: &mut Request) -> IronResult<Response> {\n+    use iron::mime;\n+    let content_type = \"application/json\".parse::<mime::Mime>().unwrap();\n+    Ok(Response::with((content_type, status::Ok, \"{}\")))\n+}\n+\n+fn variant3(_: &mut Request) -> IronResult<Response> {\n+    let content_type = mime!(Application/Json);\n+    Ok(Response::with((content_type, status::Ok, \"{}\")))\n+}\n+\n+fn variant4(_: &mut Request) -> IronResult<Response> {\n+    use iron::mime;\n+    let content_type = mime::Mime(iron::mime::TopLevel::Application, iron::mime::SubLevel::Json, vec![]);\n+    Ok(Response::with((content_type, status::Ok, \"{}\")))\n+}\n \n fn main() {\n-    Iron::new(|_: &mut Request| {\n-        let content_type = \"application/json\".parse::<Mime>().unwrap();\n-        Ok(Response::with((content_type, status::Ok, \"{}\")))\n-    }).http(\"localhost:3000\").unwrap();\n+    let args: Vec<String> = env::args().collect();\n+    let variant_index = if args.len() > 1 { args[1].parse().unwrap() } else { 1 };",
        "path": "examples/content_type.rs",
        "position": 41,
        "original_position": 41,
        "commit_id": "9708eabef45703d870f7901639b0cd6f7230b260",
        "original_commit_id": "9708eabef45703d870f7901639b0cd6f7230b260",
        "user": {
            "login": "AndiDog",
            "id": 1376043,
            "node_id": "MDQ6VXNlcjEzNzYwNDM=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1376043?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AndiDog",
            "html_url": "https://github.com/AndiDog",
            "followers_url": "https://api.github.com/users/AndiDog/followers",
            "following_url": "https://api.github.com/users/AndiDog/following{/other_user}",
            "gists_url": "https://api.github.com/users/AndiDog/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AndiDog/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AndiDog/subscriptions",
            "organizations_url": "https://api.github.com/users/AndiDog/orgs",
            "repos_url": "https://api.github.com/users/AndiDog/repos",
            "events_url": "https://api.github.com/users/AndiDog/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AndiDog/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You mean for the integer parsing? I'd rather have it scream out loud if the user passes an invalid value.\n",
        "created_at": "2016-10-25T13:19:34Z",
        "updated_at": "2016-10-25T13:19:34Z",
        "html_url": "https://github.com/iron/iron/pull/489#discussion_r84899287",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/489",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/84899287"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/489#discussion_r84899287"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/489"
            }
        },
        "in_reply_to_id": 84896653
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/85336400",
        "pull_request_review_id": 6057794,
        "id": 85336400,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MzM2NDAw",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+extern crate iron;\n+extern crate router;\n+\n+use iron::Handler;\n+use iron::status;\n+use iron::IronResult;\n+use iron::Response;\n+use iron::Request;\n+use iron::Iron;\n+use router::Router;\n+\n+struct EchoHandler {",
        "path": "examples/complex_routing.rs",
        "position": 12,
        "original_position": 12,
        "commit_id": "3eb66be7fc25723017234b6e446f647d281bec02",
        "original_commit_id": "3eb66be7fc25723017234b6e446f647d281bec02",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This doesn't \"echo\" anything the client sent.\n",
        "created_at": "2016-10-27T13:30:47Z",
        "updated_at": "2016-10-27T13:31:12Z",
        "html_url": "https://github.com/iron/iron/pull/491#discussion_r85336400",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/491",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/85336400"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/491#discussion_r85336400"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/491"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/95082082",
        "pull_request_review_id": 15626835,
        "id": 95082082,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDgyMDgy",
        "diff_hunk": "@@ -0,0 +1,25 @@\n+extern crate iron;\n+\n+use std::time::Duration;\n+\n+use iron::prelude::*;\n+use iron::status;\n+use iron::Protocol;\n+use iron::Timeouts;\n+\n+fn main() {\n+    Iron::new(|_: &mut Request| {\n+        Ok(Response::with((status::Ok, \"Hello world!\")))\n+    })\n+    .listen_with(\"localhost:3000\",",
        "path": "examples/hello_custom_config.rs",
        "position": null,
        "original_position": 14,
        "commit_id": "2a4c6fbbc7326672f18a2d795d6d654882321187",
        "original_commit_id": "edc6a629b1f3c071f39ee3860cd10bdabcc69a47",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please put this on a newline, that's too much indentation.",
        "created_at": "2017-01-08T15:37:16Z",
        "updated_at": "2017-01-08T18:23:16Z",
        "html_url": "https://github.com/iron/iron/pull/509#discussion_r95082082",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/509",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/95082082"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/509#discussion_r95082082"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/509"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/95081752",
        "pull_request_review_id": 15626525,
        "id": 95081752,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDgxNzUy",
        "diff_hunk": "@@ -1,41 +1,63 @@\n // This requires running with:\n //\n // ```bash\n-// cargo run --example https --features ssl\n+// cargo run --example https --features openssl-example\n // ```\n //\n // Generate a key and certificate like so:\n //\n // ```bash\n-// openssl genrsa -out localhost.key 4096\n-// openssl req -key localhost.key -x509 -new -days 3650 -out localhost.crt\n+// openssl req -x509 -newkey rsa:4096 -nodes -keyout localhost.key -out localhost.crt -days 3650\n // ```\n \n extern crate iron;\n+#[cfg(feature = \"openssl-example\")]\n+extern crate hyper_openssl;\n+#[cfg(feature = \"openssl-example\")]\n+extern crate openssl;\n \n-#[cfg(feature = \"ssl\")]\n+#[cfg(feature = \"openssl-example\")]\n fn main() {\n-    // Avoid unused errors due to conditional compilation ('ssl' feature is not default)\n-    use iron::status;\n+    // Avoid unused errors due to conditional compilation ('openssl-example' feature is not default)\n+    use hyper_openssl::OpensslServer;\n     use iron::{Iron, Request, Response};\n-    use std::path::{Path};\n-    use std::result::{Result};\n+    use iron::status;",
        "path": "examples/https.rs",
        "position": null,
        "original_position": 32,
        "commit_id": "363479e240a2c1f61842db2fb7db699b254c214e",
        "original_commit_id": "0fee44bfed7f4837e285a29f42049c32e9fcdc0b",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This new usage is super-verbose. Before we make people change their code, could we have a shortcut for this in e.g. `hyper-openssl`? Something like `OpensslServer::from_files<C: AsRef<Path, K: AsRef<Path>>(cert: C, key: K)`",
        "created_at": "2017-01-08T15:22:30Z",
        "updated_at": "2017-01-09T23:52:56Z",
        "html_url": "https://github.com/iron/iron/pull/510#discussion_r95081752",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/510",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/95081752"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/510#discussion_r95081752"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/510"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/95081765",
        "pull_request_review_id": 15626525,
        "id": 95081765,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDgxNzY1",
        "diff_hunk": "@@ -67,32 +67,40 @@ impl Default for Timeouts {\n \n /// Protocol used to serve content. Future versions of Iron may add new protocols\n /// to this enum. Thus you should not exhaustively match on its variants.\n-#[derive(Clone)]\n+#[derive(Copy, Clone)]\n pub enum Protocol {\n     /// Plaintext HTTP/1\n     Http,\n     /// HTTP/1 over SSL/TLS\n-    #[cfg(feature = \"ssl\")]\n-    Https {\n-        /// Path to SSL certificate file\n-        certificate: PathBuf,\n-        /// Path to SSL private key file\n-        key: PathBuf\n-    }\n+    Https,\n+    #[doc(hidden)]\n+    __Extensible,",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 51,
        "commit_id": "363479e240a2c1f61842db2fb7db699b254c214e",
        "original_commit_id": "0fee44bfed7f4837e285a29f42049c32e9fcdc0b",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Huh, why?",
        "created_at": "2017-01-08T15:23:04Z",
        "updated_at": "2017-01-09T23:52:56Z",
        "html_url": "https://github.com/iron/iron/pull/510#discussion_r95081765",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/510",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/95081765"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/510#discussion_r95081765"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/510"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/95082972",
        "pull_request_review_id": 15627651,
        "id": 95082972,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDgyOTcy",
        "diff_hunk": "@@ -67,32 +67,40 @@ impl Default for Timeouts {\n \n /// Protocol used to serve content. Future versions of Iron may add new protocols\n /// to this enum. Thus you should not exhaustively match on its variants.\n-#[derive(Clone)]\n+#[derive(Copy, Clone)]\n pub enum Protocol {\n     /// Plaintext HTTP/1\n     Http,\n     /// HTTP/1 over SSL/TLS\n-    #[cfg(feature = \"ssl\")]\n-    Https {\n-        /// Path to SSL certificate file\n-        certificate: PathBuf,\n-        /// Path to SSL private key file\n-        key: PathBuf\n-    }\n+    Https,\n+    #[doc(hidden)]\n+    __Extensible,",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 51,
        "commit_id": "363479e240a2c1f61842db2fb7db699b254c214e",
        "original_commit_id": "0fee44bfed7f4837e285a29f42049c32e9fcdc0b",
        "user": {
            "login": "seanmonstar",
            "id": 51479,
            "node_id": "MDQ6VXNlcjUxNDc5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/51479?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seanmonstar",
            "html_url": "https://github.com/seanmonstar",
            "followers_url": "https://api.github.com/users/seanmonstar/followers",
            "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}",
            "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions",
            "organizations_url": "https://api.github.com/users/seanmonstar/orgs",
            "repos_url": "https://api.github.com/users/seanmonstar/repos",
            "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seanmonstar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "To allow adding new variants in the future.\r\n\r\nI'd actually recommend making the enum part private, and expose function constructors instead.\r\n\r\n```rust\r\npub struct Protocol(Proto);\r\nenum Proto { .. }\r\n\r\nimpl Protocol {\r\n    pub fn http() -> Protocol {\r\n        Protocol(Proto::Http)\r\n    }\r\n}\r\n```",
        "created_at": "2017-01-08T16:17:44Z",
        "updated_at": "2017-01-09T23:52:56Z",
        "html_url": "https://github.com/iron/iron/pull/510#discussion_r95082972",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/510",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/95082972"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/510#discussion_r95082972"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/510"
            }
        },
        "in_reply_to_id": 95081765
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/95086427",
        "pull_request_review_id": 15630830,
        "id": 95086427,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDg2NDI3",
        "diff_hunk": "@@ -1,41 +1,63 @@\n // This requires running with:\n //\n // ```bash\n-// cargo run --example https --features ssl\n+// cargo run --example https --features openssl-example\n // ```\n //\n // Generate a key and certificate like so:\n //\n // ```bash\n-// openssl genrsa -out localhost.key 4096\n-// openssl req -key localhost.key -x509 -new -days 3650 -out localhost.crt\n+// openssl req -x509 -newkey rsa:4096 -nodes -keyout localhost.key -out localhost.crt -days 3650\n // ```\n \n extern crate iron;\n+#[cfg(feature = \"openssl-example\")]\n+extern crate hyper_openssl;\n+#[cfg(feature = \"openssl-example\")]\n+extern crate openssl;\n \n-#[cfg(feature = \"ssl\")]\n+#[cfg(feature = \"openssl-example\")]\n fn main() {\n-    // Avoid unused errors due to conditional compilation ('ssl' feature is not default)\n-    use iron::status;\n+    // Avoid unused errors due to conditional compilation ('openssl-example' feature is not default)\n+    use hyper_openssl::OpensslServer;\n     use iron::{Iron, Request, Response};\n-    use std::path::{Path};\n-    use std::result::{Result};\n+    use iron::status;",
        "path": "examples/https.rs",
        "position": null,
        "original_position": 32,
        "commit_id": "363479e240a2c1f61842db2fb7db699b254c214e",
        "original_commit_id": "0fee44bfed7f4837e285a29f42049c32e9fcdc0b",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Updated! I haven't published the openssl and hyper-openssl releases yet, but assuming this looks good I will.",
        "created_at": "2017-01-08T19:26:19Z",
        "updated_at": "2017-01-09T23:52:56Z",
        "html_url": "https://github.com/iron/iron/pull/510#discussion_r95086427",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/510",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/95086427"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/510#discussion_r95086427"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/510"
            }
        },
        "in_reply_to_id": 95081752
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/95086428",
        "pull_request_review_id": 15630832,
        "id": 95086428,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDg2NDI4",
        "diff_hunk": "@@ -67,32 +67,40 @@ impl Default for Timeouts {\n \n /// Protocol used to serve content. Future versions of Iron may add new protocols\n /// to this enum. Thus you should not exhaustively match on its variants.\n-#[derive(Clone)]\n+#[derive(Copy, Clone)]\n pub enum Protocol {\n     /// Plaintext HTTP/1\n     Http,\n     /// HTTP/1 over SSL/TLS\n-    #[cfg(feature = \"ssl\")]\n-    Https {\n-        /// Path to SSL certificate file\n-        certificate: PathBuf,\n-        /// Path to SSL private key file\n-        key: PathBuf\n-    }\n+    Https,\n+    #[doc(hidden)]\n+    __Extensible,",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 51,
        "commit_id": "363479e240a2c1f61842db2fb7db699b254c214e",
        "original_commit_id": "0fee44bfed7f4837e285a29f42049c32e9fcdc0b",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done",
        "created_at": "2017-01-08T19:26:24Z",
        "updated_at": "2017-01-09T23:52:56Z",
        "html_url": "https://github.com/iron/iron/pull/510#discussion_r95086428",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/510",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/95086428"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/510#discussion_r95086428"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/510"
            }
        },
        "in_reply_to_id": 95081765
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/95087109",
        "pull_request_review_id": 15631494,
        "id": 95087109,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MDg3MTA5",
        "diff_hunk": "@@ -1,41 +1,63 @@\n // This requires running with:\n //\n // ```bash\n-// cargo run --example https --features ssl\n+// cargo run --example https --features openssl-example\n // ```\n //\n // Generate a key and certificate like so:\n //\n // ```bash\n-// openssl genrsa -out localhost.key 4096\n-// openssl req -key localhost.key -x509 -new -days 3650 -out localhost.crt\n+// openssl req -x509 -newkey rsa:4096 -nodes -keyout localhost.key -out localhost.crt -days 3650\n // ```\n \n extern crate iron;\n+#[cfg(feature = \"openssl-example\")]\n+extern crate hyper_openssl;\n+#[cfg(feature = \"openssl-example\")]\n+extern crate openssl;\n \n-#[cfg(feature = \"ssl\")]\n+#[cfg(feature = \"openssl-example\")]\n fn main() {\n-    // Avoid unused errors due to conditional compilation ('ssl' feature is not default)\n-    use iron::status;\n+    // Avoid unused errors due to conditional compilation ('openssl-example' feature is not default)\n+    use hyper_openssl::OpensslServer;\n     use iron::{Iron, Request, Response};\n-    use std::path::{Path};\n-    use std::result::{Result};\n+    use iron::status;",
        "path": "examples/https.rs",
        "position": null,
        "original_position": 32,
        "commit_id": "363479e240a2c1f61842db2fb7db699b254c214e",
        "original_commit_id": "0fee44bfed7f4837e285a29f42049c32e9fcdc0b",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hmm, now that I think about it, I wonder if this example would be better off using native-tls instead?",
        "created_at": "2017-01-08T20:01:33Z",
        "updated_at": "2017-01-09T23:52:56Z",
        "html_url": "https://github.com/iron/iron/pull/510#discussion_r95087109",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/510",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/95087109"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/510#discussion_r95087109"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/510"
            }
        },
        "in_reply_to_id": 95081752
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/95340321",
        "pull_request_review_id": 15890536,
        "id": 95340321,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MzQwMzIx",
        "diff_hunk": "@@ -116,9 +124,26 @@ impl<'a, 'b> Request<'a, 'b> {\n             headers: headers,\n             body: Body::new(reader),\n             method: method,\n-            extensions: TypeMap::new()\n+            extensions: TypeMap::new(),\n+            version: version,\n+            _p: (),\n         })\n     }\n+\n+    #[cfg(test)]\n+    pub fn stub() -> Request<'a, 'b> {",
        "path": "src/request/mod.rs",
        "position": 36,
        "original_position": 36,
        "commit_id": "e23dc0cf6cfda83bc871ef82b35dc067dfeb4518",
        "original_commit_id": "e23dc0cf6cfda83bc871ef82b35dc067dfeb4518",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why move this? IMO it's nice that code for testing is separated.",
        "created_at": "2017-01-10T10:52:57Z",
        "updated_at": "2017-01-10T10:53:40Z",
        "html_url": "https://github.com/iron/iron/pull/511#discussion_r95340321",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/511",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/95340321"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/511#discussion_r95340321"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/511"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/95400524",
        "pull_request_review_id": 15953726,
        "id": 95400524,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDAwNTI0",
        "diff_hunk": "@@ -116,9 +124,26 @@ impl<'a, 'b> Request<'a, 'b> {\n             headers: headers,\n             body: Body::new(reader),\n             method: method,\n-            extensions: TypeMap::new()\n+            extensions: TypeMap::new(),\n+            version: version,\n+            _p: (),\n         })\n     }\n+\n+    #[cfg(test)]\n+    pub fn stub() -> Request<'a, 'b> {",
        "path": "src/request/mod.rs",
        "position": 36,
        "original_position": 36,
        "commit_id": "e23dc0cf6cfda83bc871ef82b35dc067dfeb4518",
        "original_commit_id": "e23dc0cf6cfda83bc871ef82b35dc067dfeb4518",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The _p field prevents a Request from being instantiated outside this module.",
        "created_at": "2017-01-10T16:24:58Z",
        "updated_at": "2017-01-10T16:24:58Z",
        "html_url": "https://github.com/iron/iron/pull/511#discussion_r95400524",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/511",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/95400524"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/511#discussion_r95400524"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/511"
            }
        },
        "in_reply_to_id": 95340321
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/96609844",
        "pull_request_review_id": 17195549,
        "id": 96609844,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NjA5ODQ0",
        "diff_hunk": "@@ -36,7 +36,7 @@ pub struct IronError {\n }\n \n impl IronError {\n-    /// Create a new IronError from an error and a modifier.\n+    /// Create a new 'IronError' from an error and a modifier.",
        "path": "src/error.rs",
        "position": null,
        "original_position": 14,
        "commit_id": "72e4da1763294a7ca410f9e5a155cb1a97c39e72",
        "original_commit_id": "544be2b1b503c69b3b5e8d7b5b7f341bbeef1a2b",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "These should be backticks I think.",
        "created_at": "2017-01-18T10:59:06Z",
        "updated_at": "2017-01-18T11:04:28Z",
        "html_url": "https://github.com/iron/iron/pull/516#discussion_r96609844",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/516",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/96609844"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/516#discussion_r96609844"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/516"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/96610836",
        "pull_request_review_id": 17196500,
        "id": 96610836,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NjEwODM2",
        "diff_hunk": "@@ -36,7 +36,7 @@ pub struct IronError {\n }\n \n impl IronError {\n-    /// Create a new IronError from an error and a modifier.\n+    /// Create a new 'IronError' from an error and a modifier.",
        "path": "src/error.rs",
        "position": null,
        "original_position": 14,
        "commit_id": "72e4da1763294a7ca410f9e5a155cb1a97c39e72",
        "original_commit_id": "544be2b1b503c69b3b5e8d7b5b7f341bbeef1a2b",
        "user": {
            "login": "tomprince",
            "id": 283816,
            "node_id": "MDQ6VXNlcjI4MzgxNg==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/283816?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tomprince",
            "html_url": "https://github.com/tomprince",
            "followers_url": "https://api.github.com/users/tomprince/followers",
            "following_url": "https://api.github.com/users/tomprince/following{/other_user}",
            "gists_url": "https://api.github.com/users/tomprince/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tomprince/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tomprince/subscriptions",
            "organizations_url": "https://api.github.com/users/tomprince/orgs",
            "repos_url": "https://api.github.com/users/tomprince/repos",
            "events_url": "https://api.github.com/users/tomprince/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tomprince/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, fixed.",
        "created_at": "2017-01-18T11:04:33Z",
        "updated_at": "2017-01-18T11:04:33Z",
        "html_url": "https://github.com/iron/iron/pull/516#discussion_r96610836",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/516",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/96610836"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/516#discussion_r96610836"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/516"
            }
        },
        "in_reply_to_id": 96609844
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/100145956",
        "pull_request_review_id": 20843400,
        "id": 100145956,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NTk1Ng==",
        "diff_hunk": "@@ -1,10 +1,9 @@\n-use std::error::Error as StdError;\n use std::fmt;\n \n use modifier::Modifier;\n use {Response};\n \n-pub use err::Error;\n+pub use std::error::Error;",
        "path": "src/error.rs",
        "position": 8,
        "original_position": 8,
        "commit_id": "5518ed8feb0571f0f9e2baed785e630ffc1ea463",
        "original_commit_id": "5518ed8feb0571f0f9e2baed785e630ffc1ea463",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We may want to cut this reexport. I only had it there as a (failed) attempt to keep the change roughly backwards compatible.",
        "created_at": "2017-02-08T19:16:46Z",
        "updated_at": "2017-02-08T19:16:46Z",
        "html_url": "https://github.com/iron/iron/pull/515#discussion_r100145956",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/515",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/100145956"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/515#discussion_r100145956"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/515"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/100146394",
        "pull_request_review_id": 20843863,
        "id": 100146394,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDE0NjM5NA==",
        "diff_hunk": "@@ -1,10 +1,9 @@\n-use std::error::Error as StdError;\n use std::fmt;\n \n use modifier::Modifier;\n use {Response};\n \n-pub use err::Error;\n+pub use std::error::Error;",
        "path": "src/error.rs",
        "position": 8,
        "original_position": 8,
        "commit_id": "5518ed8feb0571f0f9e2baed785e630ffc1ea463",
        "original_commit_id": "5518ed8feb0571f0f9e2baed785e630ffc1ea463",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, feel free to make a PR",
        "created_at": "2017-02-08T19:18:29Z",
        "updated_at": "2017-02-08T19:18:29Z",
        "html_url": "https://github.com/iron/iron/pull/515#discussion_r100146394",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/515",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/100146394"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/515#discussion_r100146394"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/515"
            }
        },
        "in_reply_to_id": 100145956
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/109306751",
        "pull_request_review_id": 30402259,
        "id": 109306751,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwOTMwNjc1MQ==",
        "diff_hunk": "@@ -71,107 +68,89 @@ impl<'a, 'b> Debug for Request<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> Request<'a, 'b> {\n+impl Request {\n     /// Create a request from an HttpRequest.\n     ///\n     /// This constructor consumes the HttpRequest.\n-    pub fn from_http(req: HttpRequest<'a, 'b>, local_addr: SocketAddr, protocol: &Protocol)\n-                     -> Result<Request<'a, 'b>, String> {\n-        let (addr, method, headers, uri, version, reader) = req.deconstruct();\n-\n-        let url = match uri {\n-            AbsoluteUri(ref url) => {\n-                match Url::from_generic_url(url.clone()) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(e)\n-                }\n-            },\n-\n-            AbsolutePath(ref path) => {\n-                let url_string = match (version, headers.get::<headers::Host>()) {\n-                    (_, Some(host)) => {\n-                        // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n-                        if let Some(port) = host.port {\n-                            format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, port, path)\n-                        } else {\n-                            format!(\"{}://{}{}\", protocol.name(), host.hostname, path)\n-                        }\n-                    },\n-                    (v, None) if v < HttpVersion::Http11 => {\n-                        // Attempt to use the local address? (host header is not required in HTTP/1.0).\n-                        match local_addr {\n-                            SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n-                            SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n-                        }\n-                    },\n-                    (_, None) => {\n-                        return Err(\"No host specified in request\".into())\n+    pub fn from_http(req: HttpRequest, local_addr: SocketAddr, protocol: &Protocol)\n+                     -> Result<Request, String> {\n+        let addr = req.remote_addr().cloned();\n+        let (method, uri, version, headers, body) = req.deconstruct();\n+        let url = {\n+            let path = uri.path();\n+            let url_string = match (version, headers.get::<headers::Host>()) {\n+                (_, Some(host)) => {\n+                    // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n+                    if let Some(port) = host.port() {\n+                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname(), port, path)\n+                    } else {\n+                        format!(\"{}://{}{}\", protocol.name(), host.hostname(), path)\n                     }\n-                };\n-\n-                match Url::parse(&url_string) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+                },\n+                (v, None) if v < HttpVersion::Http11 => {\n+                    // Attempt to use the local address? (host header is not required in HTTP/1.0).\n+                    match local_addr {\n+                        SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n+                        SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n+                    }\n+                },\n+                (_, None) => {\n+                    return Err(\"No host specified in request\".into())\n                 }\n-            },\n-            _ => return Err(\"Unsupported request URI\".into())\n+            };\n+\n+            match Url::parse(&url_string) {\n+                Ok(url) => url,\n+                Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+            }\n         };\n \n         Ok(Request {\n             url: url,\n             remote_addr: addr,\n             local_addr: local_addr,\n             headers: headers,\n-            body: Body::new(reader),\n+            body: Some(body),\n             method: method,\n-            extensions: TypeMap::new(),\n+            extensions: TypeMap::custom(),\n             version: version,\n             _p: (),\n         })\n     }\n \n+    /// Get the contents of the body as a Vec<u8>\n+    ///\n+    /// This consumes the body future and turns it into Vec<u8>.  Note this should not be called\n+    /// from the main hyper thread, as it will potentially deadlock.\n+    pub fn get_body_contents(&mut self) -> &Vec<u8> {\n+        if let Some(reader) = self.body.take() {\n+            let body = reader.wait().fold(Vec::new(), |mut v, input| { v.extend_from_slice(&input.unwrap()); v });\n+            self.extensions.insert::<RequestBodyKey>(body);\n+        }\n+        self.extensions.get::<RequestBodyKey>().unwrap()",
        "path": "src/request/mod.rs",
        "position": 165,
        "original_position": 165,
        "commit_id": "8f6cabd4d48965fac552890147ced7ed84ce1902",
        "original_commit_id": "8f6cabd4d48965fac552890147ced7ed84ce1902",
        "user": {
            "login": "alsuren",
            "id": 254647,
            "node_id": "MDQ6VXNlcjI1NDY0Nw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/254647?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alsuren",
            "html_url": "https://github.com/alsuren",
            "followers_url": "https://api.github.com/users/alsuren/followers",
            "following_url": "https://api.github.com/users/alsuren/following{/other_user}",
            "gists_url": "https://api.github.com/users/alsuren/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alsuren/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alsuren/subscriptions",
            "organizations_url": "https://api.github.com/users/alsuren/orgs",
            "repos_url": "https://api.github.com/users/alsuren/repos",
            "events_url": "https://api.github.com/users/alsuren/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alsuren/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm only just starting to get the hang of async rust, but I suspect that this will eventually want to be refactored into an async version (which stores a shared future [1] in self.extensions and returns a clone of it), and a sync version that calls the async function and waits on its result.\r\n\r\n[1] http://alexcrichton.com/futures-rs/futures/future/trait.Future.html#method.shared",
        "created_at": "2017-04-02T11:50:15Z",
        "updated_at": "2017-04-02T11:50:16Z",
        "html_url": "https://github.com/iron/iron/pull/527#discussion_r109306751",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/527",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/109306751"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/527#discussion_r109306751"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/527"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/110827007",
        "pull_request_review_id": 32025535,
        "id": 110827007,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDgyNzAwNw==",
        "diff_hunk": "@@ -137,6 +138,13 @@ impl AsMut<url::Url> for Url {\n     fn as_mut(&mut self) -> &mut url::Url { &mut self.generic_url }\n }\n \n+impl FromStr for Url {\n+    type Err = String;\n+    #[inline]\n+    fn from_str(input: &str) -> Result<Url, Self::Err> {\n+        Ok(Url::parse(input).unwrap())",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "b838eec0981f1fcba8dba061bfdc0216f729007d",
        "original_commit_id": "a2fbbc3a5e4d4f88acb19f9eb239a0f8f48cd86c",
        "user": {
            "login": "Hoverbear",
            "id": 130903,
            "node_id": "MDQ6VXNlcjEzMDkwMw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/130903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Hoverbear",
            "html_url": "https://github.com/Hoverbear",
            "followers_url": "https://api.github.com/users/Hoverbear/followers",
            "following_url": "https://api.github.com/users/Hoverbear/following{/other_user}",
            "gists_url": "https://api.github.com/users/Hoverbear/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Hoverbear/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Hoverbear/subscriptions",
            "organizations_url": "https://api.github.com/users/Hoverbear/orgs",
            "repos_url": "https://api.github.com/users/Hoverbear/repos",
            "events_url": "https://api.github.com/users/Hoverbear/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Hoverbear/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please don't use `unwrap()` here.",
        "created_at": "2017-04-11T06:59:56Z",
        "updated_at": "2017-04-11T12:37:29Z",
        "html_url": "https://github.com/iron/iron/pull/530#discussion_r110827007",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/530",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/110827007"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/530#discussion_r110827007"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/530"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/110890839",
        "pull_request_review_id": 32093600,
        "id": 110890839,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDg5MDgzOQ==",
        "diff_hunk": "@@ -137,6 +138,13 @@ impl AsMut<url::Url> for Url {\n     fn as_mut(&mut self) -> &mut url::Url { &mut self.generic_url }\n }\n \n+impl FromStr for Url {\n+    type Err = String;\n+    #[inline]\n+    fn from_str(input: &str) -> Result<Url, Self::Err> {\n+        Ok(Url::parse(input).unwrap())",
        "path": "src/request/url.rs",
        "position": null,
        "original_position": 16,
        "commit_id": "b838eec0981f1fcba8dba061bfdc0216f729007d",
        "original_commit_id": "a2fbbc3a5e4d4f88acb19f9eb239a0f8f48cd86c",
        "user": {
            "login": "dorfsmay",
            "id": 3446051,
            "node_id": "MDQ6VXNlcjM0NDYwNTE=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/3446051?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dorfsmay",
            "html_url": "https://github.com/dorfsmay",
            "followers_url": "https://api.github.com/users/dorfsmay/followers",
            "following_url": "https://api.github.com/users/dorfsmay/following{/other_user}",
            "gists_url": "https://api.github.com/users/dorfsmay/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dorfsmay/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dorfsmay/subscriptions",
            "organizations_url": "https://api.github.com/users/dorfsmay/orgs",
            "repos_url": "https://api.github.com/users/dorfsmay/repos",
            "events_url": "https://api.github.com/users/dorfsmay/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dorfsmay/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ooops! Removed it. Thanks.",
        "created_at": "2017-04-11T12:40:27Z",
        "updated_at": "2017-04-11T12:40:27Z",
        "html_url": "https://github.com/iron/iron/pull/530#discussion_r110890839",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/530",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/110890839"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/530#discussion_r110890839"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/530"
            }
        },
        "in_reply_to_id": 110827007
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/111740962",
        "pull_request_review_id": 33002434,
        "id": 111740962,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTc0MDk2Mg==",
        "diff_hunk": "@@ -26,30 +102,42 @@\n //! * The cause of the error\n //! * The result (what to do about) the error.\n //!\n-//! The cause of the error is represented simply by the error itself, and the result\n-//! of the error, representing the action to take in response to the error, is a complete\n-//! Response, which will be sent at the end of the error flow.\n+//! The cause of the error is represented simply by the error itself, and the\n+//! result of the error, representing the action to take in response to the\n+//! error, is a complete Response, which will be sent at the end of the error\n+//! flow.\n //!\n-//! When an error is thrown in Iron by any middleware or handler returning an `Err`\n-//! variant with an `IronError`, the flow of the Request switches to the error flow,\n-//! which proceeds to just call the `catch` method of middleware and sidesteps the\n-//! `Handler` entirely, since there is already a Response in the error.\n+//! When an error is thrown in Iron by any middleware or handler returning an\n+//! [`Err`] variant with an [`IronError`], the flow of the [`Request`] switches\n+//! to the error flow, which proceeds to just call the `catch` method of\n+//! middleware and sidesteps the [`Handler`] entirely, since there is already a\n+//! [`Response`] in the error.\n //!\n-//! A Request can exit the error flow by returning an Ok from any of the catch methods.\n-//! This resumes the flow at the middleware immediately following the middleware which\n-//! handled the error. It is impossible to \"go back\" to an earlier middleware that was\n-//! skipped.\n+//! A [`Request`] can exit the error flow by returning an Ok from any of the\n+//! catch methods. This resumes the flow at the middleware immediately following\n+//! the middleware which handled the error. It is impossible to \"go back\" to an\n+//! earlier middleware that was skipped.\n //!\n-//! Generally speaking, returning a 5XX error code means that the error flow should be\n-//! entered by raising an explicit error. Dealing with 4XX errors is trickier, since\n-//! the server may not want to recognize an error that is entirely the clients fault;\n-//! handling of 4XX error codes is up to to each application and middleware author.\n+//! Generally speaking, returning a 5XX error code means that the error flow\n+//! should be entered by raising an explicit error. Dealing with 4XX errors is\n+//! trickier, since the server may not want to recognize an error that is\n+//! entirely the clients fault; handling of 4XX error codes is up to to each\n+//! application and middleware author.\n //!\n-//! Middleware authors should be cognizant that their middleware may be skipped during\n-//! the error flow. Anything that *must* be done to each Request or Response should\n-//! be run during both the normal and error flow by implementing the `catch` method to\n-//! also do the necessary action.\n+//! Middleware authors should be cognizant that their middleware may be skipped\n+//! during the error flow. Anything that *must* be done to each [`Request`] or\n+//! [`Response`] should be run during both the normal and error flow by\n+//! implementing the `catch` method to also do the necessary action.\n //!\n+//! [`Handler`]: trait.Handler.html",
        "path": "src/middleware/mod.rs",
        "position": null,
        "original_position": 148,
        "commit_id": "efc01334c47bb8e7908e6ae98ef0d82864a17063",
        "original_commit_id": "a520f8e9a78473d9a8b1e554f4e50389ae6414bc",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Unsure about those kind of links. It might be better to just use normal codeblocks and wait until rustdoc has a proper way to reference types and traits.",
        "created_at": "2017-04-17T13:24:41Z",
        "updated_at": "2017-04-17T23:36:41Z",
        "html_url": "https://github.com/iron/iron/pull/539#discussion_r111740962",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/539",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/111740962"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/539#discussion_r111740962"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/539"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115908578",
        "pull_request_review_id": 37487067,
        "id": 115908578,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTkwODU3OA==",
        "diff_hunk": "@@ -195,3 +192,26 @@ impl Modifier<Response> for RedirectRaw {\n         res.headers.set(headers::Location(path));\n     }\n }\n+\n+fn mime_for_path(path: &Path) -> Mime {\n+    guess_mime_type_opt(path)\n+        .unwrap_or_else(|| Mime(TopLevel::Text, SubLevel::Plain, vec![]))",
        "path": "src/modifiers.rs",
        "position": 37,
        "original_position": 37,
        "commit_id": "eab4bd6eb8458d828e2a8e183e59cfab4a1cefce",
        "original_commit_id": "eab4bd6eb8458d828e2a8e183e59cfab4a1cefce",
        "user": {
            "login": "robinst",
            "id": 16778,
            "node_id": "MDQ6VXNlcjE2Nzc4",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16778?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robinst",
            "html_url": "https://github.com/robinst",
            "followers_url": "https://api.github.com/users/robinst/followers",
            "following_url": "https://api.github.com/users/robinst/following{/other_user}",
            "gists_url": "https://api.github.com/users/robinst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robinst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robinst/subscriptions",
            "organizations_url": "https://api.github.com/users/robinst/orgs",
            "repos_url": "https://api.github.com/users/robinst/repos",
            "events_url": "https://api.github.com/users/robinst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robinst/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I kept the fallback the same as before: https://github.com/conduit-rust/mime-types/blob/master/src/lib.rs#L48\r\n\r\nmime_guess would fall back to `application/octet-stream` instead, which might be the better default. But not sure if you wanna change that in Iron.",
        "created_at": "2017-05-11T05:44:08Z",
        "updated_at": "2017-05-11T05:44:08Z",
        "html_url": "https://github.com/iron/iron/pull/544#discussion_r115908578",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/544",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115908578"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/544#discussion_r115908578"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/544"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/101942143",
        "pull_request_review_id": 22682466,
        "id": 101942143,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk0MjE0Mw==",
        "diff_hunk": "@@ -43,7 +42,7 @@ pub struct Request<'a, 'b: 'a> {\n     pub headers: Headers,\n \n     /// The request body as a reader.\n-    pub body: Body<'a, 'b>,\n+    pub body: Cursor<Vec<u8>>,",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 48,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3299f332f453aeb72d26a1322a84e4e7a2e2534a",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This seems a bit scary - we'll want to be able to handle streaming request bodies.",
        "created_at": "2017-02-20T03:11:33Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r101942143",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/101942143"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r101942143"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/101953716",
        "pull_request_review_id": 22694254,
        "id": 101953716,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMTk1MzcxNg==",
        "diff_hunk": "@@ -43,7 +42,7 @@ pub struct Request<'a, 'b: 'a> {\n     pub headers: Headers,\n \n     /// The request body as a reader.\n-    pub body: Body<'a, 'b>,\n+    pub body: Cursor<Vec<u8>>,",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 48,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3299f332f453aeb72d26a1322a84e4e7a2e2534a",
        "user": {
            "login": "MJDSys",
            "id": 2875429,
            "node_id": "MDQ6VXNlcjI4NzU0Mjk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2875429?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MJDSys",
            "html_url": "https://github.com/MJDSys",
            "followers_url": "https://api.github.com/users/MJDSys/followers",
            "following_url": "https://api.github.com/users/MJDSys/following{/other_user}",
            "gists_url": "https://api.github.com/users/MJDSys/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MJDSys/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MJDSys/subscriptions",
            "organizations_url": "https://api.github.com/users/MJDSys/orgs",
            "repos_url": "https://api.github.com/users/MJDSys/repos",
            "events_url": "https://api.github.com/users/MJDSys/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MJDSys/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Definitely!  I'm thinking that can just store a future for the body content, either using the hyper Chunk or streaming out the bytes or some such directly.\r\n\r\nThat was just the easiest way to make it work/compile now.  I can see about making it nicer for this PR if you wish, or handle it later.  This was just very much geared to be a base to start on :)",
        "created_at": "2017-02-20T06:22:59Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r101953716",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/101953716"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r101953716"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 101942143
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/102542404",
        "pull_request_review_id": 23301510,
        "id": 102542404,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjU0MjQwNA==",
        "diff_hunk": "@@ -43,7 +42,7 @@ pub struct Request<'a, 'b: 'a> {\n     pub headers: Headers,\n \n     /// The request body as a reader.\n-    pub body: Body<'a, 'b>,\n+    pub body: Cursor<Vec<u8>>,",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 48,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3299f332f453aeb72d26a1322a84e4e7a2e2534a",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@MJDSys it is up to you if you want to continue this PR or leave it at that. No doubt it's a very useful start either way!",
        "created_at": "2017-02-22T18:54:31Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r102542404",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/102542404"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r102542404"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 101942143
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/102543385",
        "pull_request_review_id": 23302473,
        "id": 102543385,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjU0MzM4NQ==",
        "diff_hunk": "@@ -43,7 +42,7 @@ pub struct Request<'a, 'b: 'a> {\n     pub headers: Headers,\n \n     /// The request body as a reader.\n-    pub body: Body<'a, 'b>,\n+    pub body: Cursor<Vec<u8>>,",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 48,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3299f332f453aeb72d26a1322a84e4e7a2e2534a",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The hyper client's response interface might be a good thing to look at - I think it's basically a channel of byte buffers?",
        "created_at": "2017-02-22T18:58:30Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r102543385",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/102543385"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r102543385"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 101942143
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/103895365",
        "pull_request_review_id": 24699400,
        "id": 103895365,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzg5NTM2NQ==",
        "diff_hunk": "@@ -111,89 +121,138 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::https(), core, handle);",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 47,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "e137e67e4092eab4450d0b62c97ec61a76c04b94",
        "user": {
            "login": "untitaker",
            "id": 837573,
            "node_id": "MDQ6VXNlcjgzNzU3Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/untitaker",
            "html_url": "https://github.com/untitaker",
            "followers_url": "https://api.github.com/users/untitaker/followers",
            "following_url": "https://api.github.com/users/untitaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions",
            "organizations_url": "https://api.github.com/users/untitaker/orgs",
            "repos_url": "https://api.github.com/users/untitaker/repos",
            "events_url": "https://api.github.com/users/untitaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/untitaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "you probably meant `Protocol::http`here ",
        "created_at": "2017-03-02T10:42:06Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r103895365",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/103895365"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r103895365"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/108028216",
        "pull_request_review_id": 29040017,
        "id": 108028216,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODAyODIxNg==",
        "diff_hunk": "@@ -71,73 +69,72 @@ impl<'a, 'b> Debug for Request<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> Request<'a, 'b> {\n+impl Request {\n     /// Create a request from an HttpRequest.\n     ///\n     /// This constructor consumes the HttpRequest.\n-    pub fn from_http(req: HttpRequest<'a, 'b>, local_addr: SocketAddr, protocol: &Protocol)\n-                     -> Result<Request<'a, 'b>, String> {\n-        let (addr, method, headers, uri, version, reader) = req.deconstruct();\n-\n-        let url = match uri {\n-            AbsoluteUri(ref url) => {\n-                match Url::from_generic_url(url.clone()) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(e)\n-                }\n-            },\n-\n-            AbsolutePath(ref path) => {\n-                let url_string = match (version, headers.get::<headers::Host>()) {\n-                    (_, Some(host)) => {\n-                        // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n-                        if let Some(port) = host.port {\n-                            format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, port, path)\n-                        } else {\n-                            format!(\"{}://{}{}\", protocol.name(), host.hostname, path)\n-                        }\n-                    },\n-                    (v, None) if v < HttpVersion::Http11 => {\n-                        // Attempt to use the local address? (host header is not required in HTTP/1.0).\n-                        match local_addr {\n-                            SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n-                            SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n-                        }\n-                    },\n-                    (_, None) => {\n-                        return Err(\"No host specified in request\".into())\n+    pub fn from_http(req: HttpRequest, local_addr: SocketAddr, protocol: &Protocol)\n+                     -> Result<Request, String> {\n+        let addr = req.remote_addr().cloned();\n+        let (method, uri, version, headers, body) = req.deconstruct();\n+        let url = {\n+            let path = uri.path();\n+            let url_string = match (version, headers.get::<headers::Host>()) {\n+                (_, Some(host)) => {\n+                    // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n+                    if let Some(port) = host.port() {\n+                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname(), port, path)\n+                    } else {\n+                        format!(\"{}://{}{}\", protocol.name(), host.hostname(), path)\n                     }\n-                };\n-\n-                match Url::parse(&url_string) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+                },\n+                (v, None) if v < HttpVersion::Http11 => {\n+                    // Attempt to use the local address? (host header is not required in HTTP/1.0).\n+                    match local_addr {\n+                        SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n+                        SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n+                    }\n+                },\n+                (_, None) => {\n+                    return Err(\"No host specified in request\".into())\n                 }\n-            },\n-            _ => return Err(\"Unsupported request URI\".into())\n+            };\n+\n+            match Url::parse(&url_string) {\n+                Ok(url) => url,\n+                Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+            }\n         };\n \n         Ok(Request {\n             url: url,\n             remote_addr: addr,\n             local_addr: local_addr,\n             headers: headers,\n-            body: Body::new(reader),\n+            body: Some(body),\n             method: method,\n             extensions: TypeMap::new(),\n             version: version,\n             _p: (),\n         })\n     }\n \n+    /// Get the contents of the body as a Vec<u8>\n+    ///\n+    /// This consumes the body future and turns it into Vec<u8>.  Note this should not be called\n+    /// from the main hyper thread, as it will potentially deadlock.\n+    pub fn get_body_contents(&mut self) -> Option<Vec<u8>> {",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 158,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3564b1cdc7bf2c5525b49d74ed9597fb59abb2a5",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think we should just have this function as a helper for now; I don't think we want to dedicate to this interface, since it irrevocably takes the body it's likely not what you want much of the time.",
        "created_at": "2017-03-25T04:56:30Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r108028216",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/108028216"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r108028216"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/108028550",
        "pull_request_review_id": 29040308,
        "id": 108028550,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODAyODU1MA==",
        "diff_hunk": "@@ -71,73 +69,72 @@ impl<'a, 'b> Debug for Request<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> Request<'a, 'b> {\n+impl Request {\n     /// Create a request from an HttpRequest.\n     ///\n     /// This constructor consumes the HttpRequest.\n-    pub fn from_http(req: HttpRequest<'a, 'b>, local_addr: SocketAddr, protocol: &Protocol)\n-                     -> Result<Request<'a, 'b>, String> {\n-        let (addr, method, headers, uri, version, reader) = req.deconstruct();\n-\n-        let url = match uri {\n-            AbsoluteUri(ref url) => {\n-                match Url::from_generic_url(url.clone()) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(e)\n-                }\n-            },\n-\n-            AbsolutePath(ref path) => {\n-                let url_string = match (version, headers.get::<headers::Host>()) {\n-                    (_, Some(host)) => {\n-                        // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n-                        if let Some(port) = host.port {\n-                            format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, port, path)\n-                        } else {\n-                            format!(\"{}://{}{}\", protocol.name(), host.hostname, path)\n-                        }\n-                    },\n-                    (v, None) if v < HttpVersion::Http11 => {\n-                        // Attempt to use the local address? (host header is not required in HTTP/1.0).\n-                        match local_addr {\n-                            SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n-                            SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n-                        }\n-                    },\n-                    (_, None) => {\n-                        return Err(\"No host specified in request\".into())\n+    pub fn from_http(req: HttpRequest, local_addr: SocketAddr, protocol: &Protocol)\n+                     -> Result<Request, String> {\n+        let addr = req.remote_addr().cloned();\n+        let (method, uri, version, headers, body) = req.deconstruct();\n+        let url = {\n+            let path = uri.path();\n+            let url_string = match (version, headers.get::<headers::Host>()) {\n+                (_, Some(host)) => {\n+                    // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n+                    if let Some(port) = host.port() {\n+                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname(), port, path)\n+                    } else {\n+                        format!(\"{}://{}{}\", protocol.name(), host.hostname(), path)\n                     }\n-                };\n-\n-                match Url::parse(&url_string) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+                },\n+                (v, None) if v < HttpVersion::Http11 => {\n+                    // Attempt to use the local address? (host header is not required in HTTP/1.0).\n+                    match local_addr {\n+                        SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n+                        SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n+                    }\n+                },\n+                (_, None) => {\n+                    return Err(\"No host specified in request\".into())\n                 }\n-            },\n-            _ => return Err(\"Unsupported request URI\".into())\n+            };\n+\n+            match Url::parse(&url_string) {\n+                Ok(url) => url,\n+                Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+            }\n         };\n \n         Ok(Request {\n             url: url,\n             remote_addr: addr,\n             local_addr: local_addr,\n             headers: headers,\n-            body: Body::new(reader),\n+            body: Some(body),\n             method: method,\n             extensions: TypeMap::new(),\n             version: version,\n             _p: (),\n         })\n     }\n \n+    /// Get the contents of the body as a Vec<u8>\n+    ///\n+    /// This consumes the body future and turns it into Vec<u8>.  Note this should not be called\n+    /// from the main hyper thread, as it will potentially deadlock.\n+    pub fn get_body_contents(&mut self) -> Option<Vec<u8>> {",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 158,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3564b1cdc7bf2c5525b49d74ed9597fb59abb2a5",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The best way to read the body would be similar to how it's done in extensions today, by reading into a `Vec`, storing the `Vec` in `extensions`, then returning a reference to it. You can still provide a separate method to \"take\" the `Vec` from the `extensions` (edit: or just give a method returning the entry from `extensions`), but you end up with friendlier `&self -> &[u8]` and `&mut self -> &mut [u8]` signatures.",
        "created_at": "2017-03-25T05:17:36Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r108028550",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/108028550"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r108028550"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 108028216
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/108029260",
        "pull_request_review_id": 29040956,
        "id": 108029260,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODAyOTI2MA==",
        "diff_hunk": "@@ -71,73 +69,72 @@ impl<'a, 'b> Debug for Request<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> Request<'a, 'b> {\n+impl Request {\n     /// Create a request from an HttpRequest.\n     ///\n     /// This constructor consumes the HttpRequest.\n-    pub fn from_http(req: HttpRequest<'a, 'b>, local_addr: SocketAddr, protocol: &Protocol)\n-                     -> Result<Request<'a, 'b>, String> {\n-        let (addr, method, headers, uri, version, reader) = req.deconstruct();\n-\n-        let url = match uri {\n-            AbsoluteUri(ref url) => {\n-                match Url::from_generic_url(url.clone()) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(e)\n-                }\n-            },\n-\n-            AbsolutePath(ref path) => {\n-                let url_string = match (version, headers.get::<headers::Host>()) {\n-                    (_, Some(host)) => {\n-                        // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n-                        if let Some(port) = host.port {\n-                            format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, port, path)\n-                        } else {\n-                            format!(\"{}://{}{}\", protocol.name(), host.hostname, path)\n-                        }\n-                    },\n-                    (v, None) if v < HttpVersion::Http11 => {\n-                        // Attempt to use the local address? (host header is not required in HTTP/1.0).\n-                        match local_addr {\n-                            SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n-                            SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n-                        }\n-                    },\n-                    (_, None) => {\n-                        return Err(\"No host specified in request\".into())\n+    pub fn from_http(req: HttpRequest, local_addr: SocketAddr, protocol: &Protocol)\n+                     -> Result<Request, String> {\n+        let addr = req.remote_addr().cloned();\n+        let (method, uri, version, headers, body) = req.deconstruct();\n+        let url = {\n+            let path = uri.path();\n+            let url_string = match (version, headers.get::<headers::Host>()) {\n+                (_, Some(host)) => {\n+                    // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n+                    if let Some(port) = host.port() {\n+                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname(), port, path)\n+                    } else {\n+                        format!(\"{}://{}{}\", protocol.name(), host.hostname(), path)\n                     }\n-                };\n-\n-                match Url::parse(&url_string) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+                },\n+                (v, None) if v < HttpVersion::Http11 => {\n+                    // Attempt to use the local address? (host header is not required in HTTP/1.0).\n+                    match local_addr {\n+                        SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n+                        SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n+                    }\n+                },\n+                (_, None) => {\n+                    return Err(\"No host specified in request\".into())\n                 }\n-            },\n-            _ => return Err(\"Unsupported request URI\".into())\n+            };\n+\n+            match Url::parse(&url_string) {\n+                Ok(url) => url,\n+                Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+            }\n         };\n \n         Ok(Request {\n             url: url,\n             remote_addr: addr,\n             local_addr: local_addr,\n             headers: headers,\n-            body: Body::new(reader),\n+            body: Some(body),\n             method: method,\n             extensions: TypeMap::new(),\n             version: version,\n             _p: (),\n         })\n     }\n \n+    /// Get the contents of the body as a Vec<u8>\n+    ///\n+    /// This consumes the body future and turns it into Vec<u8>.  Note this should not be called\n+    /// from the main hyper thread, as it will potentially deadlock.\n+    pub fn get_body_contents(&mut self) -> Option<Vec<u8>> {",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 158,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3564b1cdc7bf2c5525b49d74ed9597fb59abb2a5",
        "user": {
            "login": "MJDSys",
            "id": 2875429,
            "node_id": "MDQ6VXNlcjI4NzU0Mjk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2875429?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MJDSys",
            "html_url": "https://github.com/MJDSys",
            "followers_url": "https://api.github.com/users/MJDSys/followers",
            "following_url": "https://api.github.com/users/MJDSys/following{/other_user}",
            "gists_url": "https://api.github.com/users/MJDSys/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MJDSys/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MJDSys/subscriptions",
            "organizations_url": "https://api.github.com/users/MJDSys/orgs",
            "repos_url": "https://api.github.com/users/MJDSys/repos",
            "events_url": "https://api.github.com/users/MJDSys/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MJDSys/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "100% I wasn't happy with this api.  I was just trying to expose the body contents somehow, and had figured the details would change with the async api (especially since the async side wouldn't grab all the bytes before exposing the body).\r\n\r\nFor now, how about a function that reads the body into a Vec, stores it into extensions, and returns that reference.  Afterwards the function can continue returning that reference, so it isn't taken.  Does that sound good enough for now?  And Is get_body_contents a good enough name?",
        "created_at": "2017-03-25T06:00:27Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r108029260",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/108029260"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r108029260"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 108028216
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/108030601",
        "pull_request_review_id": 29042284,
        "id": 108030601,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODAzMDYwMQ==",
        "diff_hunk": "@@ -71,73 +69,72 @@ impl<'a, 'b> Debug for Request<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> Request<'a, 'b> {\n+impl Request {\n     /// Create a request from an HttpRequest.\n     ///\n     /// This constructor consumes the HttpRequest.\n-    pub fn from_http(req: HttpRequest<'a, 'b>, local_addr: SocketAddr, protocol: &Protocol)\n-                     -> Result<Request<'a, 'b>, String> {\n-        let (addr, method, headers, uri, version, reader) = req.deconstruct();\n-\n-        let url = match uri {\n-            AbsoluteUri(ref url) => {\n-                match Url::from_generic_url(url.clone()) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(e)\n-                }\n-            },\n-\n-            AbsolutePath(ref path) => {\n-                let url_string = match (version, headers.get::<headers::Host>()) {\n-                    (_, Some(host)) => {\n-                        // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n-                        if let Some(port) = host.port {\n-                            format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, port, path)\n-                        } else {\n-                            format!(\"{}://{}{}\", protocol.name(), host.hostname, path)\n-                        }\n-                    },\n-                    (v, None) if v < HttpVersion::Http11 => {\n-                        // Attempt to use the local address? (host header is not required in HTTP/1.0).\n-                        match local_addr {\n-                            SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n-                            SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n-                        }\n-                    },\n-                    (_, None) => {\n-                        return Err(\"No host specified in request\".into())\n+    pub fn from_http(req: HttpRequest, local_addr: SocketAddr, protocol: &Protocol)\n+                     -> Result<Request, String> {\n+        let addr = req.remote_addr().cloned();\n+        let (method, uri, version, headers, body) = req.deconstruct();\n+        let url = {\n+            let path = uri.path();\n+            let url_string = match (version, headers.get::<headers::Host>()) {\n+                (_, Some(host)) => {\n+                    // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n+                    if let Some(port) = host.port() {\n+                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname(), port, path)\n+                    } else {\n+                        format!(\"{}://{}{}\", protocol.name(), host.hostname(), path)\n                     }\n-                };\n-\n-                match Url::parse(&url_string) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+                },\n+                (v, None) if v < HttpVersion::Http11 => {\n+                    // Attempt to use the local address? (host header is not required in HTTP/1.0).\n+                    match local_addr {\n+                        SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n+                        SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n+                    }\n+                },\n+                (_, None) => {\n+                    return Err(\"No host specified in request\".into())\n                 }\n-            },\n-            _ => return Err(\"Unsupported request URI\".into())\n+            };\n+\n+            match Url::parse(&url_string) {\n+                Ok(url) => url,\n+                Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+            }\n         };\n \n         Ok(Request {\n             url: url,\n             remote_addr: addr,\n             local_addr: local_addr,\n             headers: headers,\n-            body: Body::new(reader),\n+            body: Some(body),\n             method: method,\n             extensions: TypeMap::new(),\n             version: version,\n             _p: (),\n         })\n     }\n \n+    /// Get the contents of the body as a Vec<u8>\n+    ///\n+    /// This consumes the body future and turns it into Vec<u8>.  Note this should not be called\n+    /// from the main hyper thread, as it will potentially deadlock.\n+    pub fn get_body_contents(&mut self) -> Option<Vec<u8>> {",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 158,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3564b1cdc7bf2c5525b49d74ed9597fb59abb2a5",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That sounds great. I don't love the name, but I can't really think of anything better right now. `get_body` is easy to confuse with `.body`, and anything else is as long. Does anyone else have ideas? I'll keep thinking about it.\r\n\r\nThere is one further issue with this API: it encourages reading an unlimited amount of data over the network, which is basically never what you want to do. The body-parser crate gets around this by having a [default maximum length](https://github.com/iron/body-parser/blob/master/src/lib.rs#L63) and [accepting further configuration](https://github.com/iron/body-parser/blob/master/src/lib.rs#L49) via `extensions`. We could do that here instead, but the API is getting a little complex to go in core.",
        "created_at": "2017-03-25T07:38:57Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r108030601",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/108030601"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r108030601"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 108028216
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/108073063",
        "pull_request_review_id": 29081139,
        "id": 108073063,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA3MzA2Mw==",
        "diff_hunk": "@@ -71,73 +69,72 @@ impl<'a, 'b> Debug for Request<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> Request<'a, 'b> {\n+impl Request {\n     /// Create a request from an HttpRequest.\n     ///\n     /// This constructor consumes the HttpRequest.\n-    pub fn from_http(req: HttpRequest<'a, 'b>, local_addr: SocketAddr, protocol: &Protocol)\n-                     -> Result<Request<'a, 'b>, String> {\n-        let (addr, method, headers, uri, version, reader) = req.deconstruct();\n-\n-        let url = match uri {\n-            AbsoluteUri(ref url) => {\n-                match Url::from_generic_url(url.clone()) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(e)\n-                }\n-            },\n-\n-            AbsolutePath(ref path) => {\n-                let url_string = match (version, headers.get::<headers::Host>()) {\n-                    (_, Some(host)) => {\n-                        // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n-                        if let Some(port) = host.port {\n-                            format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, port, path)\n-                        } else {\n-                            format!(\"{}://{}{}\", protocol.name(), host.hostname, path)\n-                        }\n-                    },\n-                    (v, None) if v < HttpVersion::Http11 => {\n-                        // Attempt to use the local address? (host header is not required in HTTP/1.0).\n-                        match local_addr {\n-                            SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n-                            SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n-                        }\n-                    },\n-                    (_, None) => {\n-                        return Err(\"No host specified in request\".into())\n+    pub fn from_http(req: HttpRequest, local_addr: SocketAddr, protocol: &Protocol)\n+                     -> Result<Request, String> {\n+        let addr = req.remote_addr().cloned();\n+        let (method, uri, version, headers, body) = req.deconstruct();\n+        let url = {\n+            let path = uri.path();\n+            let url_string = match (version, headers.get::<headers::Host>()) {\n+                (_, Some(host)) => {\n+                    // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n+                    if let Some(port) = host.port() {\n+                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname(), port, path)\n+                    } else {\n+                        format!(\"{}://{}{}\", protocol.name(), host.hostname(), path)\n                     }\n-                };\n-\n-                match Url::parse(&url_string) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+                },\n+                (v, None) if v < HttpVersion::Http11 => {\n+                    // Attempt to use the local address? (host header is not required in HTTP/1.0).\n+                    match local_addr {\n+                        SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n+                        SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n+                    }\n+                },\n+                (_, None) => {\n+                    return Err(\"No host specified in request\".into())\n                 }\n-            },\n-            _ => return Err(\"Unsupported request URI\".into())\n+            };\n+\n+            match Url::parse(&url_string) {\n+                Ok(url) => url,\n+                Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+            }\n         };\n \n         Ok(Request {\n             url: url,\n             remote_addr: addr,\n             local_addr: local_addr,\n             headers: headers,\n-            body: Body::new(reader),\n+            body: Some(body),\n             method: method,\n             extensions: TypeMap::new(),\n             version: version,\n             _p: (),\n         })\n     }\n \n+    /// Get the contents of the body as a Vec<u8>\n+    ///\n+    /// This consumes the body future and turns it into Vec<u8>.  Note this should not be called\n+    /// from the main hyper thread, as it will potentially deadlock.\n+    pub fn get_body_contents(&mut self) -> Option<Vec<u8>> {",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 158,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3564b1cdc7bf2c5525b49d74ed9597fb59abb2a5",
        "user": {
            "login": "MJDSys",
            "id": 2875429,
            "node_id": "MDQ6VXNlcjI4NzU0Mjk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2875429?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MJDSys",
            "html_url": "https://github.com/MJDSys",
            "followers_url": "https://api.github.com/users/MJDSys/followers",
            "following_url": "https://api.github.com/users/MJDSys/following{/other_user}",
            "gists_url": "https://api.github.com/users/MJDSys/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MJDSys/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MJDSys/subscriptions",
            "organizations_url": "https://api.github.com/users/MJDSys/orgs",
            "repos_url": "https://api.github.com/users/MJDSys/repos",
            "events_url": "https://api.github.com/users/MJDSys/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MJDSys/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I've pushed an update that reads the body into an extension.  I didn't expose the key, as I didn't figure it was worth it.\r\n\r\nAssuming iron is going to move to an async handler, I'm not sure of the value of this function anyway.  Calling it from the context of a future on the reactor's thread could deadlock the server.  I made it originally to provide a similar API to the original Body class in Iron, and we could just delete it frankly.",
        "created_at": "2017-03-26T22:03:57Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r108073063",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/108073063"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r108073063"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 108028216
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/108079471",
        "pull_request_review_id": 29087593,
        "id": 108079471,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODA3OTQ3MQ==",
        "diff_hunk": "@@ -71,73 +69,72 @@ impl<'a, 'b> Debug for Request<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> Request<'a, 'b> {\n+impl Request {\n     /// Create a request from an HttpRequest.\n     ///\n     /// This constructor consumes the HttpRequest.\n-    pub fn from_http(req: HttpRequest<'a, 'b>, local_addr: SocketAddr, protocol: &Protocol)\n-                     -> Result<Request<'a, 'b>, String> {\n-        let (addr, method, headers, uri, version, reader) = req.deconstruct();\n-\n-        let url = match uri {\n-            AbsoluteUri(ref url) => {\n-                match Url::from_generic_url(url.clone()) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(e)\n-                }\n-            },\n-\n-            AbsolutePath(ref path) => {\n-                let url_string = match (version, headers.get::<headers::Host>()) {\n-                    (_, Some(host)) => {\n-                        // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n-                        if let Some(port) = host.port {\n-                            format!(\"{}://{}:{}{}\", protocol.name(), host.hostname, port, path)\n-                        } else {\n-                            format!(\"{}://{}{}\", protocol.name(), host.hostname, path)\n-                        }\n-                    },\n-                    (v, None) if v < HttpVersion::Http11 => {\n-                        // Attempt to use the local address? (host header is not required in HTTP/1.0).\n-                        match local_addr {\n-                            SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n-                            SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n-                        }\n-                    },\n-                    (_, None) => {\n-                        return Err(\"No host specified in request\".into())\n+    pub fn from_http(req: HttpRequest, local_addr: SocketAddr, protocol: &Protocol)\n+                     -> Result<Request, String> {\n+        let addr = req.remote_addr().cloned();\n+        let (method, uri, version, headers, body) = req.deconstruct();\n+        let url = {\n+            let path = uri.path();\n+            let url_string = match (version, headers.get::<headers::Host>()) {\n+                (_, Some(host)) => {\n+                    // Attempt to prepend the Host header (mandatory in HTTP/1.1)\n+                    if let Some(port) = host.port() {\n+                        format!(\"{}://{}:{}{}\", protocol.name(), host.hostname(), port, path)\n+                    } else {\n+                        format!(\"{}://{}{}\", protocol.name(), host.hostname(), path)\n                     }\n-                };\n-\n-                match Url::parse(&url_string) {\n-                    Ok(url) => url,\n-                    Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+                },\n+                (v, None) if v < HttpVersion::Http11 => {\n+                    // Attempt to use the local address? (host header is not required in HTTP/1.0).\n+                    match local_addr {\n+                        SocketAddr::V4(addr4) => format!(\"{}://{}:{}{}\", protocol.name(), addr4.ip(), local_addr.port(), path),\n+                        SocketAddr::V6(addr6) => format!(\"{}://[{}]:{}{}\", protocol.name(), addr6.ip(), local_addr.port(), path),\n+                    }\n+                },\n+                (_, None) => {\n+                    return Err(\"No host specified in request\".into())\n                 }\n-            },\n-            _ => return Err(\"Unsupported request URI\".into())\n+            };\n+\n+            match Url::parse(&url_string) {\n+                Ok(url) => url,\n+                Err(e) => return Err(format!(\"Couldn't parse requested URL: {}\", e))\n+            }\n         };\n \n         Ok(Request {\n             url: url,\n             remote_addr: addr,\n             local_addr: local_addr,\n             headers: headers,\n-            body: Body::new(reader),\n+            body: Some(body),\n             method: method,\n             extensions: TypeMap::new(),\n             version: version,\n             _p: (),\n         })\n     }\n \n+    /// Get the contents of the body as a Vec<u8>\n+    ///\n+    /// This consumes the body future and turns it into Vec<u8>.  Note this should not be called\n+    /// from the main hyper thread, as it will potentially deadlock.\n+    pub fn get_body_contents(&mut self) -> Option<Vec<u8>> {",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 158,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3564b1cdc7bf2c5525b49d74ed9597fb59abb2a5",
        "user": {
            "login": "reem",
            "id": 4745181,
            "node_id": "MDQ6VXNlcjQ3NDUxODE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4745181?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reem",
            "html_url": "https://github.com/reem",
            "followers_url": "https://api.github.com/users/reem/followers",
            "following_url": "https://api.github.com/users/reem/following{/other_user}",
            "gists_url": "https://api.github.com/users/reem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reem/subscriptions",
            "organizations_url": "https://api.github.com/users/reem/orgs",
            "repos_url": "https://api.github.com/users/reem/repos",
            "events_url": "https://api.github.com/users/reem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I considered just deleting it but it's such a common thing to ask for in examples and such... I think we should just go with this implementation for now - after all we are still pre 1.0 and can remove it if it proves to be a source of problems. ",
        "created_at": "2017-03-27T01:33:50Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r108079471",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/108079471"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r108079471"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 108028216
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115410832",
        "pull_request_review_id": 36944303,
        "id": 115410832,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTQxMDgzMg==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 74,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It seems very unfortunate to lock HTTPS support to native-tls.",
        "created_at": "2017-05-09T05:43:57Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115410832",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115410832"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115410832"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115410889",
        "pull_request_review_id": 36944365,
        "id": 115410889,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTQxMDg4OQ==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]\n+    pub fn https<A, Tls>(self, addr: A, tls: Tls) -> HttpResult<()>\n+        where A: ToSocketAddrs, Tls: TlsAcceptorExt + 'static\n     {\n-        HttpsListener::new(addr, ssl).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let listener_tcp = TcpListener::bind(&addr, &handle).unwrap();\n+\n+        let (tx, rx) = mpsc::channel(1);\n+\n+        let ssl_acceptor = listener_tcp.incoming().for_each(move |(sock, remote_addr)| {\n+            let tx = tx.clone();\n+            tls.accept_async(sock).map_err(|e| IoError::new(ErrorKind::Other, e)).and_then(move |sock| {\n+                future::ok((sock, remote_addr))\n+            }).then(|r| {\n+                tx.send(r).map_err(|e| IoError::new(ErrorKind::Other, e))\n+            }).and_then(|_| future::ok(()))\n+        }).then(|_| future::ok(()));\n+        handle.spawn(ssl_acceptor);\n+\n+        let listener = rx.then(|r| match r {\n+            Ok(real_r) => real_r,\n+            Err(e) => panic!(e),",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 100,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "panic?",
        "created_at": "2017-05-09T05:44:41Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115410889",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115410889"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115410889"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115411362",
        "pull_request_review_id": 36944882,
        "id": 115411362,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTQxMTM2Mg==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 74,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "MJDSys",
            "id": 2875429,
            "node_id": "MDQ6VXNlcjI4NzU0Mjk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2875429?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MJDSys",
            "html_url": "https://github.com/MJDSys",
            "followers_url": "https://api.github.com/users/MJDSys/followers",
            "following_url": "https://api.github.com/users/MJDSys/following{/other_user}",
            "gists_url": "https://api.github.com/users/MJDSys/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MJDSys/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MJDSys/subscriptions",
            "organizations_url": "https://api.github.com/users/MJDSys/orgs",
            "repos_url": "https://api.github.com/users/MJDSys/repos",
            "events_url": "https://api.github.com/users/MJDSys/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MJDSys/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This shouldn't lock us into native-tls, just tokio-tls.  This still uses the tokio-tls trait TlsAcceptorExt, which should be implementable by any TLS crate (see: https://tokio-rs.github.io/tokio-tls/tokio_tls/trait.TlsAcceptorExt.html ).\r\n\r\nIf the tokio-tls dependency is unwanted, I could make our own version of that trait.  I think that implementation can even make using something implementing TlsAcceptorExt work.\r\n\r\nUnfortunately, it does drag in a native-tls dependency to require tokio-tls.",
        "created_at": "2017-05-09T05:49:56Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115411362",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115411362"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115411362"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 115410832
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115411598",
        "pull_request_review_id": 36945143,
        "id": 115411598,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTQxMTU5OA==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 74,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How can anything else implement those traits? The methods on them return concrete types (`ConnectAsync` and `AcceptAsync`) which do not have public constructors AFAIKT.",
        "created_at": "2017-05-09T05:52:35Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115411598",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115411598"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115411598"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 115410832
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115411665",
        "pull_request_review_id": 36945217,
        "id": 115411665,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTQxMTY2NQ==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]\n+    pub fn https<A, Tls>(self, addr: A, tls: Tls) -> HttpResult<()>\n+        where A: ToSocketAddrs, Tls: TlsAcceptorExt + 'static\n     {\n-        HttpsListener::new(addr, ssl).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let listener_tcp = TcpListener::bind(&addr, &handle).unwrap();\n+\n+        let (tx, rx) = mpsc::channel(1);\n+\n+        let ssl_acceptor = listener_tcp.incoming().for_each(move |(sock, remote_addr)| {\n+            let tx = tx.clone();\n+            tls.accept_async(sock).map_err(|e| IoError::new(ErrorKind::Other, e)).and_then(move |sock| {\n+                future::ok((sock, remote_addr))\n+            }).then(|r| {\n+                tx.send(r).map_err(|e| IoError::new(ErrorKind::Other, e))\n+            }).and_then(|_| future::ok(()))\n+        }).then(|_| future::ok(()));\n+        handle.spawn(ssl_acceptor);\n+\n+        let listener = rx.then(|r| match r {\n+            Ok(real_r) => real_r,\n+            Err(e) => panic!(e),",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 100,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "MJDSys",
            "id": 2875429,
            "node_id": "MDQ6VXNlcjI4NzU0Mjk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2875429?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MJDSys",
            "html_url": "https://github.com/MJDSys",
            "followers_url": "https://api.github.com/users/MJDSys/followers",
            "following_url": "https://api.github.com/users/MJDSys/following{/other_user}",
            "gists_url": "https://api.github.com/users/MJDSys/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MJDSys/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MJDSys/subscriptions",
            "organizations_url": "https://api.github.com/users/MJDSys/orgs",
            "repos_url": "https://api.github.com/users/MJDSys/repos",
            "events_url": "https://api.github.com/users/MJDSys/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MJDSys/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I believe this operation can \"never\" fail, so I included a panic to signify this.  But I can't find any documentation specifically saying this, just that the error type of r is the unit type.  I'll dig into this more sometime this week to verify.",
        "created_at": "2017-05-09T05:53:27Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115411665",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115411665"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115411665"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 115410889
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115412005",
        "pull_request_review_id": 36945560,
        "id": 115412005,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTQxMjAwNQ==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 74,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "MJDSys",
            "id": 2875429,
            "node_id": "MDQ6VXNlcjI4NzU0Mjk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2875429?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MJDSys",
            "html_url": "https://github.com/MJDSys",
            "followers_url": "https://api.github.com/users/MJDSys/followers",
            "following_url": "https://api.github.com/users/MJDSys/following{/other_user}",
            "gists_url": "https://api.github.com/users/MJDSys/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MJDSys/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MJDSys/subscriptions",
            "organizations_url": "https://api.github.com/users/MJDSys/orgs",
            "repos_url": "https://api.github.com/users/MJDSys/repos",
            "events_url": "https://api.github.com/users/MJDSys/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MJDSys/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Indeed!  I saw that there was a trait and naively assumed it would be generic over all possible tls implementations.  Ugh.\r\n\r\nI agree limiting us to native-tls is unfortunate.  I'll change this to an iron specific trait for now, and implement it for tokio-tls.  Does that sound reasonable?",
        "created_at": "2017-05-09T05:57:11Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115412005",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115412005"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115412005"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 115410832
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115412097",
        "pull_request_review_id": 36945634,
        "id": 115412097,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTQxMjA5Nw==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 74,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure, though it seems like the trait should live in hyper-land so we don't need to redo all of the work in each Hyper consumer - @seanmonstar what's the state of TLS stuff in async Hyper?",
        "created_at": "2017-05-09T05:58:15Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115412097",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115412097"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115412097"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 115410832
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115421930",
        "pull_request_review_id": 36955552,
        "id": 115421930,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTQyMTkzMA==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 74,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "seanmonstar",
            "id": 51479,
            "node_id": "MDQ6VXNlcjUxNDc5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/51479?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seanmonstar",
            "html_url": "https://github.com/seanmonstar",
            "followers_url": "https://api.github.com/users/seanmonstar/followers",
            "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}",
            "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions",
            "organizations_url": "https://api.github.com/users/seanmonstar/orgs",
            "repos_url": "https://api.github.com/users/seanmonstar/repos",
            "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seanmonstar/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "For Servers, the idea is that `hyper::server::Http` is a `ServerProto`, and can be wrapped in others. So, it doesn't care where the bytes are coming through, you can pipe them in from anything. An example of doing this using tokio-tls is:\r\n\r\n```rust\r\nlet http = Http::new();\r\nlet tls = tokio_tls::proto::Server::new(http, native_tls_acceptor);\r\nlet tcp = tokio_proto::TcpServer::new(tls, addr);\r\n// ...\r\n```",
        "created_at": "2017-05-09T07:17:45Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115421930",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115421930"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115421930"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 115410832
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115539232",
        "pull_request_review_id": 37085829,
        "id": 115539232,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTUzOTIzMg==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]\n+    pub fn https<A, Tls>(self, addr: A, tls: Tls) -> HttpResult<()>\n+        where A: ToSocketAddrs, Tls: TlsAcceptorExt + 'static\n     {\n-        HttpsListener::new(addr, ssl).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let listener_tcp = TcpListener::bind(&addr, &handle).unwrap();\n+\n+        let (tx, rx) = mpsc::channel(1);\n+\n+        let ssl_acceptor = listener_tcp.incoming().for_each(move |(sock, remote_addr)| {\n+            let tx = tx.clone();\n+            tls.accept_async(sock).map_err(|e| IoError::new(ErrorKind::Other, e)).and_then(move |sock| {\n+                future::ok((sock, remote_addr))\n+            }).then(|r| {\n+                tx.send(r).map_err(|e| IoError::new(ErrorKind::Other, e))\n+            }).and_then(|_| future::ok(()))\n+        }).then(|_| future::ok(()));\n+        handle.spawn(ssl_acceptor);\n+\n+        let listener = rx.then(|r| match r {\n+            Ok(real_r) => real_r,\n+            Err(e) => panic!(e),",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 100,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "bbigras",
            "id": 24027,
            "node_id": "MDQ6VXNlcjI0MDI3",
            "avatar_url": "https://avatars1.githubusercontent.com/u/24027?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bbigras",
            "html_url": "https://github.com/bbigras",
            "followers_url": "https://api.github.com/users/bbigras/followers",
            "following_url": "https://api.github.com/users/bbigras/following{/other_user}",
            "gists_url": "https://api.github.com/users/bbigras/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bbigras/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bbigras/subscriptions",
            "organizations_url": "https://api.github.com/users/bbigras/orgs",
            "repos_url": "https://api.github.com/users/bbigras/repos",
            "events_url": "https://api.github.com/users/bbigras/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bbigras/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "maybe use [std::unreachable](https://doc.rust-lang.org/std/macro.unreachable.html)",
        "created_at": "2017-05-09T16:41:26Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115539232",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115539232"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115539232"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 115410889
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115539785",
        "pull_request_review_id": 37086428,
        "id": 115539785,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTUzOTc4NQ==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 74,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "sfackler",
            "id": 1455697,
            "node_id": "MDQ6VXNlcjE0NTU2OTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1455697?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfackler",
            "html_url": "https://github.com/sfackler",
            "followers_url": "https://api.github.com/users/sfackler/followers",
            "following_url": "https://api.github.com/users/sfackler/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions",
            "organizations_url": "https://api.github.com/users/sfackler/orgs",
            "repos_url": "https://api.github.com/users/sfackler/repos",
            "events_url": "https://api.github.com/users/sfackler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfackler/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Cool, thanks, that seems reasonable.",
        "created_at": "2017-05-09T16:43:48Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115539785",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115539785"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115539785"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 115410832
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/115872954",
        "pull_request_review_id": 37450798,
        "id": 115872954,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg3Mjk1NA==",
        "diff_hunk": "@@ -111,89 +128,139 @@ impl<H: Handler> Iron<H> {\n     /// Kick off the server process using the HTTP protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn http<A>(self, addr: A) -> HttpResult<Listening>\n+    pub fn http<A>(self, addr: A) -> HttpResult<()>\n         where A: ToSocketAddrs\n     {\n-        HttpListener::new(addr).and_then(|l| self.listen(l, Protocol::http()))\n+        let addr = addr.to_socket_addrs()?.next().unwrap();\n+\n+        let core = Core::new().unwrap();\n+        let handle = core.handle();\n+\n+        let sock = TcpListener::bind(&addr, &handle).unwrap().incoming();\n+\n+        return self.listen(sock, addr, Protocol::http(), core, handle);\n     }\n \n     /// Kick off the server process using the HTTPS protocol.\n     ///\n     /// Call this once to begin listening for requests on the server.\n-    /// This consumes the Iron instance, but does the listening on\n-    /// another task, so is not blocking.\n-    ///\n-    /// The thread returns a guard that will automatically join with the parent\n-    /// once it is dropped, blocking until this happens.\n-    pub fn https<A, S>(self, addr: A, ssl: S) -> HttpResult<Listening>\n-        where A: ToSocketAddrs,\n-              S: 'static + SslServer + Send + Clone\n+    #[cfg(feature = \"ssl\")]",
        "path": "src/iron.rs",
        "position": null,
        "original_position": 74,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "ec6c367547280b3d7b9d2dde797ff9e2f8977418",
        "user": {
            "login": "MJDSys",
            "id": 2875429,
            "node_id": "MDQ6VXNlcjI4NzU0Mjk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2875429?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MJDSys",
            "html_url": "https://github.com/MJDSys",
            "followers_url": "https://api.github.com/users/MJDSys/followers",
            "following_url": "https://api.github.com/users/MJDSys/following{/other_user}",
            "gists_url": "https://api.github.com/users/MJDSys/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MJDSys/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MJDSys/subscriptions",
            "organizations_url": "https://api.github.com/users/MJDSys/orgs",
            "repos_url": "https://api.github.com/users/MJDSys/repos",
            "events_url": "https://api.github.com/users/MJDSys/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MJDSys/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@sfackler I'm really not sure how to handle this now.  It doesn't appear there is a generic way to get a ServerProto to start a server.\r\n\r\nIf we don't mind being forever bound to using TCP (something my current implementation isn't reliant on), then I could make a trait with a single method that takes a ```hyper::server::Http``` and returns something implementing ```ServerProto```, which I can then use with TcpServer.  Then https can provide a default version that uses tokio-tls and http can have a simple identity function.\r\n\r\nAlternately, we could get tokio-proto to make a trait to start a generic server.  I'm not sure how useful/plausible that is.  We could make our own for now while that is investigated.\r\n\r\nThoughts?",
        "created_at": "2017-05-10T23:03:19Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r115872954",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/115872954"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r115872954"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 115410832
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/202829403",
        "pull_request_review_id": 137602934,
        "id": 202829403,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgyOTQwMw==",
        "diff_hunk": "@@ -1,38 +1,34 @@\n [package]\n-\n-name = \"iron\"\n-version = \"0.6.0\"\n-description = \"Extensible, Concurrency Focused Web Development in Rust.\"\n-readme = \"README.md\"\n-repository = \"https://github.com/iron/iron\"\n-documentation = \"http://ironframework.io/doc/iron/\"\n-license = \"MIT\"\n authors = [\n     \"Jonathan Reem <jonathan.reem@gmail.com>\",\n     \"Zach Pomerantz <zmp@umich.edu>\",\n     \"Michael Sproul <micsproul@gmail.com>\",\n-    \"Patrick Tran <patrick.tran06@gmail.com>\"\n+    \"Patrick Tran <patrick.tran06@gmail.com>\",\n ]\n-\n-[lib]\n+description = \"Extensible, Concurrency Focused Web Development in Rust.\"\n+documentation = \"http://ironframework.io/doc/iron/\"\n+license = \"MIT\"\n name = \"iron\"\n-path = \"src/lib.rs\"\n-\n-[features]\n-default = []\n-native-tls-example = [\"hyper-native-tls\"]\n+readme = \"README.md\"\n+repository = \"https://github.com/iron/iron\"\n+version = \"0.6.0\"",
        "path": "Cargo.toml",
        "position": 30,
        "original_position": 30,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "zgtm",
            "id": 17168083,
            "node_id": "MDQ6VXNlcjE3MTY4MDgz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/17168083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zgtm",
            "html_url": "https://github.com/zgtm",
            "followers_url": "https://api.github.com/users/zgtm/followers",
            "following_url": "https://api.github.com/users/zgtm/following{/other_user}",
            "gists_url": "https://api.github.com/users/zgtm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zgtm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zgtm/subscriptions",
            "organizations_url": "https://api.github.com/users/zgtm/orgs",
            "repos_url": "https://api.github.com/users/zgtm/repos",
            "events_url": "https://api.github.com/users/zgtm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zgtm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this should be bumped to 0.7.0-pre.0 or something, here or soon-ish. After all, nothing in here is compatible with iron 0.6 anymore.",
        "created_at": "2018-07-16T21:23:55Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r202829403",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/202829403"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r202829403"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/202831556",
        "pull_request_review_id": 137602934,
        "id": 202831556,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgzMTU1Ng==",
        "diff_hunk": "@@ -1,46 +1,49 @@\n-#[macro_use]\n-extern crate mime;\n extern crate iron;\n \n use std::env;\n \n+use iron::headers;\n use iron::prelude::*;\n-use iron::headers::ContentType;\n-use iron::status;\n+use iron::StatusCode;\n \n // All these variants do the same thing, with more or less options for customization.\n \n fn variant1(_: &mut Request) -> IronResult<Response> {\n-    Ok(Response::with((ContentType::json().0, status::Ok, \"{}\")))\n+    Ok(Response::with((\n+        iron::modifiers::Header(\n+            headers::CONTENT_TYPE,\n+            headers::HeaderValue::from_static(iron::mime::APPLICATION_JSON.as_ref()),\n+        ),\n+        StatusCode::OK,\n+        \"{}\",\n+    )))\n }\n \n fn variant2(_: &mut Request) -> IronResult<Response> {\n     use iron::mime;\n-    let content_type = \"application/json\".parse::<mime::Mime>().unwrap();\n-    Ok(Response::with((content_type, status::Ok, \"{}\")))\n+    let content_type = mime::APPLICATION_JSON;\n+    Ok(Response::with((content_type, StatusCode::OK, \"{}\")))\n }\n \n fn variant3(_: &mut Request) -> IronResult<Response> {\n-    let content_type = mime!(Application/Json);\n-    Ok(Response::with((content_type, status::Ok, \"{}\")))\n-}\n-\n-fn variant4(_: &mut Request) -> IronResult<Response> {\n     use iron::mime;\n-    let content_type = mime::Mime(iron::mime::TopLevel::Application, iron::mime::SubLevel::Json, vec![]);\n-    Ok(Response::with((content_type, status::Ok, \"{}\")))\n+    let content_type = \"application/json\".parse::<mime::Mime>().unwrap();\n+    Ok(Response::with((content_type, StatusCode::OK, \"{}\")))\n }\n \n fn main() {\n     let args: Vec<String> = env::args().collect();\n-    let variant_index = if args.len() > 1 { args[1].parse().unwrap() } else { 1 };\n+    let variant_index = if args.len() > 1 {",
        "path": "examples/content_type.rs",
        "position": 51,
        "original_position": 51,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "zgtm",
            "id": 17168083,
            "node_id": "MDQ6VXNlcjE3MTY4MDgz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/17168083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zgtm",
            "html_url": "https://github.com/zgtm",
            "followers_url": "https://api.github.com/users/zgtm/followers",
            "following_url": "https://api.github.com/users/zgtm/following{/other_user}",
            "gists_url": "https://api.github.com/users/zgtm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zgtm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zgtm/subscriptions",
            "organizations_url": "https://api.github.com/users/zgtm/orgs",
            "repos_url": "https://api.github.com/users/zgtm/repos",
            "events_url": "https://api.github.com/users/zgtm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zgtm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "To my taste, this looks a bit cleaner as a one-line expression.",
        "created_at": "2018-07-16T21:32:35Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r202831556",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/202831556"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r202831556"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/202835718",
        "pull_request_review_id": 137602934,
        "id": 202835718,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgzNTcxOA==",
        "diff_hunk": "@@ -6,9 +6,9 @@ struct DefaultContentType;\n impl AfterMiddleware for DefaultContentType {\n     // This is run for every requests, AFTER all handlers have been executed\n     fn after(&self, _req: &mut Request, mut resp: Response) -> IronResult<Response> {\n-        if resp.headers.get::<iron::headers::ContentType>() == None {\n+        if resp.headers.get(iron::headers::CONTENT_TYPE) == None {\n             // Set a standard header\n-            resp.headers.set(iron::headers::ContentType::plaintext());\n+            resp.headers.insert(iron::headers::CONTENT_TYPE, iron::headers::HeaderValue::from_static(iron::mime::TEXT_PLAIN.as_ref()));",
        "path": "examples/get_set_headers.rs",
        "position": null,
        "original_position": 8,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "zgtm",
            "id": 17168083,
            "node_id": "MDQ6VXNlcjE3MTY4MDgz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/17168083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zgtm",
            "html_url": "https://github.com/zgtm",
            "followers_url": "https://api.github.com/users/zgtm/followers",
            "following_url": "https://api.github.com/users/zgtm/following{/other_user}",
            "gists_url": "https://api.github.com/users/zgtm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zgtm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zgtm/subscriptions",
            "organizations_url": "https://api.github.com/users/zgtm/orgs",
            "repos_url": "https://api.github.com/users/zgtm/repos",
            "events_url": "https://api.github.com/users/zgtm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zgtm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Skimming the hyper documentation, I think this would be more idiomatically written as\r\n\r\n    resp.headers.insert(iron::headers::CONTENT_TYPE, \"text/plain\".parse().unwrap());",
        "created_at": "2018-07-16T21:49:19Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r202835718",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/202835718"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r202835718"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/202838720",
        "pull_request_review_id": 137602934,
        "id": 202838720,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgzODcyMA==",
        "diff_hunk": "@@ -141,17 +140,12 @@ pub mod url {\n }\n \n /// Status Codes\n-pub mod status {\n-    pub use hyper::status::StatusCode as Status;\n-    pub use hyper::status::StatusCode::*;\n-    pub use hyper::status::StatusClass;\n-}\n+pub use http::status as status;\n+pub use http::status::StatusCode;",
        "path": "src/lib.rs",
        "position": null,
        "original_position": 57,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "zgtm",
            "id": 17168083,
            "node_id": "MDQ6VXNlcjE3MTY4MDgz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/17168083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zgtm",
            "html_url": "https://github.com/zgtm",
            "followers_url": "https://api.github.com/users/zgtm/followers",
            "following_url": "https://api.github.com/users/zgtm/following{/other_user}",
            "gists_url": "https://api.github.com/users/zgtm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zgtm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zgtm/subscriptions",
            "organizations_url": "https://api.github.com/users/zgtm/orgs",
            "repos_url": "https://api.github.com/users/zgtm/repos",
            "events_url": "https://api.github.com/users/zgtm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zgtm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why not use\r\n\r\n    pub use http::status::StatusCode as Status\r\n\r\nand not import `http::status` at all? This would also spare us some renaming\u00b9 in lots of other places.\r\n\r\nAs far as I can tell, `http::status` basically never used except for some occurences of `status::StatusCode`\u2014which already is imported as `StatusCode` right now.\r\n\r\n\u00b9 Not that it really would spare us renaming, since the names have all been changed to ALL_CAPS, but still \u2026",
        "created_at": "2018-07-16T22:00:58Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r202838720",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/202838720"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r202838720"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/202840600",
        "pull_request_review_id": 137602934,
        "id": 202840600,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg0MDYwMA==",
        "diff_hunk": "@@ -129,7 +131,7 @@ impl<'a> Modifier<Response> for &'a Path {\n     /// Panics if there is no file at the passed-in Path.\n     fn modify(self, res: &mut Response) {\n         File::open(self)\n-            .expect(&format!(\"No such file: {}\", self.display()))\n+            .unwrap_or_else(|_| panic!(\"No such file: {}\", self.display()))",
        "path": "src/modifiers.rs",
        "position": 84,
        "original_position": 84,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "zgtm",
            "id": 17168083,
            "node_id": "MDQ6VXNlcjE3MTY4MDgz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/17168083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zgtm",
            "html_url": "https://github.com/zgtm",
            "followers_url": "https://api.github.com/users/zgtm/followers",
            "following_url": "https://api.github.com/users/zgtm/following{/other_user}",
            "gists_url": "https://api.github.com/users/zgtm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zgtm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zgtm/subscriptions",
            "organizations_url": "https://api.github.com/users/zgtm/orgs",
            "repos_url": "https://api.github.com/users/zgtm/repos",
            "events_url": "https://api.github.com/users/zgtm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zgtm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why is this better than `.expect(&format!(\"No such file: {}\", self.display()))`? Is it just to spare the call to self.display?",
        "created_at": "2018-07-16T22:09:36Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r202840600",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/202840600"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r202840600"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/202842683",
        "pull_request_review_id": 137602934,
        "id": 202842683,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg0MjY4Mw==",
        "diff_hunk": "@@ -1,49 +1,48 @@\n //! Iron's HTTP Request representation and associated methods.\n \n-use std::io::{self, Read};\n-use std::net::SocketAddr;\n+use std::u16;",
        "path": "src/request/mod.rs",
        "position": null,
        "original_position": 5,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "zgtm",
            "id": 17168083,
            "node_id": "MDQ6VXNlcjE3MTY4MDgz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/17168083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zgtm",
            "html_url": "https://github.com/zgtm",
            "followers_url": "https://api.github.com/users/zgtm/followers",
            "following_url": "https://api.github.com/users/zgtm/following{/other_user}",
            "gists_url": "https://api.github.com/users/zgtm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zgtm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zgtm/subscriptions",
            "organizations_url": "https://api.github.com/users/zgtm/orgs",
            "repos_url": "https://api.github.com/users/zgtm/repos",
            "events_url": "https://api.github.com/users/zgtm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zgtm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What's this doing here? ^.^ I think this line can safely be dropped.",
        "created_at": "2018-07-16T22:19:18Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r202842683",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/202842683"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r202842683"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/203093633",
        "pull_request_review_id": 137916332,
        "id": 203093633,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzA5MzYzMw==",
        "diff_hunk": "@@ -129,7 +131,7 @@ impl<'a> Modifier<Response> for &'a Path {\n     /// Panics if there is no file at the passed-in Path.\n     fn modify(self, res: &mut Response) {\n         File::open(self)\n-            .expect(&format!(\"No such file: {}\", self.display()))\n+            .unwrap_or_else(|_| panic!(\"No such file: {}\", self.display()))",
        "path": "src/modifiers.rs",
        "position": 84,
        "original_position": 84,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "phlmn",
            "id": 806995,
            "node_id": "MDQ6VXNlcjgwNjk5NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/806995?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/phlmn",
            "html_url": "https://github.com/phlmn",
            "followers_url": "https://api.github.com/users/phlmn/followers",
            "following_url": "https://api.github.com/users/phlmn/following{/other_user}",
            "gists_url": "https://api.github.com/users/phlmn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/phlmn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/phlmn/subscriptions",
            "organizations_url": "https://api.github.com/users/phlmn/orgs",
            "repos_url": "https://api.github.com/users/phlmn/repos",
            "events_url": "https://api.github.com/users/phlmn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/phlmn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Probably because you don't call `format` when there is no error",
        "created_at": "2018-07-17T16:36:54Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r203093633",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/203093633"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r203093633"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 202840600
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/203098941",
        "pull_request_review_id": 137922647,
        "id": 203098941,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzA5ODk0MQ==",
        "diff_hunk": "@@ -141,17 +140,12 @@ pub mod url {\n }\n \n /// Status Codes\n-pub mod status {\n-    pub use hyper::status::StatusCode as Status;\n-    pub use hyper::status::StatusCode::*;\n-    pub use hyper::status::StatusClass;\n-}\n+pub use http::status as status;\n+pub use http::status::StatusCode;",
        "path": "src/lib.rs",
        "position": null,
        "original_position": 57,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "phlmn",
            "id": 806995,
            "node_id": "MDQ6VXNlcjgwNjk5NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/806995?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/phlmn",
            "html_url": "https://github.com/phlmn",
            "followers_url": "https://api.github.com/users/phlmn/followers",
            "following_url": "https://api.github.com/users/phlmn/following{/other_user}",
            "gists_url": "https://api.github.com/users/phlmn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/phlmn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/phlmn/subscriptions",
            "organizations_url": "https://api.github.com/users/phlmn/orgs",
            "repos_url": "https://api.github.com/users/phlmn/repos",
            "events_url": "https://api.github.com/users/phlmn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/phlmn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Umm... Like hyper? :D Seems like a good idea",
        "created_at": "2018-07-17T16:52:57Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r203098941",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/203098941"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r203098941"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 202838720
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/203103433",
        "pull_request_review_id": 137928001,
        "id": 203103433,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzEwMzQzMw==",
        "diff_hunk": "@@ -141,17 +140,12 @@ pub mod url {\n }\n \n /// Status Codes\n-pub mod status {\n-    pub use hyper::status::StatusCode as Status;\n-    pub use hyper::status::StatusCode::*;\n-    pub use hyper::status::StatusClass;\n-}\n+pub use http::status as status;\n+pub use http::status::StatusCode;",
        "path": "src/lib.rs",
        "position": null,
        "original_position": 57,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "phlmn",
            "id": 806995,
            "node_id": "MDQ6VXNlcjgwNjk5NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/806995?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/phlmn",
            "html_url": "https://github.com/phlmn",
            "followers_url": "https://api.github.com/users/phlmn/followers",
            "following_url": "https://api.github.com/users/phlmn/following{/other_user}",
            "gists_url": "https://api.github.com/users/phlmn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/phlmn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/phlmn/subscriptions",
            "organizations_url": "https://api.github.com/users/phlmn/orgs",
            "repos_url": "https://api.github.com/users/phlmn/repos",
            "events_url": "https://api.github.com/users/phlmn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/phlmn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok hyper just exports StatusCode, I think we should also do that.",
        "created_at": "2018-07-17T17:06:57Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r203103433",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/203103433"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r203103433"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 202838720
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/203115549",
        "pull_request_review_id": 137942329,
        "id": 203115549,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzExNTU0OQ==",
        "diff_hunk": "@@ -129,7 +131,7 @@ impl<'a> Modifier<Response> for &'a Path {\n     /// Panics if there is no file at the passed-in Path.\n     fn modify(self, res: &mut Response) {\n         File::open(self)\n-            .expect(&format!(\"No such file: {}\", self.display()))\n+            .unwrap_or_else(|_| panic!(\"No such file: {}\", self.display()))",
        "path": "src/modifiers.rs",
        "position": 84,
        "original_position": 84,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "RobertWHurst",
            "id": 178857,
            "node_id": "MDQ6VXNlcjE3ODg1Nw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/178857?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RobertWHurst",
            "html_url": "https://github.com/RobertWHurst",
            "followers_url": "https://api.github.com/users/RobertWHurst/followers",
            "following_url": "https://api.github.com/users/RobertWHurst/following{/other_user}",
            "gists_url": "https://api.github.com/users/RobertWHurst/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RobertWHurst/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RobertWHurst/subscriptions",
            "organizations_url": "https://api.github.com/users/RobertWHurst/orgs",
            "repos_url": "https://api.github.com/users/RobertWHurst/repos",
            "events_url": "https://api.github.com/users/RobertWHurst/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RobertWHurst/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@phlmn I also don't understand this change. `format!` can be used for all sorts of use cases, I'm not sure I follow why it shouldn't be used to build a string for an `expect` call.",
        "created_at": "2018-07-17T17:43:37Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r203115549",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/203115549"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r203115549"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 202840600
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/204093341",
        "pull_request_review_id": 139118547,
        "id": 204093341,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA5MzM0MQ==",
        "diff_hunk": "@@ -129,7 +131,7 @@ impl<'a> Modifier<Response> for &'a Path {\n     /// Panics if there is no file at the passed-in Path.\n     fn modify(self, res: &mut Response) {\n         File::open(self)\n-            .expect(&format!(\"No such file: {}\", self.display()))\n+            .unwrap_or_else(|_| panic!(\"No such file: {}\", self.display()))",
        "path": "src/modifiers.rs",
        "position": 84,
        "original_position": 84,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "phlmn",
            "id": 806995,
            "node_id": "MDQ6VXNlcjgwNjk5NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/806995?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/phlmn",
            "html_url": "https://github.com/phlmn",
            "followers_url": "https://api.github.com/users/phlmn/followers",
            "following_url": "https://api.github.com/users/phlmn/following{/other_user}",
            "gists_url": "https://api.github.com/users/phlmn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/phlmn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/phlmn/subscriptions",
            "organizations_url": "https://api.github.com/users/phlmn/orgs",
            "repos_url": "https://api.github.com/users/phlmn/repos",
            "events_url": "https://api.github.com/users/phlmn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/phlmn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@RobertWHurst I did not write that line and I don't think there is any noticeable difference, but: If you write `expect(&format(\u2026))` the `format(\u2026)` is always executed while `unwrap_or_else(|_| panic!(\u2026))` only executes a format if the `Result` is an `Err`. ",
        "created_at": "2018-07-20T16:05:42Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r204093341",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/204093341"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r204093341"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 202840600
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/204096534",
        "pull_request_review_id": 139122350,
        "id": 204096534,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA5NjUzNA==",
        "diff_hunk": "@@ -6,9 +6,9 @@ struct DefaultContentType;\n impl AfterMiddleware for DefaultContentType {\n     // This is run for every requests, AFTER all handlers have been executed\n     fn after(&self, _req: &mut Request, mut resp: Response) -> IronResult<Response> {\n-        if resp.headers.get::<iron::headers::ContentType>() == None {\n+        if resp.headers.get(iron::headers::CONTENT_TYPE) == None {\n             // Set a standard header\n-            resp.headers.set(iron::headers::ContentType::plaintext());\n+            resp.headers.insert(iron::headers::CONTENT_TYPE, iron::headers::HeaderValue::from_static(iron::mime::TEXT_PLAIN.as_ref()));",
        "path": "examples/get_set_headers.rs",
        "position": null,
        "original_position": 8,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "phlmn",
            "id": 806995,
            "node_id": "MDQ6VXNlcjgwNjk5NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/806995?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/phlmn",
            "html_url": "https://github.com/phlmn",
            "followers_url": "https://api.github.com/users/phlmn/followers",
            "following_url": "https://api.github.com/users/phlmn/following{/other_user}",
            "gists_url": "https://api.github.com/users/phlmn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/phlmn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/phlmn/subscriptions",
            "organizations_url": "https://api.github.com/users/phlmn/orgs",
            "repos_url": "https://api.github.com/users/phlmn/repos",
            "events_url": "https://api.github.com/users/phlmn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/phlmn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "But then there we don't check if it's a valid content type\u2026 What about:\r\n```\r\nresp.headers.insert(iron::headers::CONTENT_TYPE, iron::mime::TEXT_PLAIN.as_ref().parse().unwrap());\r\n```",
        "created_at": "2018-07-20T16:16:06Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r204096534",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/204096534"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r204096534"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 202835718
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/204102027",
        "pull_request_review_id": 139129002,
        "id": 204102027,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEwMjAyNw==",
        "diff_hunk": "@@ -1,46 +1,49 @@\n-#[macro_use]\n-extern crate mime;\n extern crate iron;\n \n use std::env;\n \n+use iron::headers;\n use iron::prelude::*;\n-use iron::headers::ContentType;\n-use iron::status;\n+use iron::StatusCode;\n \n // All these variants do the same thing, with more or less options for customization.\n \n fn variant1(_: &mut Request) -> IronResult<Response> {\n-    Ok(Response::with((ContentType::json().0, status::Ok, \"{}\")))\n+    Ok(Response::with((\n+        iron::modifiers::Header(\n+            headers::CONTENT_TYPE,\n+            headers::HeaderValue::from_static(iron::mime::APPLICATION_JSON.as_ref()),\n+        ),\n+        StatusCode::OK,\n+        \"{}\",\n+    )))\n }\n \n fn variant2(_: &mut Request) -> IronResult<Response> {\n     use iron::mime;\n-    let content_type = \"application/json\".parse::<mime::Mime>().unwrap();\n-    Ok(Response::with((content_type, status::Ok, \"{}\")))\n+    let content_type = mime::APPLICATION_JSON;\n+    Ok(Response::with((content_type, StatusCode::OK, \"{}\")))\n }\n \n fn variant3(_: &mut Request) -> IronResult<Response> {\n-    let content_type = mime!(Application/Json);\n-    Ok(Response::with((content_type, status::Ok, \"{}\")))\n-}\n-\n-fn variant4(_: &mut Request) -> IronResult<Response> {\n     use iron::mime;\n-    let content_type = mime::Mime(iron::mime::TopLevel::Application, iron::mime::SubLevel::Json, vec![]);\n-    Ok(Response::with((content_type, status::Ok, \"{}\")))\n+    let content_type = \"application/json\".parse::<mime::Mime>().unwrap();\n+    Ok(Response::with((content_type, StatusCode::OK, \"{}\")))\n }\n \n fn main() {\n     let args: Vec<String> = env::args().collect();\n-    let variant_index = if args.len() > 1 { args[1].parse().unwrap() } else { 1 };\n+    let variant_index = if args.len() > 1 {",
        "path": "examples/content_type.rs",
        "position": 51,
        "original_position": 51,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "1eb076bcbd34b8cd6add8b9b06607a8ce7c55ba1",
        "user": {
            "login": "phlmn",
            "id": 806995,
            "node_id": "MDQ6VXNlcjgwNjk5NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/806995?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/phlmn",
            "html_url": "https://github.com/phlmn",
            "followers_url": "https://api.github.com/users/phlmn/followers",
            "following_url": "https://api.github.com/users/phlmn/following{/other_user}",
            "gists_url": "https://api.github.com/users/phlmn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/phlmn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/phlmn/subscriptions",
            "organizations_url": "https://api.github.com/users/phlmn/orgs",
            "repos_url": "https://api.github.com/users/phlmn/repos",
            "events_url": "https://api.github.com/users/phlmn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/phlmn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I won't change this, since we should simply format the whole project with rustfmt.",
        "created_at": "2018-07-20T16:37:44Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r204102027",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/204102027"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r204102027"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 202831556
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/204109592",
        "pull_request_review_id": 139137943,
        "id": 204109592,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEwOTU5Mg==",
        "diff_hunk": "@@ -63,7 +64,7 @@ use response::{WriteBody, BodyReader};\n impl Modifier<Response> for Mime {\n     #[inline]\n     fn modify(self, res: &mut Response) {\n-        res.headers.set(headers::ContentType(self))\n+        res.headers.insert(headers::CONTENT_TYPE, self.as_ref().parse().unwrap()); // TODO: error handling?",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 56,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3dda7f9d565865a4ba081e590787e382671671dc",
        "user": {
            "login": "phlmn",
            "id": 806995,
            "node_id": "MDQ6VXNlcjgwNjk5NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/806995?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/phlmn",
            "html_url": "https://github.com/phlmn",
            "followers_url": "https://api.github.com/users/phlmn/followers",
            "following_url": "https://api.github.com/users/phlmn/following{/other_user}",
            "gists_url": "https://api.github.com/users/phlmn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/phlmn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/phlmn/subscriptions",
            "organizations_url": "https://api.github.com/users/phlmn/orgs",
            "repos_url": "https://api.github.com/users/phlmn/repos",
            "events_url": "https://api.github.com/users/phlmn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/phlmn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What do we do with these errors?",
        "created_at": "2018-07-20T17:06:09Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r204109592",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/204109592"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r204109592"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/206109515",
        "pull_request_review_id": 141504416,
        "id": 206109515,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwOTUxNQ==",
        "diff_hunk": "@@ -63,7 +64,7 @@ use response::{WriteBody, BodyReader};\n impl Modifier<Response> for Mime {\n     #[inline]\n     fn modify(self, res: &mut Response) {\n-        res.headers.set(headers::ContentType(self))\n+        res.headers.insert(headers::CONTENT_TYPE, self.as_ref().parse().unwrap()); // TODO: error handling?",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 56,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3dda7f9d565865a4ba081e590787e382671671dc",
        "user": {
            "login": "zgtm",
            "id": 17168083,
            "node_id": "MDQ6VXNlcjE3MTY4MDgz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/17168083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zgtm",
            "html_url": "https://github.com/zgtm",
            "followers_url": "https://api.github.com/users/zgtm/followers",
            "following_url": "https://api.github.com/users/zgtm/following{/other_user}",
            "gists_url": "https://api.github.com/users/zgtm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zgtm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zgtm/subscriptions",
            "organizations_url": "https://api.github.com/users/zgtm/orgs",
            "repos_url": "https://api.github.com/users/zgtm/repos",
            "events_url": "https://api.github.com/users/zgtm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zgtm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think in this case, there is no error handling necessary, as a Mime should always parse into a valid string for HeaderValue.",
        "created_at": "2018-07-30T12:11:55Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r206109515",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/206109515"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r206109515"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 204109592
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/206110820",
        "pull_request_review_id": 141505865,
        "id": 206110820,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjExMDgyMA==",
        "diff_hunk": "@@ -91,7 +92,7 @@ impl Modifier<Response> for String {\n impl Modifier<Response> for Vec<u8> {\n     #[inline]\n     fn modify(self, res: &mut Response) {\n-        res.headers.set(headers::ContentLength(self.len() as u64));\n+        res.headers.insert(headers::CONTENT_LENGTH, (self.len() as u64).to_string().parse().unwrap()); // TODO: error handling?",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 65,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3dda7f9d565865a4ba081e590787e382671671dc",
        "user": {
            "login": "zgtm",
            "id": 17168083,
            "node_id": "MDQ6VXNlcjE3MTY4MDgz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/17168083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zgtm",
            "html_url": "https://github.com/zgtm",
            "followers_url": "https://api.github.com/users/zgtm/followers",
            "following_url": "https://api.github.com/users/zgtm/following{/other_user}",
            "gists_url": "https://api.github.com/users/zgtm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zgtm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zgtm/subscriptions",
            "organizations_url": "https://api.github.com/users/zgtm/orgs",
            "repos_url": "https://api.github.com/users/zgtm/repos",
            "events_url": "https://api.github.com/users/zgtm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zgtm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Here, `(self.len() as u64).into()` would be enough.\r\n\r\nSimilar for 23 lines below \u2026 (`metadata.len().into()`)",
        "created_at": "2018-07-30T12:16:35Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r206110820",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/206110820"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r206110820"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/206112348",
        "pull_request_review_id": 141507681,
        "id": 206112348,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjExMjM0OA==",
        "diff_hunk": "@@ -179,7 +180,7 @@ pub struct Redirect(pub Url);\n impl Modifier<Response> for Redirect {\n     fn modify(self, res: &mut Response) {\n         let Redirect(url) = self;\n-        res.headers.set(headers::Location(url.to_string()));\n+        res.headers.insert(headers::LOCATION, url.to_string().parse().unwrap()); // TODO: error handling?",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 127,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3dda7f9d565865a4ba081e590787e382671671dc",
        "user": {
            "login": "zgtm",
            "id": 17168083,
            "node_id": "MDQ6VXNlcjE3MTY4MDgz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/17168083?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zgtm",
            "html_url": "https://github.com/zgtm",
            "followers_url": "https://api.github.com/users/zgtm/followers",
            "following_url": "https://api.github.com/users/zgtm/following{/other_user}",
            "gists_url": "https://api.github.com/users/zgtm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zgtm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zgtm/subscriptions",
            "organizations_url": "https://api.github.com/users/zgtm/orgs",
            "repos_url": "https://api.github.com/users/zgtm/repos",
            "events_url": "https://api.github.com/users/zgtm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zgtm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Here and 10 lines below: Here, also, the strings should always be valid HeaderValues. Thus, no error handling necessary.",
        "created_at": "2018-07-30T12:22:07Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r206112348",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/206112348"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r206112348"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/iron/iron/pulls/comments/207708543",
        "pull_request_review_id": 143382427,
        "id": 207708543,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwODU0Mw==",
        "diff_hunk": "@@ -179,7 +180,7 @@ pub struct Redirect(pub Url);\n impl Modifier<Response> for Redirect {\n     fn modify(self, res: &mut Response) {\n         let Redirect(url) = self;\n-        res.headers.set(headers::Location(url.to_string()));\n+        res.headers.insert(headers::LOCATION, url.to_string().parse().unwrap()); // TODO: error handling?",
        "path": "src/modifiers.rs",
        "position": null,
        "original_position": 127,
        "commit_id": "8165ed5a57b03fe1574a5044760f3623eb728cb5",
        "original_commit_id": "3dda7f9d565865a4ba081e590787e382671671dc",
        "user": {
            "login": "phlmn",
            "id": 806995,
            "node_id": "MDQ6VXNlcjgwNjk5NQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/806995?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/phlmn",
            "html_url": "https://github.com/phlmn",
            "followers_url": "https://api.github.com/users/phlmn/followers",
            "following_url": "https://api.github.com/users/phlmn/following{/other_user}",
            "gists_url": "https://api.github.com/users/phlmn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/phlmn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/phlmn/subscriptions",
            "organizations_url": "https://api.github.com/users/phlmn/orgs",
            "repos_url": "https://api.github.com/users/phlmn/repos",
            "events_url": "https://api.github.com/users/phlmn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/phlmn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`parse()` could error here since only visible ASCII characters are permitted:  https://docs.rs/hyper/0.12.7/hyper/header/struct.HeaderValue.html#method.from_str",
        "created_at": "2018-08-04T13:18:00Z",
        "updated_at": "2018-08-04T17:09:40Z",
        "html_url": "https://github.com/iron/iron/pull/523#discussion_r207708543",
        "pull_request_url": "https://api.github.com/repos/iron/iron/pulls/523",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/iron/iron/pulls/comments/207708543"
            },
            "html": {
                "href": "https://github.com/iron/iron/pull/523#discussion_r207708543"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/iron/iron/pulls/523"
            }
        },
        "in_reply_to_id": 206112348
    }
]